{
    "aten._foreach_pow.ScalarAndTensor": {
        "count": 1,
        "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
    },
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([30522, 768], f32), T([512, 768], f32), T([1024, 768], f32), T([1024, 768], f32), T([1024, 768], f32), T([1024, 768], f32), T([2, 768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([30522], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([8192, 30522], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([8192, 30522], f32), T([8192, 30522], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 12,
        "inputs": "((T([16, 12, 512, 512], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 12,
        "inputs": "((T([16, 12, 512, 512], f32), T([16, 12, 512, 512], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 12,
        "inputs": "((T([16, 512, 768], f32), [8192, 768]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([30522, 768], f32), T([30522, 768], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([30522], f32), T([8192, 768], f32), T([768, 30522], f32, stride=(1, 768))), {})"
    },
    "aten.any.default": {
        "count": 1,
        "inputs": "((T([16, 2], b8),), {})"
    },
    "aten.bmm.default": {
        "count": 12,
        "inputs": "((T([192, 512, 512], f32), T([192, 512, 64], f32, stride=(32768, 1, 512))), {})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([2, 768], f32), T([16, 512], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([16, 512, 768], f32), T([16, 512], i64), 30522, 0, False), {})"
    },
    "aten.eq.Scalar": {
        "count": 1,
        "inputs": "((T([16, 2], i64), 0), {})"
    },
    "aten.gelu.default": {
        "count": 1,
        "inputs": "((T([16, 512, 768], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 12,
        "inputs": "((T([16, 512, 3072], f32), T([16, 512, 3072], f32)), {})"
    },
    "aten.index.Tensor": {
        "count": 1,
        "inputs": "((T([16, 512], i64), [None, T([2], i64)]), {})"
    },
    "aten.mm.default": {
        "count": 12,
        "inputs": "((T([3072, 8192], f32, stride=(1, 3072)), T([8192, 768], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 24,
        "inputs": "((T([16, 12, 512, 512], f32), 0.125), {})"
    },
    "aten.native_dropout.default": {
        "count": 12,
        "inputs": "((T([16, 12, 512, 512], f32), 0.1, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 12,
        "inputs": "((T([16, 12, 512, 512], f32), T([16, 12, 512, 512], b8), 1.1111111111111112), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 26,
        "inputs": "((T([16, 512, 768], f32), [768], T([768], f32), T([768], f32), 1e-12), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 26,
        "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32), [768], T([16, 512, 1], f32), T([16, 512, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([8192, 30522], f32), T([8192], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([8192, 30522], f32), T([8192], i64), None, 1, -100), {})"
    },
    "aten.rsub.Scalar": {
        "count": 1,
        "inputs": "((T([16, 1, 1, 512], f32), 1.0), {})"
    },
    "aten.sub.Tensor": {
        "count": 2,
        "inputs": "((T([16, 512], i64, stride=(2048, 4)), T([16, 512], i64, stride=(2048, 4))), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([16, 512, 768], f32), [0], True), {})"
    },
    "aten.tanh.default": {
        "count": 1,
        "inputs": "((T([16, 768], f32),), {})"
    }
}