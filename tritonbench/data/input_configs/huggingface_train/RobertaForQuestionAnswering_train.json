{
    "aten._foreach_pow.ScalarAndTensor": {
        "count": 1,
        "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
    },
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([50265, 768], f32), T([512, 768], f32), T([2, 768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([2, 768], f32), T([2], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 2,
        "inputs": "((T([16, 512], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 2,
        "inputs": "((T([16, 512], f32), T([16, 512], f32), 1, f32), {})"
    },
    "aten._scaled_dot_product_efficient_attention.default": {
        "count": 12,
        "inputs": "((T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), None, True, 0.1), {})"
    },
    "aten._scaled_dot_product_efficient_attention_backward.default": {
        "count": 12,
        "inputs": "((T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), None, T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512], f32), T([], i64), T([], i64), 0.1, [True, True, True, False]), {})"
    },
    "aten._to_copy.default": {
        "count": 1,
        "inputs": "((T([16, 512], i32),), {'dtype': i64})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([], f32), T([], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 1,
        "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([2], f32), T([8192, 768], f32), T([768, 2], f32, stride=(1, 768))), {})"
    },
    "aten.all.default": {
        "count": 1,
        "inputs": "((T([16, 512], b8),), {})"
    },
    "aten.any.default": {
        "count": 1,
        "inputs": "((T([16, 2], b8),), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([16, 512, 1], f32), T([16, 512, 1], f32)], 2), {})"
    },
    "aten.clamp.default": {
        "count": 2,
        "inputs": "((T([16], i64), 0, 512), {})"
    },
    "aten.cumsum.default": {
        "count": 1,
        "inputs": "((T([16, 512], i32), 1), {})"
    },
    "aten.div.Tensor": {
        "count": 2,
        "inputs": "((T([], f32), 2), {})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([512, 768], f32), T([16, 512], i64), 0), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([16, 512, 768], f32), T([16, 512], i64), 50265, 0, False), {})"
    },
    "aten.eq.Scalar": {
        "count": 1,
        "inputs": "((T([16, 512], f32), 1), {})"
    },
    "aten.gelu.default": {
        "count": 12,
        "inputs": "((T([16, 512, 3072], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 12,
        "inputs": "((T([16, 512, 3072], f32), T([16, 512, 3072], f32)), {})"
    },
    "aten.index.Tensor": {
        "count": 1,
        "inputs": "((T([16, 512], i64), [None, T([2], i64)]), {})"
    },
    "aten.mm.default": {
        "count": 48,
        "inputs": "((T([768, 8192], f32, stride=(1, 768)), T([8192, 768], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([16, 512], i32), T([16, 512], i32)), {})"
    },
    "aten.native_dropout.default": {
        "count": 25,
        "inputs": "((T([16, 512, 768], f32), 0.1, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 25,
        "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], b8), 1.1111111111111112), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 25,
        "inputs": "((T([16, 512, 768], f32), [768], T([768], f32), T([768], f32), 1e-12), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 25,
        "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32), [768], T([16, 512, 1], f32), T([16, 512, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
    },
    "aten.ne.Scalar": {
        "count": 1,
        "inputs": "((T([16, 512], i64), 0), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 2,
        "inputs": "((T([], f32), T([16, 512], f32), T([16], i64), None, 1, 512, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 2,
        "inputs": "((T([16, 512], f32), T([16], i64), None, 1, 512), {})"
    },
    "aten.split.Tensor": {
        "count": 1,
        "inputs": "((T([16, 512, 2], f32), 1, -1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 12,
        "inputs": "((T([8192, 3072], f32), [0], True), {})"
    }
}