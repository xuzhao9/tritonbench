{
    "aten._foreach_pow.ScalarAndTensor": {
        "count": 1,
        "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
    },
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([30522, 128], f32), T([512, 128], f32), T([2, 128], f32), T([128], f32), T([128], f32), T([256, 128], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([1024, 256], f32), T([1024], f32), T([256, 1024], f32), T([256], f32), T([256], f32), T([256], f32), T([2, 256], f32), T([2], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 2,
        "inputs": "((T([64, 512], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 2,
        "inputs": "((T([64, 512], f32), T([64, 512], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 12,
        "inputs": "((T([64, 4, 512, 512], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 12,
        "inputs": "((T([64, 4, 512, 512], f32), T([64, 4, 512, 512], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 12,
        "inputs": "((T([64, 512, 256], f32), [32768, 256]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([], f32), T([], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 1,
        "inputs": "((T([64, 512, 128], f32), T([1, 512, 128], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([2], f32), T([32768, 256], f32), T([256, 2], f32, stride=(1, 256))), {})"
    },
    "aten.any.default": {
        "count": 1,
        "inputs": "((T([64, 2], b8),), {})"
    },
    "aten.bmm.default": {
        "count": 12,
        "inputs": "((T([256, 512, 512], f32), T([256, 512, 64], f32, stride=(32768, 1, 512))), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([64, 512, 1], f32), T([64, 512, 1], f32)], 2), {})"
    },
    "aten.clamp.default": {
        "count": 2,
        "inputs": "((T([64], i64), 0, 512), {})"
    },
    "aten.div.Tensor": {
        "count": 2,
        "inputs": "((T([], f32), 2), {})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([512, 128], f32), T([1, 512], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([64, 512, 128], f32), T([64, 512], i64), 30522, 0, False), {})"
    },
    "aten.eq.Scalar": {
        "count": 1,
        "inputs": "((T([64, 2], i64), 0), {})"
    },
    "aten.gelu.default": {
        "count": 12,
        "inputs": "((T([64, 512, 1024], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 12,
        "inputs": "((T([64, 512, 1024], f32), T([64, 512, 1024], f32)), {})"
    },
    "aten.index.Tensor": {
        "count": 1,
        "inputs": "((T([64, 512], i64), [None, T([2], i64)]), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([256, 32768], f32, stride=(1, 256)), T([32768, 128], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([64, 1, 1, 512], f32), -3.4028234663852886e+38), {})"
    },
    "aten.native_dropout.default": {
        "count": 24,
        "inputs": "((T([64, 512, 256], f32), 0.1, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 1,
        "inputs": "((T([64, 512, 128], f32), T([64, 512, 128], b8), 1.1111111111111112), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 24,
        "inputs": "((T([64, 512, 256], f32), [256], T([256], f32), T([256], f32), 1e-12), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 1,
        "inputs": "((T([64, 512, 128], f32), T([64, 512, 128], f32), [128], T([64, 512, 1], f32), T([64, 512, 1], f32), T([128], f32), T([128], f32), [True, True, True]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 2,
        "inputs": "((T([], f32), T([64, 512], f32), T([64], i64), None, 1, 512, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 2,
        "inputs": "((T([64, 512], f32), T([64], i64), None, 1, 512), {})"
    },
    "aten.rsub.Scalar": {
        "count": 1,
        "inputs": "((T([64, 1, 1, 512], f32), 1.0), {})"
    },
    "aten.split.Tensor": {
        "count": 1,
        "inputs": "((T([64, 512, 2], f32), 1, -1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([64, 512, 128], f32), [0], True), {})"
    }
}