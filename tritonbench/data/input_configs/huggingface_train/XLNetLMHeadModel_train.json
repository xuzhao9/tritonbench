{
    "aten._foreach_pow.ScalarAndTensor": {
        "count": 1,
        "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
    },
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([32000, 1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([1024, 16, 64], f32), T([16, 64], f32), T([16, 64], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([32000], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([4096, 32000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([4096, 32000], f32), T([4096, 32000], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 24,
        "inputs": "((T([8, 16, 512, 512], f32), 3, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 24,
        "inputs": "((T([8, 16, 512, 512], f32), T([8, 16, 512, 512], f32), 3, f32), {})"
    },
    "aten._to_copy.default": {
        "count": 1,
        "inputs": "((T([1024, 8, 1024], f32, stride=(1024, 0, 1)),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten._unsafe_view.default": {
        "count": 72,
        "inputs": "((T([512, 8, 1, 16, 64], f32), [1, 4096, 1024]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([32000, 1024], f32), T([32000, 1024], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([32000], f32), T([4096, 1024], f32), T([1024, 32000], f32, stride=(1, 1024))), {})"
    },
    "aten.bmm.default": {
        "count": 24,
        "inputs": "((T([1, 1024, 8192], f32, stride=(8388608, 1, 1024)), T([1, 8192, 1024], f32)), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([1024, 512], f32), T([1024, 512], f32)], -1), {})"
    },
    "aten.copy_.default": {
        "count": 24,
        "inputs": "((T([1024, 16, 64], f32), T([1024, 16, 64], f32, stride=(1, 1024, 16384))), {})"
    },
    "aten.cos.default": {
        "count": 1,
        "inputs": "((T([1024, 512], f32),), {})"
    },
    "aten.div.Tensor": {
        "count": 1,
        "inputs": "((T([512], f32), 1024), {})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([32000, 1024], f32), T([512, 8], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([512, 8, 1024], f32), T([512, 8], i64), 32000, -1, False), {})"
    },
    "aten.gelu.default": {
        "count": 24,
        "inputs": "((T([512, 8, 4096], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 24,
        "inputs": "((T([512, 8, 4096], f32), T([512, 8, 4096], f32)), {})"
    },
    "aten.index_add.default": {
        "count": 24,
        "inputs": "((T([8, 16, 512, 1023], f32), 3, T([512], i64), T([8, 16, 512, 512], f32)), {})"
    },
    "aten.index_select.default": {
        "count": 24,
        "inputs": "((T([8, 16, 512, 1023], f32, stride=(8388608, 524288, 1023, 1)), 3, T([512], i64)), {})"
    },
    "aten.mm.default": {
        "count": 24,
        "inputs": "((T([4096, 4096], f32, stride=(1, 4096)), T([4096, 1024], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 48,
        "inputs": "((T([8, 16, 512, 512], f32), 0.125), {})"
    },
    "aten.native_dropout.default": {
        "count": 24,
        "inputs": "((T([512, 8, 4096], f32), 0.1, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 24,
        "inputs": "((T([8, 16, 512, 512], f32), T([8, 16, 512, 512], b8), 1.1111111111111112), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 48,
        "inputs": "((T([512, 8, 1024], f32), [1024], T([1024], f32), T([1024], f32), 1e-12), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 48,
        "inputs": "((T([512, 8, 1024], f32), T([512, 8, 1024], f32), [1024], T([512, 8, 1], f32), T([512, 8, 1], f32), T([1024], f32), T([1024], f32), [True, True, True]), {})"
    },
    "aten.new_empty_strided.default": {
        "count": 24,
        "inputs": "((T([1024, 16, 64], f32, stride=(1, 1024, 16384)), [1024, 16, 64], [1024, 64, 1]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.new_zeros.default": {
        "count": 24,
        "inputs": "((T([8, 16, 512, 512], f32), [8, 16, 512, 1023]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([4096, 32000], f32), T([4096], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([4096, 32000], f32), T([4096], i64), None, 1, -100), {})"
    },
    "aten.pow.Scalar": {
        "count": 1,
        "inputs": "((10000, T([512], f32)), {})"
    },
    "aten.reciprocal.default": {
        "count": 1,
        "inputs": "((T([512], f32),), {})"
    },
    "aten.sin.default": {
        "count": 1,
        "inputs": "((T([1024, 512], f32),), {})"
    },
    "aten.slice_backward.default": {
        "count": 24,
        "inputs": "((T([8, 16, 1023, 512], f32), [8, 16, 1024, 512], 2, 1, 9223372036854775807, 1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 48,
        "inputs": "((T([512, 8, 16, 64], f32, stride=(64, 524288, 32768, 1)), [0, 1], True), {})"
    }
}