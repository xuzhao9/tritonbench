{
    "aten._foreach_pow.ScalarAndTensor": {
        "count": 1,
        "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
    },
    "aten._log_softmax.default": {
        "count": 2,
        "inputs": "((T([1, 128], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 2,
        "inputs": "((T([1, 128], f32), T([1, 128], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 28,
        "inputs": "((T([1, 16, 128, 128], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 28,
        "inputs": "((T([1, 16, 128, 128], f32), T([1, 16, 128, 128], f32), -1, f32), {})"
    },
    "aten._to_copy.default": {
        "count": 28,
        "inputs": "((T([2048, 64], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten._unsafe_view.default": {
        "count": 28,
        "inputs": "((T([1, 128, 16, 256], f32), [1, 128, 4096]), {})"
    },
    "aten.add.Tensor": {
        "count": 56,
        "inputs": "((T([1, 128, 16, 256], f32), T([1, 128, 16, 256], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([2], f32), T([128, 4096], f32), T([4096, 2], f32, stride=(1, 4096))), {})"
    },
    "aten.bmm.default": {
        "count": 28,
        "inputs": "((T([16, 256, 128], f32, stride=(256, 1, 4096)), T([16, 128, 128], f32)), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([1, 128, 1], f32), T([1, 128, 1], f32)], 2), {})"
    },
    "aten.clamp.default": {
        "count": 2,
        "inputs": "((T([1], i64), 0, 128), {})"
    },
    "aten.div.Tensor": {
        "count": 2,
        "inputs": "((T([], f32), 2), {})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([50400, 4096], f32), T([1, 128], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([1, 128, 4096], f32), T([1, 128], i64), 50400, -1, False), {})"
    },
    "aten.gather.default": {
        "count": 28,
        "inputs": "((T([1, 2048, 64], f32), 1, T([1, 128, 64], i64)), {})"
    },
    "aten.gt.Tensor": {
        "count": 1,
        "inputs": "((T([129], i64), T([128, 1], i64)), {})"
    },
    "aten.mm.default": {
        "count": 112,
        "inputs": "((T([128, 4096], f32), T([4096, 4096], f32)), {})"
    },
    "aten.mul.Scalar": {
        "count": 28,
        "inputs": "((T([1, 128, 16384], f32), 3.0), {})"
    },
    "aten.mul.Tensor": {
        "count": 56,
        "inputs": "((T([1, 128, 16, 64], f32, stride=(524288, 1, 32768, 128)), T([1, 128, 1, 64], f32)), {})"
    },
    "aten.mul_.Tensor": {
        "count": 1,
        "inputs": "((T([128, 129], f32), T([128, 129], b8)), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 29,
        "inputs": "((T([1, 128, 4096], f32), [4096], T([4096], f32), T([4096], f32), 1e-05), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 29,
        "inputs": "((T([1, 128, 4096], f32), T([1, 128, 4096], f32), [4096], T([1, 128, 1], f32), T([1, 128, 1], f32), T([4096], f32), T([4096], f32), [True, True, True]), {})"
    },
    "aten.neg.default": {
        "count": 28,
        "inputs": "((T([1, 128, 16, 32], f32, stride=(128, 1, 8192, 256)),), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 2,
        "inputs": "((T([], f32), T([1, 128], f32), T([1], i64), None, 1, 128, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 2,
        "inputs": "((T([1, 128], f32), T([1], i64), None, 1, 128), {})"
    },
    "aten.pow.Tensor_Scalar": {
        "count": 28,
        "inputs": "((T([1, 128, 16384], f32), 2.0), {})"
    },
    "aten.repeat.default": {
        "count": 28,
        "inputs": "((T([1, 128, 1], i64), [1, 1, 64]), {})"
    },
    "aten.slice_backward.default": {
        "count": 28,
        "inputs": "((T([1, 128, 16, 192], f32, stride=(524288, 1, 32768, 128)), [1, 128, 16, 256], 3, 64, 9223372036854775807, 1), {})"
    },
    "aten.split.Tensor": {
        "count": 1,
        "inputs": "((T([1, 128, 2], f32), 1, -1), {})"
    },
    "aten.stack.default": {
        "count": 56,
        "inputs": "(([T([1, 128, 16, 32], f32), T([1, 128, 16, 32], f32, stride=(524288, 4096, 256, 2))], -1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 28,
        "inputs": "((T([128, 16384], f32), [0], True), {})"
    },
    "aten.tanh.default": {
        "count": 28,
        "inputs": "((T([1, 128, 16384], f32),), {})"
    },
    "aten.tanh_backward.default": {
        "count": 28,
        "inputs": "((T([1, 128, 16384], f32), T([1, 128, 16384], f32)), {})"
    },
    "aten.triu.default": {
        "count": 1,
        "inputs": "((T([128, 129], f32), 1), {})"
    }
}