{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 2,
            "inputs": "((T([1, 128], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 2,
            "inputs": "((T([1, 128], f32), T([1, 128], f32), 1, f32), {})"
        }
    ],
    "aten._softmax.default": [
        {
            "count": 28,
            "inputs": "((T([1, 16, 128, 128], f32), -1, False), {})"
        }
    ],
    "aten._softmax_backward_data.default": [
        {
            "count": 28,
            "inputs": "((T([1, 16, 128, 128], f32), T([1, 16, 128, 128], f32), -1, f32), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 28,
            "inputs": "((T([2048, 64], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 112,
            "inputs": "((T([128, 4096], f32), [1, 128, 4096]), {})"
        },
        {
            "count": 28,
            "inputs": "((T([16, 128, 128], f32), [1, 16, 128, 128]), {})"
        },
        {
            "count": 28,
            "inputs": "((T([16, 128, 256], f32), [1, 16, 128, 256]), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 256], f32), [1, 128, 4096]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 112,
            "inputs": "((T([1, 128, 16, 64], f32), T([1, 128, 16, 64], f32)), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 16, 128, 128], f32), T([1, 1, 128, 128], f32, stride=(16512, 16512, 129, 1))), {})"
        },
        {
            "count": 84,
            "inputs": "((T([1, 128, 16384], f32), T([1, 128, 16384], f32)), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16384], f32), 1.0), {})"
        },
        {
            "count": 168,
            "inputs": "((T([1, 128, 4096], f32), T([1, 128, 4096], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([], f32), T([], f32)), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 64], f32), T([1, 128, 16, 64], f32, stride=(131072, 64, 8192, 1))), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 64], f32), T([1, 128, 16, 64], f32, stride=(131072, 1, 8192, 128))), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16, 256], f32), T([1, 128, 16, 256], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 28,
            "inputs": "((T([16384], f32), T([128, 4096], f32), T([4096, 16384], f32, stride=(1, 4096))), {})"
        },
        {
            "count": 28,
            "inputs": "((T([4096], f32), T([128, 16384], f32), T([16384, 4096], f32, stride=(1, 16384))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2], f32), T([128, 4096], f32), T([4096, 2], f32, stride=(1, 4096))), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 56,
            "inputs": "((T([16, 128, 256], f32, stride=(256, 4096, 1)), T([16, 256, 128], f32, stride=(256, 1, 4096))), {})"
        },
        {
            "count": 56,
            "inputs": "((T([16, 128, 128], f32), T([16, 128, 256], f32, stride=(256, 4096, 1))), {})"
        },
        {
            "count": 28,
            "inputs": "((T([16, 128, 128], f32, stride=(16384, 1, 128)), T([16, 128, 256], f32, stride=(256, 4096, 1))), {})"
        },
        {
            "count": 28,
            "inputs": "((T([16, 256, 128], f32, stride=(256, 1, 4096)), T([16, 128, 128], f32)), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 56,
            "inputs": "(([T([1, 128, 16, 64], f32), T([1, 128, 16, 192], f32, stride=(524288, 4096, 256, 1))], -1), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([1, 128, 1], f32), T([1, 128, 1], f32)], 2), {})"
        }
    ],
    "aten.clamp.default": [
        {
            "count": 2,
            "inputs": "((T([1], i64), 0, 128), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 56,
            "inputs": "((T([1, 16, 128, 128], f32), T([], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([], f32), 2), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([50400, 4096], f32), T([1, 128], i64)), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([1, 128, 4096], f32), T([1, 128], i64), 50400, -1, False), {})"
        }
    ],
    "aten.gather.default": [
        {
            "count": 28,
            "inputs": "((T([1, 2048, 64], f32), 1, T([1, 128, 64], i64)), {})"
        }
    ],
    "aten.gt.Tensor": [
        {
            "count": 1,
            "inputs": "((T([129], i64), T([128, 1], i64)), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 112,
            "inputs": "((T([128, 4096], f32), T([4096, 4096], f32, stride=(1, 4096))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 2], f32), T([2, 4096], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 128], f32, stride=(1, 2)), T([128, 4096], f32)), {})"
        },
        {
            "count": 28,
            "inputs": "((T([128, 4096], f32), T([4096, 16384], f32)), {})"
        },
        {
            "count": 28,
            "inputs": "((T([4096, 128], f32, stride=(1, 4096)), T([128, 16384], f32)), {})"
        },
        {
            "count": 28,
            "inputs": "((T([128, 16384], f32), T([16384, 4096], f32)), {})"
        },
        {
            "count": 28,
            "inputs": "((T([16384, 128], f32, stride=(1, 16384)), T([128, 4096], f32)), {})"
        },
        {
            "count": 112,
            "inputs": "((T([4096, 128], f32, stride=(1, 4096)), T([128, 4096], f32)), {})"
        },
        {
            "count": 112,
            "inputs": "((T([128, 4096], f32), T([4096, 4096], f32)), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 28,
            "inputs": "((T([1, 128, 16384], f32), 3.0), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 56,
            "inputs": "((T([1, 128, 16, 64], f32, stride=(524288, 4096, 256, 1)), T([1, 128, 1, 64], f32)), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16, 64], f32), T([1, 128, 1, 64], f32)), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16384], f32), 0.5), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16384], f32), 0.044715), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16384], f32), 0.7978845608028654), {})"
        },
        {
            "count": 112,
            "inputs": "((T([1, 128, 16384], f32), T([1, 128, 16384], f32)), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16, 64], f32, stride=(524288, 256, 32768, 1)), T([1, 128, 1, 64], f32)), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16, 64], f32, stride=(524288, 1, 32768, 128)), T([1, 128, 1, 64], f32)), {})"
        }
    ],
    "aten.mul_.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128, 129], f32), T([128, 129], b8)), {})"
        }
    ],
    "aten.native_layer_norm.default": [
        {
            "count": 29,
            "inputs": "((T([1, 128, 4096], f32), [4096], T([4096], f32), T([4096], f32), 1e-05), {})"
        }
    ],
    "aten.native_layer_norm_backward.default": [
        {
            "count": 29,
            "inputs": "((T([1, 128, 4096], f32), T([1, 128, 4096], f32), [4096], T([1, 128, 1], f32), T([1, 128, 1], f32), T([4096], f32), T([4096], f32), [True, True, True]), {})"
        }
    ],
    "aten.neg.default": [
        {
            "count": 56,
            "inputs": "((T([1, 128, 16, 32], f32, stride=(524288, 4096, 256, 2)),), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 32], f32, stride=(8192, 64, 8192, 2)),), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 32], f32, stride=(128, 1, 8192, 256)),), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 2,
            "inputs": "((T([], f32), T([1, 128], f32), T([1], i64), None, 1, 128, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 2,
            "inputs": "((T([1, 128], f32), T([1], i64), None, 1, 128), {})"
        }
    ],
    "aten.pow.Tensor_Scalar": [
        {
            "count": 28,
            "inputs": "((T([1, 128, 16384], f32), 3.0), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16384], f32), 2.0), {})"
        }
    ],
    "aten.repeat.default": [
        {
            "count": 28,
            "inputs": "((T([2048, 64], f32), [1, 1, 1]), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 1], i64), [1, 1, 64]), {})"
        }
    ],
    "aten.slice_backward.default": [
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 32], f32, stride=(4096, 32, 4096, 1)), [1, 128, 16, 64], 3, 1, 9223372036854775807, 2), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 32], f32, stride=(8192, 64, 8192, 2)), [1, 128, 16, 64], 3, 0, 9223372036854775807, 2), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 32], f32, stride=(128, 1, 4096, 128)), [1, 128, 16, 64], 3, 1, 9223372036854775807, 2), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 32], f32, stride=(128, 1, 8192, 256)), [1, 128, 16, 64], 3, 0, 9223372036854775807, 2), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 192], f32, stride=(524288, 256, 32768, 1)), [1, 128, 16, 256], 3, 64, 9223372036854775807, 1), {})"
        },
        {
            "count": 56,
            "inputs": "((T([1, 128, 16, 64], f32), [1, 128, 16, 256], 3, 0, 64, 1), {})"
        },
        {
            "count": 28,
            "inputs": "((T([1, 128, 16, 192], f32, stride=(524288, 1, 32768, 128)), [1, 128, 16, 256], 3, 64, 9223372036854775807, 1), {})"
        }
    ],
    "aten.split.Tensor": [
        {
            "count": 28,
            "inputs": "((T([1, 128, 64], f32), 32, -1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 128, 2], f32), 1, -1), {})"
        }
    ],
    "aten.stack.default": [
        {
            "count": 56,
            "inputs": "(([T([1, 128, 16, 32], f32), T([1, 128, 16, 32], f32, stride=(524288, 4096, 256, 2))], -1), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([128, 2], f32), [0], True), {})"
        },
        {
            "count": 28,
            "inputs": "((T([128, 4096], f32), [0], True), {})"
        },
        {
            "count": 28,
            "inputs": "((T([128, 16384], f32), [0], True), {})"
        }
    ],
    "aten.tanh.default": [
        {
            "count": 28,
            "inputs": "((T([1, 128, 16384], f32),), {})"
        }
    ],
    "aten.tanh_backward.default": [
        {
            "count": 28,
            "inputs": "((T([1, 128, 16384], f32), T([1, 128, 16384], f32)), {})"
        }
    ],
    "aten.triu.default": [
        {
            "count": 1,
            "inputs": "((T([128, 129], f32), 1), {})"
        }
    ]
}