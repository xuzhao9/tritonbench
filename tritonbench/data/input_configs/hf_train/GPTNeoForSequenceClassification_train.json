{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([50257, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048, 2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([8192, 2048], f32), T([8192], f32), T([2048, 8192], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2, 2048], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([32, 2], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([32, 2], f32), T([32, 2], f32), 1, f32), {})"
        }
    ],
    "aten._softmax.default": [
        {
            "count": 24,
            "inputs": "((T([32, 16, 128, 128], f32), -1, False), {})"
        }
    ],
    "aten._softmax_backward_data.default": [
        {
            "count": 24,
            "inputs": "((T([32, 16, 128, 128], f32), T([32, 16, 128, 128], f32), -1, f32), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 24,
            "inputs": "((T([], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 1,
            "inputs": "((T([32, 128], b8),), {'dtype': i32})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 72,
            "inputs": "((T([4096, 2048], f32), [32, 128, 2048]), {})"
        },
        {
            "count": 96,
            "inputs": "((T([32, 16, 128, 128], f32), [512, 128, 128]), {})"
        },
        {
            "count": 48,
            "inputs": "((T([512, 128, 128], f32), [32, 16, 128, 128]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4096, 2], f32), [32, 128, 2]), {})"
        },
        {
            "count": 48,
            "inputs": "((T([32, 128, 16, 128], f32), [32, 128, 2048]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([32, 128, 2048], f32), [4096, 2048]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([32, 128, 2048], f32), T([1, 128, 2048], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([32, 16, 128, 128], f32), T([32, 1, 128, 128], f32, stride=(0, 16512, 129, 1))), {})"
        },
        {
            "count": 144,
            "inputs": "((T([32, 128, 2048], f32), T([32, 128, 2048], f32)), {})"
        },
        {
            "count": 72,
            "inputs": "((T([32, 128, 8192], f32), T([32, 128, 8192], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([32, 128, 8192], f32), 1.0), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 24,
            "inputs": "((T([2048], f32), T([4096, 2048], f32), T([2048, 2048], f32, stride=(1, 2048))), {})"
        },
        {
            "count": 24,
            "inputs": "((T([8192], f32), T([4096, 2048], f32), T([2048, 8192], f32, stride=(1, 2048))), {})"
        },
        {
            "count": 24,
            "inputs": "((T([2048], f32), T([4096, 8192], f32), T([8192, 2048], f32, stride=(1, 8192))), {})"
        }
    ],
    "aten.argmax.default": [
        {
            "count": 1,
            "inputs": "((T([32, 128], i32), -1), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 48,
            "inputs": "((T([512, 128, 128], f32), T([512, 128, 128], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([512, 128, 128], f32, stride=(16384, 1, 128)), T([512, 128, 128], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([512, 128, 128], f32), T([512, 128, 128], f32, stride=(16384, 1, 128))), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([50257, 2048], f32), T([32, 128], i64)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2048, 2048], f32), T([1, 128], i64)), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([1, 128, 2048], f32), T([1, 128], i64), 2048, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([32, 128, 2048], f32), T([32, 128], i64), 50257, -1, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 1,
            "inputs": "((T([32, 128], i64), 0), {})"
        }
    ],
    "aten.gt.Tensor": [
        {
            "count": 1,
            "inputs": "((T([129], i64), T([128, 1], i64)), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([32, 128, 2], f32), [T([32], i64), T([32], i64)]), {})"
        }
    ],
    "aten.index_put.default": [
        {
            "count": 1,
            "inputs": "((T([32, 128, 2], f32), [T([32], i64), T([32], i64)], T([32, 2], f32), True), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 72,
            "inputs": "((T([4096, 2048], f32), T([2048, 2048], f32, stride=(1, 2048))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4096, 2048], f32), T([2048, 2], f32, stride=(1, 2048))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 4096], f32, stride=(1, 2)), T([4096, 2048], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4096, 2], f32), T([2, 2048], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096, 2048], f32), T([2048, 8192], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([2048, 4096], f32, stride=(1, 2048)), T([4096, 8192], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096, 8192], f32), T([8192, 2048], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([8192, 4096], f32, stride=(1, 8192)), T([4096, 2048], f32)), {})"
        },
        {
            "count": 96,
            "inputs": "((T([4096, 2048], f32), T([2048, 2048], f32)), {})"
        },
        {
            "count": 96,
            "inputs": "((T([2048, 4096], f32, stride=(1, 2048)), T([4096, 2048], f32)), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 24,
            "inputs": "((T([32, 128, 8192], f32), 3.0), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 48,
            "inputs": "((T([32, 128, 8192], f32), 0.5), {})"
        },
        {
            "count": 48,
            "inputs": "((T([32, 128, 8192], f32), 0.044715), {})"
        },
        {
            "count": 48,
            "inputs": "((T([32, 128, 8192], f32), 0.7978845608028654), {})"
        },
        {
            "count": 96,
            "inputs": "((T([32, 128, 8192], f32), T([32, 128, 8192], f32)), {})"
        }
    ],
    "aten.mul_.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128, 129], f32), T([128, 129], b8)), {})"
        }
    ],
    "aten.native_layer_norm.default": [
        {
            "count": 49,
            "inputs": "((T([32, 128, 2048], f32), [2048], T([2048], f32), T([2048], f32), 1e-05), {})"
        }
    ],
    "aten.native_layer_norm_backward.default": [
        {
            "count": 49,
            "inputs": "((T([32, 128, 2048], f32), T([32, 128, 2048], f32), [2048], T([32, 128, 1], f32), T([32, 128, 1], f32), T([2048], f32), T([2048], f32), [True, True, True]), {})"
        }
    ],
    "aten.new_zeros.default": [
        {
            "count": 1,
            "inputs": "((T([32, 2], f32), [32, 128, 2]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([32, 2], f32), T([32], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([32, 2], f32), T([32], i64), None, 1, -100), {})"
        }
    ],
    "aten.pow.Tensor_Scalar": [
        {
            "count": 24,
            "inputs": "((T([32, 128, 8192], f32), 3.0), {})"
        },
        {
            "count": 24,
            "inputs": "((T([32, 128, 8192], f32), 2.0), {})"
        }
    ],
    "aten.remainder.Scalar": [
        {
            "count": 1,
            "inputs": "((T([32], i64), 128), {})"
        }
    ],
    "aten.sub.Tensor": [
        {
            "count": 1,
            "inputs": "((T([32], i64), 1), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 48,
            "inputs": "((T([4096, 2048], f32), [0], True), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096, 8192], f32), [0], True), {})"
        },
        {
            "count": 1,
            "inputs": "((T([32, 128, 2048], f32), [0], True), {})"
        }
    ],
    "aten.tanh.default": [
        {
            "count": 24,
            "inputs": "((T([32, 128, 8192], f32),), {})"
        }
    ],
    "aten.tanh_backward.default": [
        {
            "count": 24,
            "inputs": "((T([32, 128, 8192], f32), T([32, 128, 8192], f32)), {})"
        }
    ],
    "aten.triu.default": [
        {
            "count": 1,
            "inputs": "((T([128, 129], f32), 1), {})"
        }
    ],
    "aten.where.self": [
        {
            "count": 48,
            "inputs": "((T([1, 1, 128, 128], b8, stride=(4194304, 4194304, 2048, 1)), T([32, 16, 128, 128], f32), T([], f32)), {})"
        }
    ]
}