{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([50257, 768], f32), T([1024, 768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 2304], f32), T([2304], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 3072], f32), T([3072], f32), T([3072, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([2, 768], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([4, 2], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([4, 2], f32), T([4, 2], f32), 1, f32), {})"
        }
    ],
    "aten._scaled_dot_product_efficient_attention.default": [
        {
            "count": 12,
            "inputs": "((T([4, 12, 1024, 64], f32, stride=(2359296, 64, 2304, 1)), T([4, 12, 1024, 64], f32, stride=(2359296, 64, 2304, 1)), T([4, 12, 1024, 64], f32, stride=(2359296, 64, 2304, 1)), None, True, 0.1, True), {})"
        }
    ],
    "aten._scaled_dot_product_efficient_attention_backward.default": [
        {
            "count": 12,
            "inputs": "((T([4, 12, 1024, 64], f32, stride=(786432, 64, 768, 1)), T([4, 12, 1024, 64], f32, stride=(2359296, 64, 2304, 1)), T([4, 12, 1024, 64], f32, stride=(2359296, 64, 2304, 1)), T([4, 12, 1024, 64], f32, stride=(2359296, 64, 2304, 1)), None, T([4, 12, 1024, 64], f32, stride=(786432, 64, 768, 1)), T([4, 12, 1024], f32), T([], i64), T([], i64), 0.1, [True, True, True, False], True), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 1,
            "inputs": "((T([4, 1024], b8),), {'dtype': i32})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 1,
            "inputs": "((T([4096, 2], f32), [4, 1024, 2]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([4, 1024, 768], f32), T([1, 1024, 768], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([4, 1024, 768], f32), T([4, 1024, 768], f32)), {})"
        },
        {
            "count": 36,
            "inputs": "((T([4, 1024, 3072], f32), T([4, 1024, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4, 1024, 3072], f32), 1.0), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 12,
            "inputs": "((T([2304], f32), T([4096, 768], f32), T([768, 2304], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768], f32), T([4096, 768], f32), T([768, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072], f32), T([4096, 768], f32), T([768, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768], f32), T([4096, 3072], f32), T([3072, 768], f32)), {})"
        }
    ],
    "aten.any.default": [
        {
            "count": 1,
            "inputs": "((T([4, 2], b8),), {})"
        }
    ],
    "aten.argmax.default": [
        {
            "count": 1,
            "inputs": "((T([4, 1024], i32), -1), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 12,
            "inputs": "(([T([4, 1024, 768], f32), T([4, 1024, 768], f32), T([4, 1024, 768], f32)], 2), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([50257, 768], f32), T([4, 1024], i64)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1024, 768], f32), T([1, 1024], i64)), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([1, 1024, 768], f32), T([1, 1024], i64), 1024, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4, 1024, 768], f32), T([4, 1024], i64), 50257, -1, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 1,
            "inputs": "((T([4, 2], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4, 1024], i64), 0), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([4, 1024], i64), [None, T([2], i64)]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4, 1024, 2], f32), [T([4], i64), T([4], i64)]), {})"
        }
    ],
    "aten.index_put.default": [
        {
            "count": 1,
            "inputs": "((T([4, 1024, 2], f32), [T([4], i64), T([4], i64)], T([4, 2], f32), True), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([4096, 768], f32), T([768, 2], f32, stride=(1, 768))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 4096], f32, stride=(1, 2)), T([4096, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4096, 2], f32), T([2, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4096, 768], f32), T([768, 3072], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072, 4096], f32, stride=(1, 3072)), T([4096, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4096, 3072], f32), T([3072, 768], f32, stride=(1, 3072))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768, 4096], f32, stride=(1, 768)), T([4096, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4096, 768], f32), T([768, 768], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768, 4096], f32, stride=(1, 768)), T([4096, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4096, 2304], f32), T([2304, 768], f32, stride=(1, 2304))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768, 4096], f32, stride=(1, 768)), T([4096, 2304], f32)), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 12,
            "inputs": "((T([4, 1024, 3072], f32), 3.0), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 24,
            "inputs": "((T([4, 1024, 3072], f32), 0.5), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4, 1024, 3072], f32), 0.044715), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4, 1024, 3072], f32), 0.7978845608028654), {})"
        },
        {
            "count": 48,
            "inputs": "((T([4, 1024, 3072], f32), T([4, 1024, 3072], f32)), {})"
        }
    ],
    "aten.native_dropout.default": [
        {
            "count": 25,
            "inputs": "((T([4, 1024, 768], f32), 0.1, True), {})"
        }
    ],
    "aten.native_dropout_backward.default": [
        {
            "count": 25,
            "inputs": "((T([4, 1024, 768], f32), T([4, 1024, 768], b8), 1.1111111111111112), {})"
        }
    ],
    "aten.native_layer_norm.default": [
        {
            "count": 25,
            "inputs": "((T([4, 1024, 768], f32), [768], T([768], f32), T([768], f32), 1e-05), {})"
        }
    ],
    "aten.native_layer_norm_backward.default": [
        {
            "count": 25,
            "inputs": "((T([4, 1024, 768], f32), T([4, 1024, 768], f32), [768], T([4, 1024, 1], f32), T([4, 1024, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
        }
    ],
    "aten.new_zeros.default": [
        {
            "count": 1,
            "inputs": "((T([4, 2], f32), [4, 1024, 2]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([4, 2], f32), T([4], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([4, 2], f32), T([4], i64), None, 1, -100), {})"
        }
    ],
    "aten.pow.Tensor_Scalar": [
        {
            "count": 12,
            "inputs": "((T([4, 1024, 3072], f32), 3.0), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4, 1024, 3072], f32), 2.0), {})"
        }
    ],
    "aten.remainder.Scalar": [
        {
            "count": 1,
            "inputs": "((T([4], i64), 1024), {})"
        }
    ],
    "aten.split.Tensor": [
        {
            "count": 12,
            "inputs": "((T([4, 1024, 2304], f32), 768, 2), {})"
        }
    ],
    "aten.sub.Tensor": [
        {
            "count": 1,
            "inputs": "((T([4], i64), 1), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 24,
            "inputs": "((T([4096, 768], f32), [0], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4096, 3072], f32), [0], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([4096, 2304], f32), [0], True), {})"
        },
        {
            "count": 1,
            "inputs": "((T([4, 1024, 768], f32), [0], True), {})"
        }
    ],
    "aten.tanh.default": [
        {
            "count": 12,
            "inputs": "((T([4, 1024, 3072], f32),), {})"
        }
    ],
    "aten.tanh_backward.default": [
        {
            "count": 12,
            "inputs": "((T([4, 1024, 3072], f32), T([4, 1024, 3072], f32)), {})"
        }
    ]
}