{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([29056, 1024], f32), T([512, 1024], f32), T([2, 1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([4096, 1024], f32), T([4096], f32), T([1024, 4096], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([2, 1024], f32), T([2], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 2,
            "inputs": "((T([8, 512], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 2,
            "inputs": "((T([8, 512], f32), T([8, 512], f32), 1, f32), {})"
        }
    ],
    "aten._softmax.default": [
        {
            "count": 24,
            "inputs": "((T([8, 16, 512, 512], f32), -1, False), {})"
        }
    ],
    "aten._softmax_backward_data.default": [
        {
            "count": 24,
            "inputs": "((T([8, 16, 512, 512], f32), T([8, 16, 512, 512], f32), -1, f32), {})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 72,
            "inputs": "((T([8, 16, 512, 64], f32), [128, 512, 64]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([8, 16, 64, 512], f32), [128, 64, 512]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 512, 512], f32), [8, 16, 512, 512]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 512, 64], f32), [8, 16, 512, 64]), {})"
        },
        {
            "count": 48,
            "inputs": "((T([8, 512, 16, 64], f32), [8, 512, 1024]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([8, 512, 1024], f32), [4096, 1024]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 145,
            "inputs": "((T([8, 512, 1024], f32), T([8, 512, 1024], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([8, 16, 512, 512], f32), T([8, 1, 1, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([], f32), T([], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 1,
            "inputs": "((T([8, 512, 1024], f32), T([1, 512, 1024], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 96,
            "inputs": "((T([1024], f32), T([4096, 1024], f32), T([1024, 1024], f32, stride=(1, 1024))), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096], f32), T([4096, 1024], f32), T([1024, 4096], f32, stride=(1, 1024))), {})"
        },
        {
            "count": 24,
            "inputs": "((T([1024], f32), T([4096, 4096], f32), T([4096, 1024], f32, stride=(1, 4096))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2], f32), T([4096, 1024], f32), T([1024, 2], f32, stride=(1, 1024))), {})"
        }
    ],
    "aten.any.default": [
        {
            "count": 1,
            "inputs": "((T([8, 2], b8),), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 24,
            "inputs": "((T([128, 512, 64], f32), T([128, 64, 512], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 512, 512], f32), T([128, 512, 64], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 512, 512], f32, stride=(262144, 1, 512)), T([128, 512, 64], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 512, 64], f32), T([128, 64, 512], f32, stride=(32768, 1, 64))), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 64, 512], f32, stride=(32768, 1, 64)), T([128, 512, 512], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 512, 512], f32), T([128, 512, 64], f32, stride=(32768, 1, 512))), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 1,
            "inputs": "(([T([8, 512, 1], f32), T([8, 512, 1], f32)], 2), {})"
        }
    ],
    "aten.clamp.default": [
        {
            "count": 2,
            "inputs": "((T([8], i64), 0, 512), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 48,
            "inputs": "((T([8, 16, 512, 512], f32), 8.0), {})"
        },
        {
            "count": 2,
            "inputs": "((T([], f32), 2), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([29056, 1024], f32), T([8, 512], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 1024], f32), T([8, 512], i64)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 1024], f32), T([1, 512], i64)), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([1, 512, 1024], f32), T([1, 512], i64), 512, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([8, 512, 1024], f32), T([8, 512], i64), 2, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([8, 512, 1024], f32), T([8, 512], i64), 29056, 0, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 1,
            "inputs": "((T([8, 2], i64), 0), {})"
        }
    ],
    "aten.gelu.default": [
        {
            "count": 24,
            "inputs": "((T([8, 512, 4096], f32),), {})"
        }
    ],
    "aten.gelu_backward.default": [
        {
            "count": 24,
            "inputs": "((T([8, 512, 4096], f32), T([8, 512, 4096], f32)), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([8, 512], i64), [None, T([2], i64)]), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([4096, 2], f32), T([2, 1024], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 4096], f32, stride=(1, 2)), T([4096, 1024], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096, 1024], f32), T([1024, 4096], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([1024, 4096], f32, stride=(1, 1024)), T([4096, 4096], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096, 4096], f32), T([4096, 1024], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096, 4096], f32, stride=(1, 4096)), T([4096, 1024], f32)), {})"
        },
        {
            "count": 96,
            "inputs": "((T([4096, 1024], f32), T([1024, 1024], f32)), {})"
        },
        {
            "count": 96,
            "inputs": "((T([1024, 4096], f32, stride=(1, 1024)), T([4096, 1024], f32)), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 1,
            "inputs": "((T([8, 1, 1, 512], f32), -3.4028234663852886e+38), {})"
        }
    ],
    "aten.native_dropout.default": [
        {
            "count": 49,
            "inputs": "((T([8, 512, 1024], f32), 0.1, True), {})"
        },
        {
            "count": 24,
            "inputs": "((T([8, 16, 512, 512], f32), 0.1, True), {})"
        }
    ],
    "aten.native_dropout_backward.default": [
        {
            "count": 49,
            "inputs": "((T([8, 512, 1024], f32), T([8, 512, 1024], b8), 1.1111111111111112), {})"
        },
        {
            "count": 24,
            "inputs": "((T([8, 16, 512, 512], f32), T([8, 16, 512, 512], b8), 1.1111111111111112), {})"
        }
    ],
    "aten.native_layer_norm.default": [
        {
            "count": 49,
            "inputs": "((T([8, 512, 1024], f32), [1024], T([1024], f32), T([1024], f32), 1e-12), {})"
        }
    ],
    "aten.native_layer_norm_backward.default": [
        {
            "count": 49,
            "inputs": "((T([8, 512, 1024], f32), T([8, 512, 1024], f32), [1024], T([8, 512, 1], f32), T([8, 512, 1], f32), T([1024], f32), T([1024], f32), [True, True, True]), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 2,
            "inputs": "((T([], f32), T([8, 512], f32), T([8], i64), None, 1, 512, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 2,
            "inputs": "((T([8, 512], f32), T([8], i64), None, 1, 512), {})"
        }
    ],
    "aten.rsub.Scalar": [
        {
            "count": 1,
            "inputs": "((T([8, 1, 1, 512], f32), 1.0), {})"
        }
    ],
    "aten.split.Tensor": [
        {
            "count": 1,
            "inputs": "((T([8, 512, 2], f32), 1, -1), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([4096, 2], f32), [0], True), {})"
        },
        {
            "count": 120,
            "inputs": "((T([4096, 1024], f32), [0], True), {})"
        },
        {
            "count": 24,
            "inputs": "((T([4096, 4096], f32), [0], True), {})"
        },
        {
            "count": 1,
            "inputs": "((T([8, 512, 1024], f32), [0], True), {})"
        }
    ]
}