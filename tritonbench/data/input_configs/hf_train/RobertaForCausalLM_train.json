{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([50265, 768], f32), T([512, 768], f32), T([2, 768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([50265], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([8176, 50265], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([8176, 50265], f32), T([8176, 50265], f32), 1, f32), {})"
        }
    ],
    "aten._scaled_dot_product_efficient_attention.default": [
        {
            "count": 12,
            "inputs": "((T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), None, True, 0.1), {})"
        }
    ],
    "aten._scaled_dot_product_efficient_attention_backward.default": [
        {
            "count": 12,
            "inputs": "((T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), None, T([16, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([16, 12, 512], f32), T([], i64), T([], i64), 0.1, [True, True, True, False]), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 1,
            "inputs": "((T([16, 512], b8),), {'dtype': i32})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512], i64),), {'dtype': i32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512], i32),), {'dtype': i64})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 512], i32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512], i64), 0), {})"
        },
        {
            "count": 73,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([50265, 768], f32), T([50265, 768], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 49,
            "inputs": "((T([768], f32), T([8192, 768], f32), T([768, 768], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072], f32), T([8192, 768], f32), T([768, 3072], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768], f32), T([8192, 3072], f32), T([3072, 768], f32, stride=(1, 3072))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([50265], f32), T([8192, 768], f32), T([768, 50265], f32, stride=(1, 768))), {})"
        }
    ],
    "aten.all.default": [
        {
            "count": 1,
            "inputs": "((T([16, 512], b8),), {})"
        }
    ],
    "aten.any.default": [
        {
            "count": 1,
            "inputs": "((T([16, 2], b8),), {})"
        }
    ],
    "aten.cumsum.default": [
        {
            "count": 1,
            "inputs": "((T([16, 512], i32), 1), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([50265, 768], f32), T([16, 512], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 768], f32), T([16, 512], i64, stride=(0, 1))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 768], f32), T([16, 512], i64), 0), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512], i64), 512, 0, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512], i64, stride=(0, 1)), 2, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512], i64), 50265, 0, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 2], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512], f32), 1), {})"
        }
    ],
    "aten.gelu.default": [
        {
            "count": 12,
            "inputs": "((T([16, 512, 3072], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32),), {})"
        }
    ],
    "aten.gelu_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 3072], f32), T([16, 512, 3072], f32)), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 512], i64), [None, T([2], i64)]), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([8192, 50265], f32), T([50265, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([50265, 8192], f32, stride=(1, 50265)), T([8192, 768], f32)), {})"
        },
        {
            "count": 49,
            "inputs": "((T([8192, 768], f32), T([768, 768], f32)), {})"
        },
        {
            "count": 49,
            "inputs": "((T([768, 8192], f32, stride=(1, 768)), T([8192, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 768], f32), T([768, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768, 8192], f32, stride=(1, 768)), T([8192, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 3072], f32), T([3072, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072, 8192], f32, stride=(1, 3072)), T([8192, 768], f32)), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 512], i32), T([16, 512], i32)), {})"
        }
    ],
    "aten.native_dropout.default": [
        {
            "count": 25,
            "inputs": "((T([16, 512, 768], f32), 0.1, True), {})"
        }
    ],
    "aten.native_dropout_backward.default": [
        {
            "count": 25,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], b8), 1.1111111111111112), {})"
        }
    ],
    "aten.native_layer_norm.default": [
        {
            "count": 26,
            "inputs": "((T([16, 512, 768], f32), [768], T([768], f32), T([768], f32), 1e-12), {})"
        }
    ],
    "aten.native_layer_norm_backward.default": [
        {
            "count": 26,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32), [768], T([16, 512, 1], f32), T([16, 512, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
        }
    ],
    "aten.ne.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 512], i64), 0), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([8176, 50265], f32), T([8176], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([8176, 50265], f32), T([8176], i64), None, 1, -100), {})"
        }
    ],
    "aten.slice_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 511, 50265], f32), [16, 512, 50265], 1, 0, -1, 1), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([8192, 50265], f32), [0], True), {})"
        },
        {
            "count": 61,
            "inputs": "((T([8192, 768], f32), [0], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 3072], f32), [0], True), {})"
        }
    ]
}