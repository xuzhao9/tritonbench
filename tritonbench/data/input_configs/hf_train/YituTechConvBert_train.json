{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([30522, 768], f32), T([512, 768], f32), T([2, 768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 768], f32), T([384], f32), T([384, 1], f32), T([768, 1, 9], f32), T([384, 768, 1], f32), T([54, 384], f32), T([54], f32), T([384, 768], f32), T([384], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([30522], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([8192, 30522], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([8192, 30522], f32), T([8192, 30522], f32), 1, f32), {})"
        }
    ],
    "aten._softmax.default": [
        {
            "count": 12,
            "inputs": "((T([49152, 9, 1], f32), 1, False), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 6, 512, 512], f32), -1, False), {})"
        }
    ],
    "aten._softmax_backward_data.default": [
        {
            "count": 12,
            "inputs": "((T([16, 6, 512, 512], f32), T([16, 6, 512, 512], f32), -1, f32), {})"
        },
        {
            "count": 12,
            "inputs": "((T([49152, 9, 1], f32), T([49152, 9, 1], f32), 1, f32), {})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 36,
            "inputs": "((T([16, 512, 384], f32), [8192, 384]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 54], f32), [16, 512, 54]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 384, 9], f32), [49152, 64, 9]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([49152, 64, 1], f32), [49152, 64, 1]), {})"
        },
        {
            "count": 36,
            "inputs": "((T([16, 6, 512, 64], f32), [96, 512, 64]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 6, 64, 512], f32), [96, 64, 512]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 512, 512], f32), [16, 6, 512, 512]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 512, 64], f32), [16, 6, 512, 64]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 384], f32), [49152, 64, 1]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 512, 6, 64], f32), [16, 512, 384]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([1, 512, 768], f32)), {})"
        },
        {
            "count": 85,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 54], f32), T([54], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 6, 512, 512], f32), T([16, 1, 1, 512], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 384], f32), T([16, 512, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32, stride=(393216, 1, 512))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([30522, 768], f32), T([30522, 768], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 12,
            "inputs": "((T([16, 384, 512], f32), T([384, 1], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 48,
            "inputs": "((T([384], f32), T([8192, 768], f32), T([768, 384], f32, stride=(1, 768))), {})"
        },
        {
            "count": 13,
            "inputs": "((T([768], f32), T([8192, 768], f32), T([768, 768], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072], f32), T([8192, 768], f32), T([768, 3072], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768], f32), T([8192, 3072], f32), T([3072, 768], f32, stride=(1, 3072))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([30522], f32), T([8192, 768], f32), T([768, 30522], f32, stride=(1, 768))), {})"
        }
    ],
    "aten.any.default": [
        {
            "count": 1,
            "inputs": "((T([16, 2], b8),), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 12,
            "inputs": "((T([49152, 64, 9], f32), T([49152, 9, 1], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 512, 64], f32), T([96, 64, 512], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 512, 512], f32), T([96, 512, 64], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 512, 512], f32, stride=(262144, 1, 512)), T([96, 512, 64], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 512, 64], f32), T([96, 64, 512], f32, stride=(32768, 1, 64))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 64, 512], f32, stride=(32768, 1, 64)), T([96, 512, 512], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([96, 512, 512], f32), T([96, 512, 64], f32, stride=(32768, 1, 512))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([49152, 9, 64], f32, stride=(576, 1, 9)), T([49152, 64, 1], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([49152, 64, 1], f32), T([49152, 1, 9], f32)), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 12,
            "inputs": "(([T([16, 512, 6, 64], f32), T([16, 512, 6, 64], f32)], 2), {})"
        }
    ],
    "aten.col2im.default": [
        {
            "count": 12,
            "inputs": "((T([16, 3456, 512], f32, stride=(1769472, 1, 3456)), [512, 1], [9, 1], [1, 1], [4, 0], [1, 1]), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 12,
            "inputs": "((T([16, 768, 512], f32, stride=(393216, 1, 768)), T([768, 1, 9], f32), None, [1], [4], [1], False, [0], 768), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 768, 512], f32), T([384, 768, 1], f32), None, [1], [0], [1], False, [0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 12,
            "inputs": "((T([16, 384, 512], f32, stride=(196608, 1, 384)), T([16, 768, 512], f32), T([384, 768, 1], f32), [0], [1], [0], [1], False, [0], 1, [True, True, False]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 768, 512], f32), T([16, 768, 512], f32, stride=(393216, 1, 768)), T([768, 1, 9], f32), [0], [1], [4], [1], False, [0], 768, [True, True, False]), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 24,
            "inputs": "((T([16, 6, 512, 512], f32), 8.0), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([30522, 768], f32), T([16, 512], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 768], f32), T([1, 512], i64)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 768], f32), T([16, 512], i64, stride=(0, 1))), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512], i64, stride=(0, 1)), 2, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 512, 768], f32), T([1, 512], i64), 512, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512], i64), 30522, 0, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 2], i64), 0), {})"
        }
    ],
    "aten.gelu.default": [
        {
            "count": 12,
            "inputs": "((T([16, 512, 3072], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32),), {})"
        }
    ],
    "aten.gelu_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 3072], f32), T([16, 512, 3072], f32)), {})"
        }
    ],
    "aten.im2col.default": [
        {
            "count": 12,
            "inputs": "((T([16, 384, 512, 1], f32), [9, 1], [1, 1], [4, 0], [1, 1]), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 512], i64), [None, T([2], i64)]), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 12,
            "inputs": "((T([8192, 384], f32), T([384, 54], f32, stride=(1, 384))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([8192, 30522], f32), T([30522, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([30522, 8192], f32, stride=(1, 30522)), T([8192, 768], f32)), {})"
        },
        {
            "count": 13,
            "inputs": "((T([8192, 768], f32), T([768, 768], f32)), {})"
        },
        {
            "count": 13,
            "inputs": "((T([768, 8192], f32, stride=(1, 768)), T([8192, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 768], f32), T([768, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768, 8192], f32, stride=(1, 768)), T([8192, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 3072], f32), T([3072, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072, 8192], f32, stride=(1, 3072)), T([8192, 768], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([8192, 384], f32), T([384, 768], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([384, 8192], f32, stride=(1, 384)), T([8192, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([54, 8192], f32, stride=(1, 54)), T([8192, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 54], f32), T([54, 384], f32)), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 1, 512], f32), -3.4028234663852886e+38), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 384], f32, stride=(196608, 1, 512)), T([16, 512, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 384], f32), T([16, 512, 384], f32, stride=(196608, 1, 512))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 384], f32), T([16, 512, 384], f32)), {})"
        }
    ],
    "aten.native_dropout.default": [
        {
            "count": 25,
            "inputs": "((T([16, 512, 768], f32), 0.1, True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 6, 512, 512], f32), 0.1, True), {})"
        }
    ],
    "aten.native_dropout_backward.default": [
        {
            "count": 25,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], b8), 1.1111111111111112), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 6, 512, 512], f32), T([16, 6, 512, 512], b8), 1.1111111111111112), {})"
        }
    ],
    "aten.native_layer_norm.default": [
        {
            "count": 26,
            "inputs": "((T([16, 512, 768], f32), [768], T([768], f32), T([768], f32), 1e-12), {})"
        }
    ],
    "aten.native_layer_norm_backward.default": [
        {
            "count": 26,
            "inputs": "((T([16, 512, 768], f32), T([16, 512, 768], f32), [768], T([16, 512, 1], f32), T([16, 512, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([8192, 30522], f32), T([8192], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([8192, 30522], f32), T([8192], i64), None, 1, -100), {})"
        }
    ],
    "aten.rsub.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 1, 512], f32), 1.0), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([8192, 30522], f32), [0], True), {})"
        },
        {
            "count": 25,
            "inputs": "((T([8192, 768], f32), [0], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([8192, 3072], f32), [0], True), {})"
        },
        {
            "count": 48,
            "inputs": "((T([8192, 384], f32), [0], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 512, 54], f32), [0, 1], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 384, 512], f32, stride=(196608, 1, 384)), [0, 2], True), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 768], f32), [0], True), {})"
        }
    ]
}