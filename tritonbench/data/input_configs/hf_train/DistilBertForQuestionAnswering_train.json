{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([30522, 768], f32), T([512, 768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([2, 768], f32), T([2], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 2,
            "inputs": "((T([256, 128], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 2,
            "inputs": "((T([256, 128], f32), T([256, 128], f32), 1, f32), {})"
        }
    ],
    "aten._scaled_dot_product_efficient_attention.default": [
        {
            "count": 6,
            "inputs": "((T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), None, True, 0.1), {})"
        }
    ],
    "aten._scaled_dot_product_efficient_attention_backward.default": [
        {
            "count": 6,
            "inputs": "((T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), None, T([256, 12, 128, 64], f32, stride=(98304, 64, 768, 1)), T([256, 12, 128], f32), T([], i64), T([], i64), 0.1, [True, True, True, False]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([256, 128, 768], f32), T([1, 128, 768], f32)), {})"
        },
        {
            "count": 36,
            "inputs": "((T([256, 128, 768], f32), T([256, 128, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([], f32), T([], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 24,
            "inputs": "((T([768], f32), T([32768, 768], f32), T([768, 768], f32, stride=(1, 768))), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3072], f32), T([32768, 768], f32), T([768, 3072], f32, stride=(1, 768))), {})"
        },
        {
            "count": 6,
            "inputs": "((T([768], f32), T([32768, 3072], f32), T([3072, 768], f32, stride=(1, 3072))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2], f32), T([32768, 768], f32), T([768, 2], f32, stride=(1, 768))), {})"
        }
    ],
    "aten.all.default": [
        {
            "count": 1,
            "inputs": "((T([256, 128], b8),), {})"
        }
    ],
    "aten.any.default": [
        {
            "count": 1,
            "inputs": "((T([256, 2], b8),), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 1,
            "inputs": "(([T([256, 128, 1], f32), T([256, 128, 1], f32)], 2), {})"
        }
    ],
    "aten.clamp.default": [
        {
            "count": 2,
            "inputs": "((T([256], i64), 0, 128), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 2,
            "inputs": "((T([], f32), 2), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([30522, 768], f32), T([256, 128], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 768], f32), T([1, 128], i64)), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([1, 128, 768], f32), T([1, 128], i64), 512, -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 768], f32), T([256, 128], i64), 30522, 0, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 1,
            "inputs": "((T([256, 2], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128], f32), 1), {})"
        }
    ],
    "aten.gelu.default": [
        {
            "count": 6,
            "inputs": "((T([256, 128, 3072], f32),), {})"
        }
    ],
    "aten.gelu_backward.default": [
        {
            "count": 6,
            "inputs": "((T([256, 128, 3072], f32), T([256, 128, 3072], f32)), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([256, 128], i64), [None, T([2], i64)]), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([32768, 2], f32), T([2, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 32768], f32, stride=(1, 2)), T([32768, 768], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([32768, 768], f32), T([768, 3072], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([768, 32768], f32, stride=(1, 768)), T([32768, 3072], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([32768, 3072], f32), T([3072, 768], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3072, 32768], f32, stride=(1, 3072)), T([32768, 768], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([32768, 768], f32), T([768, 768], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([768, 32768], f32, stride=(1, 768)), T([32768, 768], f32)), {})"
        }
    ],
    "aten.native_dropout.default": [
        {
            "count": 8,
            "inputs": "((T([256, 128, 768], f32), 0.1, True), {})"
        }
    ],
    "aten.native_dropout_backward.default": [
        {
            "count": 8,
            "inputs": "((T([256, 128, 768], f32), T([256, 128, 768], b8), 1.1111111111111112), {})"
        }
    ],
    "aten.native_layer_norm.default": [
        {
            "count": 13,
            "inputs": "((T([256, 128, 768], f32), [768], T([768], f32), T([768], f32), 1e-12), {})"
        }
    ],
    "aten.native_layer_norm_backward.default": [
        {
            "count": 13,
            "inputs": "((T([256, 128, 768], f32), T([256, 128, 768], f32), [768], T([256, 128, 1], f32), T([256, 128, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 2,
            "inputs": "((T([], f32), T([256, 128], f32), T([256], i64), None, 1, 128, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 2,
            "inputs": "((T([256, 128], f32), T([256], i64), None, 1, 128), {})"
        }
    ],
    "aten.split.Tensor": [
        {
            "count": 1,
            "inputs": "((T([256, 128, 2], f32), 1, -1), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([32768, 2], f32), [0], True), {})"
        },
        {
            "count": 30,
            "inputs": "((T([32768, 768], f32), [0], True), {})"
        },
        {
            "count": 6,
            "inputs": "((T([32768, 3072], f32), [0], True), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 768], f32), [0], True), {})"
        }
    ]
}