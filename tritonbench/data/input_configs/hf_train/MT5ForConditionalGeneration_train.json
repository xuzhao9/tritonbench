{
    "aten._foreach_pow.ScalarAndTensor": [
        {
            "count": 1,
            "inputs": "((0.9, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        },
        {
            "count": 1,
            "inputs": "((0.999, [T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32), T([], f32)]), {})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([250112, 512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([32, 6], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([32, 6], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([384, 512], f32), T([384, 512], f32), T([384, 512], f32), T([512, 384], f32), T([512], f32), T([1024, 512], f32), T([1024, 512], f32), T([512, 1024], f32), T([512], f32), T([512], f32), T([250112, 512], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([2048, 250112], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([2048, 250112], f32), T([2048, 250112], f32), 1, f32), {})"
        }
    ],
    "aten._softmax.default": [
        {
            "count": 24,
            "inputs": "((T([16, 6, 128, 128], f32), -1, False), {})"
        }
    ],
    "aten._softmax_backward_data.default": [
        {
            "count": 24,
            "inputs": "((T([16, 6, 128, 128], f32), T([16, 6, 128, 128], f32), -1, f32), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 1,
            "inputs": "((T([128, 128], b8),), {'dtype': i64})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 128], i64),), {'dtype': f32})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 128], f32),), {'dtype': i64})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 1, 1, 128], i64),), {'dtype': f32})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 72,
            "inputs": "((T([2048, 384], f32), [16, 128, 384]), {})"
        },
        {
            "count": 72,
            "inputs": "((T([16, 6, 128, 64], f32), [96, 128, 64]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 6, 64, 128], f32), [96, 64, 128]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([96, 128, 128], f32), [16, 6, 128, 128]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([96, 128, 64], f32), [16, 6, 128, 64]), {})"
        },
        {
            "count": 40,
            "inputs": "((T([2048, 512], f32), [16, 128, 512]), {})"
        },
        {
            "count": 32,
            "inputs": "((T([2048, 1024], f32), [16, 128, 1024]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2048, 250112], f32), [16, 128, 250112]), {})"
        },
        {
            "count": 48,
            "inputs": "((T([16, 128, 6, 64], f32), [16, 128, 384]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 384], f32), [2048, 384]), {})"
        }
    ],
    "aten.abs.default": [
        {
            "count": 1,
            "inputs": "((T([128, 128], i64),), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 42,
            "inputs": "((T([16, 128, 1], f32), 1e-06), {})"
        },
        {
            "count": 10,
            "inputs": "((T([], i64), 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 128], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], i64), 8), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 6, 128, 128], f32, stride=(6, 1, 768, 6)), T([16, 1, 1, 128], f32)), {})"
        },
        {
            "count": 185,
            "inputs": "((T([16, 128, 512], f32), T([16, 128, 512], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([16, 128, 1024], f32), T([16, 128, 1024], f32)), {})"
        },
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32), 1.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 1, 128, 128], f32), T([16, 1, 1, 128], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], i64), 16), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 6, 128, 128], f32, stride=(6, 1, 768, 6)), T([16, 1, 128, 128], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 6, 128, 128], f32), T([16, 1, 1, 128], f32)), {})"
        },
        {
            "count": 14,
            "inputs": "((T([16, 6, 128, 128], f32), T([16, 6, 128, 128], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([250112, 512], f32), T([250112, 512], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128, 128], i64), T([128, 128], i64)), {})"
        },
        {
            "count": 16,
            "inputs": "((T([16, 6, 128, 128], f32), T([16, 6, 128, 128], f32, stride=(98304, 1, 768, 6))), {})"
        },
        {
            "count": 8,
            "inputs": "((T([16, 6, 128, 128], f32), T([16, 6, 128, 128], f32)), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 24,
            "inputs": "((T([96, 128, 64], f32), T([96, 64, 128], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([96, 128, 128], f32), T([96, 128, 64], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([96, 128, 128], f32, stride=(16384, 1, 128)), T([96, 128, 64], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([96, 128, 64], f32), T([96, 64, 128], f32, stride=(8192, 1, 64))), {})"
        },
        {
            "count": 24,
            "inputs": "((T([96, 64, 128], f32, stride=(8192, 1, 64)), T([96, 128, 128], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([96, 128, 128], f32), T([96, 128, 64], f32, stride=(8192, 1, 128))), {})"
        }
    ],
    "aten.clone.default": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 128, 128], f32, stride=(0, 16384, 128, 1)),), {})"
        }
    ],
    "aten.copy_.default": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 128, 128], f32), T([16, 1, 128, 128], f32)), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32, stride=(128, 1, 0)), 512), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), 8), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), 2.772588722239781), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), 16), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), 2.0794415416798357), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 2,
            "inputs": "((T([250112, 512], f32), T([16, 128], i64)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([32, 6], f32), T([128, 128], i64)), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 2,
            "inputs": "((T([128, 128, 6], f32, stride=(128, 1, 16384)), T([128, 128], i64), 32, -1, False), {})"
        },
        {
            "count": 2,
            "inputs": "((T([16, 128, 512], f32), T([16, 128], i64), 250112, -1, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 128, 128], f32), 0), {})"
        }
    ],
    "aten.gt.Scalar": [
        {
            "count": 1,
            "inputs": "((T([128, 128], i64), 0), {})"
        }
    ],
    "aten.gt.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128], i64), T([128, 1], i64)), {})"
        }
    ],
    "aten.log.default": [
        {
            "count": 2,
            "inputs": "((T([128, 128], f32),), {})"
        }
    ],
    "aten.lt.Scalar": [
        {
            "count": 1,
            "inputs": "((T([128, 128], i64), 8), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], i64), 16), {})"
        }
    ],
    "aten.masked_fill.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 128, 128], f32), T([16, 1, 128, 128], b8), -3.4028234663852886e+38), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32), [-1], True), {})"
        }
    ],
    "aten.minimum.default": [
        {
            "count": 3,
            "inputs": "((T([128, 128], i64), T([128, 128], i64)), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 72,
            "inputs": "((T([2048, 512], f32), T([512, 384], f32, stride=(1, 512))), {})"
        },
        {
            "count": 24,
            "inputs": "((T([2048, 384], f32), T([384, 512], f32, stride=(1, 384))), {})"
        },
        {
            "count": 32,
            "inputs": "((T([2048, 512], f32), T([512, 1024], f32, stride=(1, 512))), {})"
        },
        {
            "count": 16,
            "inputs": "((T([2048, 1024], f32), T([1024, 512], f32, stride=(1, 1024))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2048, 512], f32), T([512, 250112], f32, stride=(1, 512))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([250112, 2048], f32, stride=(1, 250112)), T([2048, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2048, 250112], f32), T([250112, 512], f32)), {})"
        },
        {
            "count": 16,
            "inputs": "((T([512, 2048], f32, stride=(1, 512)), T([2048, 1024], f32)), {})"
        },
        {
            "count": 16,
            "inputs": "((T([2048, 512], f32), T([512, 1024], f32)), {})"
        },
        {
            "count": 32,
            "inputs": "((T([1024, 2048], f32, stride=(1, 1024)), T([2048, 512], f32)), {})"
        },
        {
            "count": 32,
            "inputs": "((T([2048, 1024], f32), T([1024, 512], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([512, 2048], f32, stride=(1, 512)), T([2048, 384], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([2048, 512], f32), T([512, 384], f32)), {})"
        },
        {
            "count": 72,
            "inputs": "((T([384, 2048], f32, stride=(1, 384)), T([2048, 512], f32)), {})"
        },
        {
            "count": 72,
            "inputs": "((T([2048, 384], f32), T([384, 512], f32)), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 42,
            "inputs": "((T([16, 128, 1], f32), -0.5), {})"
        },
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32), 2.0), {})"
        },
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32), 3.0), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 2,
            "inputs": "((T([16, 1, 1, 128], f32), -3.4028234663852886e+38), {})"
        },
        {
            "count": 84,
            "inputs": "((T([16, 128, 512], f32), T([16, 128, 1], f32)), {})"
        },
        {
            "count": 42,
            "inputs": "((T([512], f32), T([16, 128, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], i64), 16), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), 8), {})"
        },
        {
            "count": 32,
            "inputs": "((T([16, 128, 1024], f32), 0.5), {})"
        },
        {
            "count": 32,
            "inputs": "((T([16, 128, 1024], f32), 0.044715), {})"
        },
        {
            "count": 32,
            "inputs": "((T([16, 128, 1024], f32), 0.7978845608028654), {})"
        },
        {
            "count": 112,
            "inputs": "((T([16, 128, 1024], f32), T([16, 128, 1024], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), 16), {})"
        },
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32), T([512], f32)), {})"
        },
        {
            "count": 126,
            "inputs": "((T([16, 128, 512], f32), T([16, 128, 512], f32)), {})"
        },
        {
            "count": 42,
            "inputs": "((T([16, 128, 1], f32), T([16, 128, 1], f32)), {})"
        }
    ],
    "aten.mul_.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), T([128, 128], b8)), {})"
        }
    ],
    "aten.native_dropout.default": [
        {
            "count": 44,
            "inputs": "((T([16, 128, 512], f32), 0.1, True), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 6, 128, 128], f32), 0.1, True), {})"
        },
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32), 0.1, True), {})"
        }
    ],
    "aten.native_dropout_backward.default": [
        {
            "count": 44,
            "inputs": "((T([16, 128, 512], f32), T([16, 128, 512], b8), 1.1111111111111112), {})"
        },
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32), T([16, 128, 1024], b8), 1.1111111111111112), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 6, 128, 128], f32), T([16, 6, 128, 128], b8), 1.1111111111111112), {})"
        }
    ],
    "aten.neg.default": [
        {
            "count": 1,
            "inputs": "((T([128, 128], i64),), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([2048, 250112], f32), T([2048], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([2048, 250112], f32), T([2048], i64), None, 1, -100), {})"
        }
    ],
    "aten.pow.Tensor_Scalar": [
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32), 2), {})"
        },
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32), 3.0), {})"
        },
        {
            "count": 42,
            "inputs": "((T([16, 128, 1], f32), 3), {})"
        },
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32), 1.0), {})"
        },
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32), 2.0), {})"
        }
    ],
    "aten.rsqrt.default": [
        {
            "count": 42,
            "inputs": "((T([16, 128, 1], f32),), {})"
        }
    ],
    "aten.rsub.Scalar": [
        {
            "count": 2,
            "inputs": "((T([16, 1, 1, 128], f32), 1.0), {})"
        }
    ],
    "aten.slice_backward.default": [
        {
            "count": 2,
            "inputs": "((T([1, 6, 128, 128], f32), [1, 6, 128, 128], 2, -128, 9223372036854775807, 1), {})"
        }
    ],
    "aten.sub.Tensor": [
        {
            "count": 2,
            "inputs": "((T([1, 128], i64), T([128, 1], i64)), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32), [0, 1], True), {})"
        },
        {
            "count": 42,
            "inputs": "((T([16, 128, 512], f32), [2], True), {})"
        },
        {
            "count": 2,
            "inputs": "((T([16, 6, 128, 128], f32), [0], True), {})"
        }
    ],
    "aten.tanh.default": [
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32),), {})"
        }
    ],
    "aten.tanh_backward.default": [
        {
            "count": 16,
            "inputs": "((T([16, 128, 1024], f32), T([16, 128, 1024], f32)), {})"
        }
    ],
    "aten.triu.default": [
        {
            "count": 1,
            "inputs": "((T([128, 128], f32), 1), {})"
        }
    ],
    "aten.where.self": [
        {
            "count": 2,
            "inputs": "((T([128, 128], b8), T([128, 128], i64), T([128, 128], i64)), {})"
        }
    ]
}