{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([128, 3, 12, 12], f32), T([256, 3, 16, 16], f32), T([384, 128], f32), T([128, 128], f32), T([384, 128], f32), T([128, 384], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([256, 128], f32), T([128, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 256], f32), T([256, 128], f32), T([384, 128], f32), T([128, 128], f32), T([384, 128], f32), T([128, 384], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([256, 128], f32), T([128, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 256], f32), T([256, 128], f32), T([384, 128], f32), T([128, 128], f32), T([384, 128], f32), T([128, 384], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([256, 128], f32), T([128, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 256], f32), T([256, 128], f32), T([1000, 128], f32), T([1000, 256], f32)], [T([128, 3, 12, 12], f32), T([256, 3, 16, 16], f32), T([384, 128], f32), T([128, 128], f32), T([384, 128], f32), T([128, 384], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([256, 128], f32), T([128, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 256], f32), T([256, 128], f32), T([384, 128], f32), T([128, 128], f32), T([384, 128], f32), T([128, 384], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([256, 128], f32), T([128, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 256], f32), T([256, 128], f32), T([384, 128], f32), T([128, 128], f32), T([384, 128], f32), T([128, 384], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([768, 256], f32), T([256, 256], f32), T([768, 256], f32), T([256, 768], f32), T([256, 128], f32), T([128, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([256, 256], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 128], f32), T([128, 256], f32), T([256, 128], f32), T([1000, 128], f32), T([1000, 256], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), T([256, 1000], f32), 1, f32), {})"
    },
    "aten._scaled_dot_product_efficient_attention.default": {
        "count": 9,
        "inputs": "((T([256, 4, 197, 64], f32, stride=(151296, 64, 768, 1)), T([256, 4, 197, 64], f32, stride=(151296, 64, 768, 1)), T([256, 4, 197, 64], f32, stride=(151296, 64, 768, 1)), None, True), {})"
    },
    "aten._scaled_dot_product_efficient_attention_backward.default": {
        "count": 3,
        "inputs": "((T([256, 4, 401, 32], f32, stride=(51328, 32, 128, 1)), T([256, 4, 401, 32], f32, stride=(153984, 32, 384, 1)), T([256, 4, 401, 32], f32, stride=(153984, 32, 384, 1)), T([256, 4, 401, 32], f32, stride=(153984, 32, 384, 1)), None, T([256, 4, 401, 32], f32, stride=(51328, 32, 128, 1)), T([256, 4, 416], f32), T([], i64), T([], i64), 0.0, [True, True, True, False]), {})"
    },
    "aten._softmax.default": {
        "count": 3,
        "inputs": "((T([256, 4, 1, 401], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 3,
        "inputs": "((T([256, 4, 1, 197], f32), T([256, 4, 1, 197], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 3,
        "inputs": "((T([256, 401, 3, 4, 32], f32), [256, 401, 384]), {})"
    },
    "aten.add.Tensor": {
        "count": 3,
        "inputs": "((T([256, 1, 128], f32, stride=(51328, 128, 1)), T([256, 1, 128], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([256, 256], f32, stride=(50432, 1)), T([256, 1000], f32, stride=(1, 256))), {})"
    },
    "aten.bmm.default": {
        "count": 3,
        "inputs": "((T([1024, 1, 197], f32), T([1024, 197, 64], f32, stride=(12608, 1, 197))), {})"
    },
    "aten.cat.default": {
        "count": 6,
        "inputs": "(([T([256, 1, 128], f32), T([256, 400, 128], f32, stride=(51328, 128, 1))], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 256], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([256, 3, 224, 224], f32), T([256, 3, 16, 16], f32), T([256], f32), [16, 16], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([256, 128, 20, 20], f32, stride=(51328, 1, 2560, 128)), T([256, 3, 240, 240], f32), T([128, 3, 12, 12], f32), [128], [12, 12], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([2, 256, 1000], f32, stride=(0, 1000, 1)), 2), {})"
    },
    "aten.gelu.default": {
        "count": 6,
        "inputs": "((T([256, 1, 256], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 3,
        "inputs": "((T([256, 401, 384], f32), T([256, 401, 384], f32)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([2, 256, 1000], f32), [0]), {})"
    },
    "aten.mm.default": {
        "count": 6,
        "inputs": "((T([384, 102656], f32, stride=(1, 384)), T([102656, 128], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 6,
        "inputs": "((T([256, 4, 1, 401], f32), 0.1767766952966369), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 3,
        "inputs": "((T([256, 1, 128], f32), [128], T([128], f32), T([128], f32), 1e-06), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 3,
        "inputs": "((T([256, 1, 128], f32), T([256, 1, 128], f32, stride=(51328, 128, 1)), [128], T([256, 1, 1], f32), T([256, 1, 1], f32), T([128], f32), T([128], f32), [True, True, True]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([256, 1000], f32), T([256], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), T([256], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([256], i64), 1000), {})"
    },
    "aten.select_backward.default": {
        "count": 1,
        "inputs": "((T([256, 128], f32), [256, 401, 128], 1, 0), {})"
    },
    "aten.slice_backward.default": {
        "count": 9,
        "inputs": "((T([256, 1, 256], f32), [256, 197, 256], 1, 0, 1, 1), {})"
    },
    "aten.stack.default": {
        "count": 3,
        "inputs": "(([T([256, 4, 401, 32], f32, stride=(51328, 32, 128, 1)), T([256, 4, 401, 32], f32, stride=(51328, 32, 128, 1)), T([256, 4, 401, 32], f32, stride=(51328, 32, 128, 1))],), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([256, 1, 128], f32, stride=(51328, 128, 1)), [0], True), {})"
    },
    "aten.unbind.int": {
        "count": 9,
        "inputs": "((T([3, 256, 4, 197, 64], f32, stride=(256, 151296, 64, 768, 1)),), {})"
    },
    "aten.upsample_bicubic2d.default": {
        "count": 1,
        "inputs": "((T([256, 3, 240, 240], f32), [224, 224], False), {})"
    }
}