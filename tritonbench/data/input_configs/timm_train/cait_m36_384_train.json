{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([768, 3, 16, 16], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([3072, 768], f32), T([768, 3072], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([3072, 768], f32), T([768, 3072], f32), T([1000, 768], f32)], [T([768, 3, 16, 16], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([2304, 768], f32), T([768, 768], f32), T([16, 16], f32), T([16, 16], f32), T([3072, 768], f32), T([768, 3072], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([3072, 768], f32), T([768, 3072], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([768, 768], f32), T([3072, 768], f32), T([768, 3072], f32), T([1000, 768], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([1, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([1, 1000], f32), T([1, 1000], f32), 1, f32), {})"
    },
    "aten._scaled_dot_product_efficient_attention.default": {
        "count": 2,
        "inputs": "((T([1, 16, 1, 48], f32), T([1, 16, 577, 48], f32, stride=(443136, 48, 768, 1)), T([1, 16, 577, 48], f32, stride=(443136, 48, 768, 1)), None, True), {})"
    },
    "aten._scaled_dot_product_efficient_attention_backward.default": {
        "count": 2,
        "inputs": "((T([1, 16, 1, 48], f32), T([1, 16, 1, 48], f32), T([1, 16, 577, 48], f32, stride=(443136, 48, 768, 1)), T([1, 16, 577, 48], f32, stride=(443136, 48, 768, 1)), None, T([1, 16, 1, 48], f32), T([1, 16, 32], f32), T([], i64), T([], i64), 0.0, [True, True, True, False]), {})"
    },
    "aten._softmax.default": {
        "count": 36,
        "inputs": "((T([1, 16, 576, 576], f32, stride=(5308416, 1, 9216, 16)), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 36,
        "inputs": "((T([1, 16, 576, 576], f32), T([1, 16, 576, 576], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 36,
        "inputs": "((T([1, 576, 3, 16, 48], f32), [1, 576, 2304]), {})"
    },
    "aten.add.Tensor": {
        "count": 72,
        "inputs": "((T([3, 1, 16, 576, 48], f32), T([3, 1, 16, 576, 48], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([1, 768], f32), T([768, 1000], f32, stride=(1, 768))), {})"
    },
    "aten.bmm.default": {
        "count": 36,
        "inputs": "((T([16, 576, 576], f32), T([16, 576, 48], f32, stride=(48, 2304, 1))), {})"
    },
    "aten.cat.default": {
        "count": 3,
        "inputs": "(([T([1, 1, 768], f32), T([1, 576, 768], f32, stride=(442368, 1, 576))], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 768], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([1, 3, 384, 384], f32), T([768, 3, 16, 16], f32), T([768], f32), [16, 16], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([1, 768, 24, 24], f32, stride=(768, 1, 18432, 768)), T([1, 3, 384, 384], f32), T([768, 3, 16, 16], f32), [768], [16, 16], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.copy_.default": {
        "count": 1,
        "inputs": "((T([1, 576, 768], f32), T([1, 576, 768], f32)), {})"
    },
    "aten.gelu.default": {
        "count": 2,
        "inputs": "((T([1, 1, 3072], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 36,
        "inputs": "((T([1, 576, 3072], f32), T([1, 576, 3072], f32)), {})"
    },
    "aten.mm.default": {
        "count": 36,
        "inputs": "((T([2304, 576], f32, stride=(1, 2304)), T([576, 768], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 36,
        "inputs": "((T([1, 16, 576, 48], f32), 0.14433756729740643), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 2,
        "inputs": "((T([1, 1, 768], f32), [768], T([768], f32), T([768], f32), 1e-06), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 72,
        "inputs": "((T([1, 576, 768], f32), T([1, 576, 768], f32, stride=(442368, 1, 576)), [768], T([1, 576, 1], f32), T([1, 576, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
    },
    "aten.new_empty_strided.default": {
        "count": 1,
        "inputs": "((T([1, 576, 768], f32), [1, 576, 768], [442368, 768, 1]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([1, 1000], f32), T([1], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([1, 1000], f32), T([1], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([1], i64), 1000), {})"
    },
    "aten.select_backward.default": {
        "count": 36,
        "inputs": "((T([1, 16, 576, 48], f32), [3, 1, 16, 576, 48], 0, 0), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 36,
        "inputs": "((T([576, 2304], f32), [0], True), {})"
    }
}