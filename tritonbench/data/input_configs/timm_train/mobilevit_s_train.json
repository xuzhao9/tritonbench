{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([16, 3, 3, 3], f32), T([64, 16, 1, 1], f32), T([64, 1, 3, 3], f32), T([32, 64, 1, 1], f32), T([128, 32, 1, 1], f32), T([128, 1, 3, 3], f32), T([64, 128, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 1, 3, 3], f32), T([64, 256, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 1, 3, 3], f32), T([64, 256, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 1, 3, 3], f32), T([96, 256, 1, 1], f32), T([96, 96, 3, 3], f32), T([144, 96, 1, 1], f32), T([432, 144], f32), T([144, 144], f32), T([288, 144], f32), T([144, 288], f32), T([432, 144], f32), T([144, 144], f32), T([288, 144], f32), T([144, 288], f32), T([96, 144, 1, 1], f32), T([96, 192, 3, 3], f32), T([384, 96, 1, 1], f32), T([384, 1, 3, 3], f32), T([128, 384, 1, 1], f32), T([128, 128, 3, 3], f32), T([192, 128, 1, 1], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([128, 192, 1, 1], f32), T([128, 256, 3, 3], f32), T([512, 128, 1, 1], f32), T([512, 1, 3, 3], f32), T([160, 512, 1, 1], f32), T([160, 160, 3, 3], f32), T([240, 160, 1, 1], f32), T([720, 240], f32), T([240, 240], f32), T([480, 240], f32), T([240, 480], f32), T([720, 240], f32), T([240, 240], f32), T([480, 240], f32), T([240, 480], f32), T([720, 240], f32), T([240, 240], f32), T([480, 240], f32), T([240, 480], f32), T([160, 240, 1, 1], f32), T([160, 320, 3, 3], f32), T([640, 160, 1, 1], f32), T([1000, 640], f32)], [T([16, 3, 3, 3], f32), T([64, 16, 1, 1], f32), T([64, 1, 3, 3], f32), T([32, 64, 1, 1], f32), T([128, 32, 1, 1], f32), T([128, 1, 3, 3], f32), T([64, 128, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 1, 3, 3], f32), T([64, 256, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 1, 3, 3], f32), T([64, 256, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 1, 3, 3], f32), T([96, 256, 1, 1], f32), T([96, 96, 3, 3], f32), T([144, 96, 1, 1], f32), T([432, 144], f32), T([144, 144], f32), T([288, 144], f32), T([144, 288], f32), T([432, 144], f32), T([144, 144], f32), T([288, 144], f32), T([144, 288], f32), T([96, 144, 1, 1], f32), T([96, 192, 3, 3], f32), T([384, 96, 1, 1], f32), T([384, 1, 3, 3], f32), T([128, 384, 1, 1], f32), T([128, 128, 3, 3], f32), T([192, 128, 1, 1], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([576, 192], f32), T([192, 192], f32), T([384, 192], f32), T([192, 384], f32), T([128, 192, 1, 1], f32), T([128, 256, 3, 3], f32), T([512, 128, 1, 1], f32), T([512, 1, 3, 3], f32), T([160, 512, 1, 1], f32), T([160, 160, 3, 3], f32), T([240, 160, 1, 1], f32), T([720, 240], f32), T([240, 240], f32), T([480, 240], f32), T([240, 480], f32), T([720, 240], f32), T([240, 240], f32), T([480, 240], f32), T([240, 480], f32), T([720, 240], f32), T([240, 240], f32), T([480, 240], f32), T([240, 480], f32), T([160, 240, 1, 1], f32), T([160, 320, 3, 3], f32), T([640, 160, 1, 1], f32), T([1000, 640], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64, 1000], f32), 1, f32), {})"
    },
    "aten._scaled_dot_product_efficient_attention.default": {
        "count": 3,
        "inputs": "((T([256, 4, 16, 60], f32, stride=(11520, 60, 720, 1)), T([256, 4, 16, 60], f32, stride=(11520, 60, 720, 1)), T([256, 4, 16, 60], f32, stride=(11520, 60, 720, 1)), None, True), {})"
    },
    "aten._scaled_dot_product_efficient_attention_backward.default": {
        "count": 2,
        "inputs": "((T([256, 4, 256, 36], f32, stride=(36864, 36, 144, 1)), T([256, 4, 256, 36], f32, stride=(110592, 36, 432, 1)), T([256, 4, 256, 36], f32, stride=(110592, 36, 432, 1)), T([256, 4, 256, 36], f32, stride=(110592, 36, 432, 1)), None, T([256, 4, 256, 36], f32, stride=(36864, 36, 144, 1)), T([256, 4, 256], f32), T([], i64), T([], i64), 0.0, [True, True, True, False]), {})"
    },
    "aten._unsafe_view.default": {
        "count": 2,
        "inputs": "((T([256, 256, 3, 4, 36], f32), [256, 256, 432]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([64, 96, 32, 32], f32, stride=(196608, 1024, 32, 1)), T([64, 96, 32, 32], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 32,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([64, 640], f32), T([640, 1000], f32, stride=(1, 640))), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([64, 160, 8, 8], f32), T([64, 160, 8, 8], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 640], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([64, 160, 8, 8], f32), T([640, 160, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([64, 16, 128, 128], f32), T([64, 3, 256, 256], f32), T([16, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([64, 640, 8, 8], f32), T([640], f32), T([640], f32), T([640], f32), T([640], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([64, 16, 128, 128], f32), T([64, 16, 128, 128], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([64, 640, 8, 8], f32, stride=(640, 1, 0, 0)), 64), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([64, 640, 8, 8], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 2,
        "inputs": "((T([432, 65536], f32, stride=(1, 432)), T([65536, 144], f32)), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 7,
        "inputs": "((T([256, 16, 240], f32), [240], T([240], f32), T([240], f32), 1e-05), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 5,
        "inputs": "((T([256, 256, 144], f32), T([256, 256, 144], f32), [144], T([256, 256, 1], f32), T([256, 256, 1], f32), T([144], f32), T([144], f32), [True, True, True]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([64, 1000], f32), T([64], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([64], i64), 1000), {})"
    },
    "aten.silu.default": {
        "count": 3,
        "inputs": "((T([256, 16, 480], f32),), {})"
    },
    "aten.silu_.default": {
        "count": 1,
        "inputs": "((T([64, 640, 8, 8], f32),), {})"
    },
    "aten.silu_backward.default": {
        "count": 1,
        "inputs": "((T([64, 16, 128, 128], f32), T([64, 16, 128, 128], f32)), {})"
    },
    "aten.stack.default": {
        "count": 2,
        "inputs": "(([T([256, 4, 256, 36], f32, stride=(36864, 36, 144, 1)), T([256, 4, 256, 36], f32, stride=(36864, 36, 144, 1)), T([256, 4, 256, 36], f32, stride=(36864, 36, 144, 1))],), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 2,
        "inputs": "((T([65536, 432], f32), [0], True), {})"
    },
    "aten.unbind.int": {
        "count": 3,
        "inputs": "((T([3, 256, 4, 16, 60], f32, stride=(240, 11520, 60, 720, 1)),), {})"
    }
}