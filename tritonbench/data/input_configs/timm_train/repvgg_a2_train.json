{
    "aten._foreach_add.List": [
        {
            "count": 1,
            "inputs": "(([T([64, 3, 3, 3], f32), T([64, 3, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 64, 1, 1], f32), T([96, 96, 3, 3], f32), T([96, 96, 1, 1], f32), T([192, 96, 3, 3], f32), T([192, 96, 1, 1], f32), T([192, 192, 3, 3], f32), T([192, 192, 1, 1], f32), T([192, 192, 3, 3], f32), T([192, 192, 1, 1], f32), T([192, 192, 3, 3], f32), T([192, 192, 1, 1], f32), T([384, 192, 3, 3], f32), T([384, 192, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([1408, 384, 3, 3], f32), T([1408, 384, 1, 1], f32), T([1000, 1408], f32)], [T([64, 3, 3, 3], f32), T([64, 3, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 64, 1, 1], f32), T([96, 96, 3, 3], f32), T([96, 96, 1, 1], f32), T([192, 96, 3, 3], f32), T([192, 96, 1, 1], f32), T([192, 192, 3, 3], f32), T([192, 192, 1, 1], f32), T([192, 192, 3, 3], f32), T([192, 192, 1, 1], f32), T([192, 192, 3, 3], f32), T([192, 192, 1, 1], f32), T([384, 192, 3, 3], f32), T([384, 192, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([384, 384, 3, 3], f32), T([384, 384, 1, 1], f32), T([1408, 384, 3, 3], f32), T([1408, 384, 1, 1], f32), T([1000, 1408], f32)]), {'alpha': 0.0001})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 2,
            "inputs": "((T([128, 64, 112, 112], f32), T([128, 64, 112, 112], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 96, 56, 56], f32)), {})"
        },
        {
            "count": 11,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 192, 28, 28], f32)), {})"
        },
        {
            "count": 41,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 384, 14, 14], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 1408, 7, 7], f32), T([128, 1408, 7, 7], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 61,
            "inputs": "((T([], i64), 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 96, 56, 56], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 192, 28, 28], f32)), {})"
        },
        {
            "count": 13,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 384, 14, 14], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 1,
            "inputs": "((T([1000], f32), T([128, 1408], f32), T([1408, 1000], f32, stride=(1, 1408))), {})"
        }
    ],
    "aten.clone.default": [
        {
            "count": 4,
            "inputs": "((T([64], f32),), {})"
        },
        {
            "count": 10,
            "inputs": "((T([96], f32),), {})"
        },
        {
            "count": 22,
            "inputs": "((T([192], f32),), {})"
        },
        {
            "count": 82,
            "inputs": "((T([384], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([1408], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([96, 64, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([96, 64, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([96, 96, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([96, 96, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([192, 96, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([192, 96, 1, 1], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([192, 192, 3, 3], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([192, 192, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([384, 192, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([384, 192, 1, 1], f32),), {})"
        },
        {
            "count": 13,
            "inputs": "((T([384, 384, 3, 3], f32),), {})"
        },
        {
            "count": 13,
            "inputs": "((T([384, 384, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1408, 384, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1408, 384, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000, 1408], f32),), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 1,
            "inputs": "((T([128, 3, 224, 224], f32), T([64, 3, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 3, 224, 224], f32), T([64, 3, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 112, 112], f32), T([96, 64, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 112, 112], f32), T([96, 64, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([96, 96, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([96, 96, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([192, 96, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([192, 96, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 192, 28, 28], f32), T([192, 192, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 192, 28, 28], f32), T([192, 192, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 192, 28, 28], f32), T([384, 192, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 192, 28, 28], f32), T([384, 192, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 13,
            "inputs": "((T([128, 384, 14, 14], f32), T([384, 384, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 13,
            "inputs": "((T([128, 384, 14, 14], f32), T([384, 384, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 384, 14, 14], f32), T([1408, 384, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 384, 14, 14], f32), T([1408, 384, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1408, 7, 7], f32), T([128, 384, 14, 14], f32), T([1408, 384, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 1408, 7, 7], f32), T([128, 384, 14, 14], f32), T([1408, 384, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 13,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 384, 14, 14], f32), T([384, 384, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 13,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 384, 14, 14], f32), T([384, 384, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 192, 28, 28], f32), T([384, 192, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 192, 28, 28], f32), T([384, 192, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 192, 28, 28], f32), T([192, 192, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 192, 28, 28], f32), T([192, 192, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 96, 56, 56], f32), T([192, 96, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 96, 56, 56], f32), T([192, 96, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 96, 56, 56], f32), T([96, 96, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 96, 56, 56], f32), T([96, 96, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 64, 112, 112], f32), T([96, 64, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 64, 112, 112], f32), T([96, 64, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 112, 112], f32), T([128, 3, 224, 224], f32), T([64, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 112, 112], f32), T([128, 3, 224, 224], f32), T([64, 3, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
        }
    ],
    "aten.cudnn_batch_norm.default": [
        {
            "count": 2,
            "inputs": "((T([128, 64, 112, 112], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 96, 56, 56], f32), T([96], f32), T([96], f32), T([96], f32), T([96], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 11,
            "inputs": "((T([128, 192, 28, 28], f32), T([192], f32), T([192], f32), T([192], f32), T([192], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 41,
            "inputs": "((T([128, 384, 14, 14], f32), T([384], f32), T([384], f32), T([384], f32), T([384], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 1408, 7, 7], f32), T([1408], f32), T([1408], f32), T([1408], f32), T([1408], f32), True, 0.1, 1e-05), {})"
        }
    ],
    "aten.cudnn_batch_norm_backward.default": [
        {
            "count": 2,
            "inputs": "((T([128, 1408, 7, 7], f32), T([128, 1408, 7, 7], f32), T([1408], f32), T([1408], f32), T([1408], f32), T([1408], f32), T([1408], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 41,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 384, 14, 14], f32), T([384], f32), T([384], f32), T([384], f32), T([384], f32), T([384], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 11,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 192, 28, 28], f32), T([192], f32), T([192], f32), T([192], f32), T([192], f32), T([192], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 96, 56, 56], f32), T([96], f32), T([96], f32), T([96], f32), T([96], f32), T([96], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 64, 112, 112], f32), T([128, 64, 112, 112], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), 1e-05, T([0], u8)), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 1,
            "inputs": "((T([128, 1408, 7, 7], f32, stride=(1408, 1, 0, 0)), 49), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 1,
            "inputs": "((T([128, 1408, 7, 7], f32), [-1, -2], True), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([1000, 1408], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000, 128], f32, stride=(1, 1000)), T([128, 1408], f32)), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([128, 1000], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([128], i64), None, 1, -100), {})"
        }
    ],
    "aten.random_.to": [
        {
            "count": 1,
            "inputs": "((T([128], i64), 1000), {})"
        }
    ],
    "aten.relu_.default": [
        {
            "count": 1,
            "inputs": "((T([128, 64, 112, 112], f32),), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 96, 56, 56], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([128, 192, 28, 28], f32),), {})"
        },
        {
            "count": 14,
            "inputs": "((T([128, 384, 14, 14], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 1408, 7, 7], f32),), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), [0], True), {})"
        }
    ],
    "aten.threshold_backward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1408, 7, 7], f32), T([128, 1408, 7, 7], f32), 0), {})"
        },
        {
            "count": 14,
            "inputs": "((T([128, 384, 14, 14], f32), T([128, 384, 14, 14], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([128, 192, 28, 28], f32), T([128, 192, 28, 28], f32), 0), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 96, 56, 56], f32), T([128, 96, 56, 56], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 112, 112], f32), T([128, 64, 112, 112], f32), 0), {})"
        }
    ]
}