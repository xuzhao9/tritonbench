{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([16, 3, 3, 3], f32), T([32, 16, 3, 3], f32), T([64, 32, 3, 3], f32), T([128, 64, 3, 3], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([640, 128], f32), T([128, 128], f32), T([256, 512], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([1280, 256], f32), T([256, 256], f32), T([384, 1024], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([1000, 384], f32), T([1000, 384], f32)], [T([16, 3, 3, 3], f32), T([32, 16, 3, 3], f32), T([64, 32, 3, 3], f32), T([128, 64, 3, 3], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([256, 128], f32), T([128, 128], f32), T([256, 128], f32), T([128, 256], f32), T([640, 128], f32), T([128, 128], f32), T([256, 512], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([512, 256], f32), T([256, 256], f32), T([512, 256], f32), T([256, 512], f32), T([1280, 256], f32), T([256, 256], f32), T([384, 1024], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([768, 384], f32), T([384, 384], f32), T([768, 384], f32), T([384, 768], f32), T([1000, 384], f32), T([1000, 384], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([1024, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([1024, 1000], f32), T([1024, 1000], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 4,
        "inputs": "((T([1024, 12, 16, 16], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 4,
        "inputs": "((T([1024, 4, 196, 196], f32), T([1024, 4, 196, 196], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 1,
        "inputs": "((T([1024, 49, 8, 16], f32), [1024, 49, 128]), {})"
    },
    "aten.add.Tensor": {
        "count": 9,
        "inputs": "((T([1024, 196, 128], f32), T([1024, 196, 128], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 64,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 2,
        "inputs": "((T([1000], f32), T([1024, 384], f32), T([384, 1000], f32, stride=(1, 384))), {})"
    },
    "aten.bmm.default": {
        "count": 4,
        "inputs": "((T([4096, 196, 196], f32), T([4096, 196, 16], f32, stride=(3136, 1, 196))), {})"
    },
    "aten.cat.default": {
        "count": 4,
        "inputs": "(([T([1024, 196, 4, 16], f32, stride=(12544, 16, 3136, 1)), T([1024, 196, 4, 16], f32, stride=(12544, 1, 3136, 196)), T([1024, 196, 4, 32], f32, stride=(25088, 32, 6272, 1))], 3), {})"
    },
    "aten.clone.default": {
        "count": 2,
        "inputs": "((T([1000, 384], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([1024, 64, 28, 28], f32), T([128, 64, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 16, 112, 112], f32), T([1024, 3, 224, 224], f32), T([16, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([1024, 128, 14, 14], f32), T([128], f32), T([128], f32), T([128], f32), T([128], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 16, 112, 112], f32), T([1024, 16, 112, 112], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([1024, 16, 384], f32, stride=(384, 0, 1)), 16), {})"
    },
    "aten.div.Tensor": {
        "count": 2,
        "inputs": "((T([1024, 1000], f32), 2), {})"
    },
    "aten.hardswish.default": {
        "count": 4,
        "inputs": "((T([1024, 16, 384], f32),), {})"
    },
    "aten.hardswish_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 16, 112, 112], f32), T([1024, 16, 112, 112], f32)), {})"
    },
    "aten.index.Tensor": {
        "count": 4,
        "inputs": "((T([12, 16], f32), [None, T([16, 16], i64)]), {})"
    },
    "aten.index_put.default": {
        "count": 4,
        "inputs": "((T([4, 196], f32), [None, T([196, 196], i64)], T([4, 196, 196], f32), True), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([1024, 16, 384], f32), [1]), {})"
    },
    "aten.mm.default": {
        "count": 4,
        "inputs": "((T([200704, 128], f32), T([128, 128], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 8,
        "inputs": "((T([1024, 12, 16, 16], f32), 0.25), {})"
    },
    "aten.native_batch_norm.default": {
        "count": 2,
        "inputs": "((T([1024, 384], f32), T([384], f32), T([384], f32), T([384], f32), T([384], f32), True, 0.1, 1e-05), {})"
    },
    "aten.native_batch_norm_backward.default": {
        "count": 8,
        "inputs": "((T([200704, 256], f32), T([200704, 256], f32), T([256], f32), T([256], f32), T([256], f32), T([256], f32), T([256], f32), True, 1e-05, [True, True, True]), {})"
    },
    "aten.new_zeros.default": {
        "count": 4,
        "inputs": "((T([4, 196, 196], f32), [4, 196]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([1024, 1000], f32), T([1024], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([1024, 1000], f32), T([1024], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([1024], i64), 1000), {})"
    },
    "aten.slice_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 7, 14, 128], f32), [1024, 14, 14, 128], 1, 0, 9223372036854775807, 2), {})"
    },
    "aten.split_with_sizes.default": {
        "count": 4,
        "inputs": "((T([1024, 16, 12, 64], f32), [16, 16, 32], 3), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 4,
        "inputs": "((T([1024, 4, 196, 196], f32), [0], True), {})"
    }
}