{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([32, 3, 3, 3], f32), T([32, 1, 3, 3], f32), T([32, 32, 1, 1], f32), T([96, 16, 1, 1], f32), T([96, 16, 1, 1], f32), T([64, 1, 3, 3], f32), T([64, 1, 5, 5], f32), T([64, 1, 7, 7], f32), T([20, 96, 1, 1], f32), T([20, 96, 1, 1], f32), T([60, 20, 1, 1], f32), T([60, 20, 1, 1], f32), T([120, 1, 3, 3], f32), T([20, 60, 1, 1], f32), T([20, 60, 1, 1], f32), T([240, 40, 1, 1], f32), T([60, 1, 3, 3], f32), T([60, 1, 5, 5], f32), T([60, 1, 7, 7], f32), T([60, 1, 9, 9], f32), T([20, 240, 1, 1], f32), T([240, 20, 1, 1], f32), T([56, 240, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 1, 3, 3], f32), T([168, 1, 5, 5], f32), T([28, 336, 1, 1], f32), T([336, 28, 1, 1], f32), T([28, 168, 1, 1], f32), T([28, 168, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 1, 3, 3], f32), T([168, 1, 5, 5], f32), T([28, 336, 1, 1], f32), T([336, 28, 1, 1], f32), T([28, 168, 1, 1], f32), T([28, 168, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 1, 3, 3], f32), T([168, 1, 5, 5], f32), T([28, 336, 1, 1], f32), T([336, 28, 1, 1], f32), T([28, 168, 1, 1], f32), T([28, 168, 1, 1], f32), T([336, 56, 1, 1], f32), T([112, 1, 3, 3], f32), T([112, 1, 5, 5], f32), T([112, 1, 7, 7], f32), T([14, 336, 1, 1], f32), T([336, 14, 1, 1], f32), T([104, 336, 1, 1], f32), T([312, 52, 1, 1], f32), T([312, 52, 1, 1], f32), T([156, 1, 3, 3], f32), T([156, 1, 5, 5], f32), T([156, 1, 7, 7], f32), T([156, 1, 9, 9], f32), T([26, 624, 1, 1], f32), T([624, 26, 1, 1], f32), T([52, 312, 1, 1], f32), T([52, 312, 1, 1], f32), T([312, 52, 1, 1], f32), T([312, 52, 1, 1], f32), T([156, 1, 3, 3], f32), T([156, 1, 5, 5], f32), T([156, 1, 7, 7], f32), T([156, 1, 9, 9], f32), T([26, 624, 1, 1], f32), T([624, 26, 1, 1], f32), T([52, 312, 1, 1], f32), T([52, 312, 1, 1], f32), T([312, 52, 1, 1], f32), T([312, 52, 1, 1], f32), T([156, 1, 3, 3], f32), T([156, 1, 5, 5], f32), T([156, 1, 7, 7], f32), T([156, 1, 9, 9], f32), T([26, 624, 1, 1], f32), T([624, 26, 1, 1], f32), T([52, 312, 1, 1], f32), T([52, 312, 1, 1], f32), T([624, 104, 1, 1], f32), T([624, 1, 3, 3], f32), T([52, 624, 1, 1], f32), T([624, 52, 1, 1], f32), T([160, 624, 1, 1], f32), T([240, 80, 1, 1], f32), T([240, 80, 1, 1], f32), T([120, 1, 3, 3], f32), T([120, 1, 5, 5], f32), T([120, 1, 7, 7], f32), T([120, 1, 9, 9], f32), T([80, 480, 1, 1], f32), T([480, 80, 1, 1], f32), T([80, 240, 1, 1], f32), T([80, 240, 1, 1], f32), T([240, 80, 1, 1], f32), T([240, 80, 1, 1], f32), T([120, 1, 3, 3], f32), T([120, 1, 5, 5], f32), T([120, 1, 7, 7], f32), T([120, 1, 9, 9], f32), T([80, 480, 1, 1], f32), T([480, 80, 1, 1], f32), T([80, 240, 1, 1], f32), T([80, 240, 1, 1], f32), T([240, 80, 1, 1], f32), T([240, 80, 1, 1], f32), T([120, 1, 3, 3], f32), T([120, 1, 5, 5], f32), T([120, 1, 7, 7], f32), T([120, 1, 9, 9], f32), T([80, 480, 1, 1], f32), T([480, 80, 1, 1], f32), T([80, 240, 1, 1], f32), T([80, 240, 1, 1], f32), T([960, 160, 1, 1], f32), T([240, 1, 3, 3], f32), T([240, 1, 5, 5], f32), T([240, 1, 7, 7], f32), T([240, 1, 9, 9], f32), T([80, 960, 1, 1], f32), T([960, 80, 1, 1], f32), T([264, 960, 1, 1], f32), T([1584, 264, 1, 1], f32), T([396, 1, 3, 3], f32), T([396, 1, 5, 5], f32), T([396, 1, 7, 7], f32), T([396, 1, 9, 9], f32), T([132, 1584, 1, 1], f32), T([1584, 132, 1, 1], f32), T([132, 792, 1, 1], f32), T([132, 792, 1, 1], f32), T([1584, 264, 1, 1], f32), T([396, 1, 3, 3], f32), T([396, 1, 5, 5], f32), T([396, 1, 7, 7], f32), T([396, 1, 9, 9], f32), T([132, 1584, 1, 1], f32), T([1584, 132, 1, 1], f32), T([132, 792, 1, 1], f32), T([132, 792, 1, 1], f32), T([1584, 264, 1, 1], f32), T([396, 1, 3, 3], f32), T([396, 1, 5, 5], f32), T([396, 1, 7, 7], f32), T([396, 1, 9, 9], f32), T([132, 1584, 1, 1], f32), T([1584, 132, 1, 1], f32), T([132, 792, 1, 1], f32), T([132, 792, 1, 1], f32), T([1536, 264, 1, 1], f32), T([1000, 1536], f32)], [T([32, 3, 3, 3], f32), T([32, 1, 3, 3], f32), T([32, 32, 1, 1], f32), T([96, 16, 1, 1], f32), T([96, 16, 1, 1], f32), T([64, 1, 3, 3], f32), T([64, 1, 5, 5], f32), T([64, 1, 7, 7], f32), T([20, 96, 1, 1], f32), T([20, 96, 1, 1], f32), T([60, 20, 1, 1], f32), T([60, 20, 1, 1], f32), T([120, 1, 3, 3], f32), T([20, 60, 1, 1], f32), T([20, 60, 1, 1], f32), T([240, 40, 1, 1], f32), T([60, 1, 3, 3], f32), T([60, 1, 5, 5], f32), T([60, 1, 7, 7], f32), T([60, 1, 9, 9], f32), T([20, 240, 1, 1], f32), T([240, 20, 1, 1], f32), T([56, 240, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 1, 3, 3], f32), T([168, 1, 5, 5], f32), T([28, 336, 1, 1], f32), T([336, 28, 1, 1], f32), T([28, 168, 1, 1], f32), T([28, 168, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 1, 3, 3], f32), T([168, 1, 5, 5], f32), T([28, 336, 1, 1], f32), T([336, 28, 1, 1], f32), T([28, 168, 1, 1], f32), T([28, 168, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 28, 1, 1], f32), T([168, 1, 3, 3], f32), T([168, 1, 5, 5], f32), T([28, 336, 1, 1], f32), T([336, 28, 1, 1], f32), T([28, 168, 1, 1], f32), T([28, 168, 1, 1], f32), T([336, 56, 1, 1], f32), T([112, 1, 3, 3], f32), T([112, 1, 5, 5], f32), T([112, 1, 7, 7], f32), T([14, 336, 1, 1], f32), T([336, 14, 1, 1], f32), T([104, 336, 1, 1], f32), T([312, 52, 1, 1], f32), T([312, 52, 1, 1], f32), T([156, 1, 3, 3], f32), T([156, 1, 5, 5], f32), T([156, 1, 7, 7], f32), T([156, 1, 9, 9], f32), T([26, 624, 1, 1], f32), T([624, 26, 1, 1], f32), T([52, 312, 1, 1], f32), T([52, 312, 1, 1], f32), T([312, 52, 1, 1], f32), T([312, 52, 1, 1], f32), T([156, 1, 3, 3], f32), T([156, 1, 5, 5], f32), T([156, 1, 7, 7], f32), T([156, 1, 9, 9], f32), T([26, 624, 1, 1], f32), T([624, 26, 1, 1], f32), T([52, 312, 1, 1], f32), T([52, 312, 1, 1], f32), T([312, 52, 1, 1], f32), T([312, 52, 1, 1], f32), T([156, 1, 3, 3], f32), T([156, 1, 5, 5], f32), T([156, 1, 7, 7], f32), T([156, 1, 9, 9], f32), T([26, 624, 1, 1], f32), T([624, 26, 1, 1], f32), T([52, 312, 1, 1], f32), T([52, 312, 1, 1], f32), T([624, 104, 1, 1], f32), T([624, 1, 3, 3], f32), T([52, 624, 1, 1], f32), T([624, 52, 1, 1], f32), T([160, 624, 1, 1], f32), T([240, 80, 1, 1], f32), T([240, 80, 1, 1], f32), T([120, 1, 3, 3], f32), T([120, 1, 5, 5], f32), T([120, 1, 7, 7], f32), T([120, 1, 9, 9], f32), T([80, 480, 1, 1], f32), T([480, 80, 1, 1], f32), T([80, 240, 1, 1], f32), T([80, 240, 1, 1], f32), T([240, 80, 1, 1], f32), T([240, 80, 1, 1], f32), T([120, 1, 3, 3], f32), T([120, 1, 5, 5], f32), T([120, 1, 7, 7], f32), T([120, 1, 9, 9], f32), T([80, 480, 1, 1], f32), T([480, 80, 1, 1], f32), T([80, 240, 1, 1], f32), T([80, 240, 1, 1], f32), T([240, 80, 1, 1], f32), T([240, 80, 1, 1], f32), T([120, 1, 3, 3], f32), T([120, 1, 5, 5], f32), T([120, 1, 7, 7], f32), T([120, 1, 9, 9], f32), T([80, 480, 1, 1], f32), T([480, 80, 1, 1], f32), T([80, 240, 1, 1], f32), T([80, 240, 1, 1], f32), T([960, 160, 1, 1], f32), T([240, 1, 3, 3], f32), T([240, 1, 5, 5], f32), T([240, 1, 7, 7], f32), T([240, 1, 9, 9], f32), T([80, 960, 1, 1], f32), T([960, 80, 1, 1], f32), T([264, 960, 1, 1], f32), T([1584, 264, 1, 1], f32), T([396, 1, 3, 3], f32), T([396, 1, 5, 5], f32), T([396, 1, 7, 7], f32), T([396, 1, 9, 9], f32), T([132, 1584, 1, 1], f32), T([1584, 132, 1, 1], f32), T([132, 792, 1, 1], f32), T([132, 792, 1, 1], f32), T([1584, 264, 1, 1], f32), T([396, 1, 3, 3], f32), T([396, 1, 5, 5], f32), T([396, 1, 7, 7], f32), T([396, 1, 9, 9], f32), T([132, 1584, 1, 1], f32), T([1584, 132, 1, 1], f32), T([132, 792, 1, 1], f32), T([132, 792, 1, 1], f32), T([1584, 264, 1, 1], f32), T([396, 1, 3, 3], f32), T([396, 1, 5, 5], f32), T([396, 1, 7, 7], f32), T([396, 1, 9, 9], f32), T([132, 1584, 1, 1], f32), T([1584, 132, 1, 1], f32), T([132, 792, 1, 1], f32), T([132, 792, 1, 1], f32), T([1536, 264, 1, 1], f32), T([1000, 1536], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([128, 240, 28, 28], f32), T([128, 240, 28, 28], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 58,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([128, 1536], f32), T([1536, 1000], f32, stride=(1, 1536))), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([128, 16, 112, 112], f32), T([128, 16, 112, 112], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 1536], f32),), {})"
    },
    "aten.constant_pad_nd.default": {
        "count": 1,
        "inputs": "((T([128, 64, 113, 113], f32), [0, -1, 0, -1]), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([128, 264, 7, 7], f32), T([1536, 264, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([128, 32, 112, 112], f32), T([128, 3, 225, 225], f32), T([32, 3, 3, 3], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([128, 1536, 7, 7], f32), T([1536], f32), T([1536], f32), T([1536], f32), T([1536], f32), True, 0.1, 0.001), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 3,
        "inputs": "((T([128, 32, 112, 112], f32), T([128, 32, 112, 112], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), 0.001, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([128, 240, 28, 28], f32, stride=(240, 1, 0, 0)), 784), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([128, 1536, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 128], f32, stride=(1, 1000)), T([128, 1536], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([128, 240, 28, 28], f32), T([128, 240, 28, 28], f32)), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([128, 1000], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([128], i64), 1000), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([128, 1536, 7, 7], f32),), {})"
    },
    "aten.sigmoid.default": {
        "count": 3,
        "inputs": "((T([128, 1584, 1, 1], f32),), {})"
    },
    "aten.sigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([128, 240, 1, 1], f32), T([128, 240, 1, 1], f32)), {})"
    },
    "aten.silu_.default": {
        "count": 3,
        "inputs": "((T([128, 132, 1, 1], f32),), {})"
    },
    "aten.silu_backward.default": {
        "count": 1,
        "inputs": "((T([128, 240, 56, 56], f32), T([128, 240, 56, 56], f32)), {})"
    },
    "aten.split_with_sizes.default": {
        "count": 3,
        "inputs": "((T([128, 1584, 7, 7], f32), [792, 792], 1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([128, 240, 28, 28], f32), [2, 3], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 2,
        "inputs": "((T([128, 32, 112, 112], f32), T([128, 32, 112, 112], f32), 0), {})"
    }
}