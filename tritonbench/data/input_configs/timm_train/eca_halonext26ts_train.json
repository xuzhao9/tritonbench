{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([24, 3, 3, 3], f32), T([32, 24, 3, 3], f32), T([64, 32, 3, 3], f32), T([256, 64, 1, 1], f32), T([64, 64, 1, 1], f32), T([64, 16, 3, 3], f32), T([1, 1, 3], f32), T([256, 64, 1, 1], f32), T([64, 256, 1, 1], f32), T([64, 16, 3, 3], f32), T([1, 1, 3], f32), T([256, 64, 1, 1], f32), T([512, 256, 1, 1], f32), T([128, 256, 1, 1], f32), T([128, 16, 3, 3], f32), T([1, 1, 5], f32), T([512, 128, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 16, 3, 3], f32), T([1, 1, 5], f32), T([512, 128, 1, 1], f32), T([1024, 512, 1, 1], f32), T([256, 512, 1, 1], f32), T([256, 16, 3, 3], f32), T([1, 1, 5], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([128, 256, 1, 1], f32), T([384, 256, 1, 1], f32), T([23, 16], f32), T([23, 16], f32), T([1024, 256, 1, 1], f32), T([2048, 1024, 1, 1], f32), T([512, 1024, 1, 1], f32), T([128, 512, 1, 1], f32), T([640, 512, 1, 1], f32), T([23, 16], f32), T([23, 16], f32), T([2048, 512, 1, 1], f32), T([512, 2048, 1, 1], f32), T([128, 512, 1, 1], f32), T([640, 512, 1, 1], f32), T([23, 16], f32), T([23, 16], f32), T([2048, 512, 1, 1], f32), T([1000, 2048], f32)], [T([24, 3, 3, 3], f32), T([32, 24, 3, 3], f32), T([64, 32, 3, 3], f32), T([256, 64, 1, 1], f32), T([64, 64, 1, 1], f32), T([64, 16, 3, 3], f32), T([1, 1, 3], f32), T([256, 64, 1, 1], f32), T([64, 256, 1, 1], f32), T([64, 16, 3, 3], f32), T([1, 1, 3], f32), T([256, 64, 1, 1], f32), T([512, 256, 1, 1], f32), T([128, 256, 1, 1], f32), T([128, 16, 3, 3], f32), T([1, 1, 5], f32), T([512, 128, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 16, 3, 3], f32), T([1, 1, 5], f32), T([512, 128, 1, 1], f32), T([1024, 512, 1, 1], f32), T([256, 512, 1, 1], f32), T([256, 16, 3, 3], f32), T([1, 1, 5], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([128, 256, 1, 1], f32), T([384, 256, 1, 1], f32), T([23, 16], f32), T([23, 16], f32), T([1024, 256, 1, 1], f32), T([2048, 1024, 1, 1], f32), T([512, 1024, 1, 1], f32), T([128, 512, 1, 1], f32), T([640, 512, 1, 1], f32), T([23, 16], f32), T([23, 16], f32), T([2048, 512, 1, 1], f32), T([512, 2048, 1, 1], f32), T([128, 512, 1, 1], f32), T([640, 512, 1, 1], f32), T([23, 16], f32), T([23, 16], f32), T([2048, 512, 1, 1], f32), T([1000, 2048], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 1,
        "inputs": "((T([1024, 1, 64, 144], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([1024, 4, 64, 144], f32), T([1024, 4, 64, 144], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 1,
        "inputs": "((T([1024, 16, 2, 8, 2, 8], f32), [128, 128, 16, 16]), {})"
    },
    "aten.add.Tensor": {
        "count": 3,
        "inputs": "((T([128, 64, 64, 64], f32), T([128, 64, 64, 64], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 31,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([128, 2048], f32), T([2048, 1000], f32, stride=(1, 2048))), {})"
    },
    "aten.bmm.default": {
        "count": 1,
        "inputs": "((T([4096, 64, 144], f32), T([4096, 144, 16], f32, stride=(2304, 1, 144))), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([1024, 4, 144, 16], f32, stride=(9216, 2304, 1, 144)), T([1024, 4, 144, 32], f32)], 3), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 2048], f32),), {})"
    },
    "aten.constant_pad_nd.default": {
        "count": 1,
        "inputs": "((T([128, 384, 20, 20], f32), [-2, -2, -2, -2]), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([128, 512, 8, 8], f32), T([640, 512, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([128, 24, 128, 128], f32), T([128, 3, 256, 256], f32), T([24, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 3,
        "inputs": "((T([128, 2048, 8, 8], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([128, 24, 128, 128], f32), T([128, 24, 128, 128], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 2,
        "inputs": "((T([128, 64, 64, 64], f32, stride=(64, 1, 0, 0)), 4096), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 1,
        "inputs": "((T([128, 64, 128, 128], f32), [3, 3], [2, 2], [1, 1]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([128, 64, 64, 64], f32), T([128, 64, 128, 128], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([128, 64, 64, 64], i64)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([128, 2048, 8, 8], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 2,
        "inputs": "((T([262144, 23], f32), T([23, 16], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 2,
        "inputs": "((T([128, 64, 64, 64], f32), T([128, 64, 64, 64], f32)), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([128, 1000], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([128], i64), 1000), {})"
    },
    "aten.sigmoid.default": {
        "count": 1,
        "inputs": "((T([128, 1, 256], f32),), {})"
    },
    "aten.sigmoid_backward.default": {
        "count": 2,
        "inputs": "((T([128, 1, 64], f32), T([128, 1, 64], f32)), {})"
    },
    "aten.silu_.default": {
        "count": 2,
        "inputs": "((T([128, 2048, 8, 8], f32),), {})"
    },
    "aten.silu_backward.default": {
        "count": 1,
        "inputs": "((T([128, 24, 128, 128], f32), T([128, 24, 128, 128], f32)), {})"
    },
    "aten.slice_backward.default": {
        "count": 2,
        "inputs": "((T([32768, 8, 23], f32), [32768, 9, 23], 1, 0, 8, 1), {})"
    },
    "aten.split_with_sizes.default": {
        "count": 1,
        "inputs": "((T([1024, 1, 144, 80], f32, stride=(11520, 144, 1, 144)), [16, 64], -1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 2,
        "inputs": "((T([128, 64, 64, 64], f32), [2, 3], True), {})"
    },
    "aten.unfold_backward.default": {
        "count": 1,
        "inputs": "((T([128, 384, 2, 20, 12], f32), [128, 384, 20, 20], 2, 12, 8), {})"
    }
}