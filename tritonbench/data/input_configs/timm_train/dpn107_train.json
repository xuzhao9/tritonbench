{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([128, 3, 7, 7], f32), T([296, 128, 1, 1], f32), T([200, 128, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([200, 316, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([200, 336, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([200, 356, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([640, 376, 1, 1], f32), T([400, 376, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 704, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 768, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 832, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 896, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 960, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 1024, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 1088, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([1152, 1152, 1, 1], f32), T([800, 1152, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1216, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1280, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1344, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1408, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1472, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1536, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1600, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1664, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1728, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1792, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1856, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1920, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1984, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2048, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2112, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2176, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2240, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2304, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2368, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([2304, 2432, 1, 1], f32), T([1600, 2432, 1, 1], f32), T([1600, 32, 3, 3], f32), T([2176, 1600, 1, 1], f32), T([1600, 2432, 1, 1], f32), T([1600, 32, 3, 3], f32), T([2176, 1600, 1, 1], f32), T([1600, 2560, 1, 1], f32), T([1600, 32, 3, 3], f32), T([2176, 1600, 1, 1], f32), T([1000, 2688, 1, 1], f32)], [T([128, 3, 7, 7], f32), T([296, 128, 1, 1], f32), T([200, 128, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([200, 316, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([200, 336, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([200, 356, 1, 1], f32), T([200, 4, 3, 3], f32), T([276, 200, 1, 1], f32), T([640, 376, 1, 1], f32), T([400, 376, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 704, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 768, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 832, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 896, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 960, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 1024, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([400, 1088, 1, 1], f32), T([400, 8, 3, 3], f32), T([576, 400, 1, 1], f32), T([1152, 1152, 1, 1], f32), T([800, 1152, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1216, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1280, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1344, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1408, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1472, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1536, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1600, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1664, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1728, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1792, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1856, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1920, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 1984, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2048, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2112, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2176, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2240, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2304, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([800, 2368, 1, 1], f32), T([800, 16, 3, 3], f32), T([1088, 800, 1, 1], f32), T([2304, 2432, 1, 1], f32), T([1600, 2432, 1, 1], f32), T([1600, 32, 3, 3], f32), T([2176, 1600, 1, 1], f32), T([1600, 2432, 1, 1], f32), T([1600, 32, 3, 3], f32), T([2176, 1600, 1, 1], f32), T([1600, 2560, 1, 1], f32), T([1600, 32, 3, 3], f32), T([2176, 1600, 1, 1], f32), T([1000, 2688, 1, 1], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), T([32, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([32, 128, 56, 56], f32), T([32, 128, 56, 56], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 111,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([32, 2048, 7, 7], f32), T([32, 640, 7, 7], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 2688, 1, 1], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([32, 2688, 1, 1], f32), T([1000, 2688, 1, 1], f32), T([1000], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([32, 128, 112, 112], f32), T([32, 3, 224, 224], f32), T([128, 3, 7, 7], f32), [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([32, 2688, 7, 7], f32), T([2688], f32), T([2688], f32), T([2688], f32), T([2688], f32), True, 0.1, 0.001), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([32, 128, 112, 112], f32), T([32, 128, 112, 112], f32), T([128], f32), T([128], f32), T([128], f32), T([128], f32), T([128], f32), 0.001, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([32, 2688, 7, 7], f32, stride=(2688, 1, 0, 0)), 49), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 1,
        "inputs": "((T([32, 128, 112, 112], f32), [3, 3], [2, 2], [1, 1]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([32, 128, 56, 56], f32), T([32, 128, 112, 112], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([32, 128, 56, 56], i64)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([32, 2688, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([32, 1000], f32), T([32], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), T([32], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([32], i64), 1000), {})"
    },
    "aten.relu.default": {
        "count": 1,
        "inputs": "((T([32, 2688, 7, 7], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([32, 2560, 7, 7], f32),), {})"
    },
    "aten.slice_backward.default": {
        "count": 1,
        "inputs": "((T([32, 256, 56, 56], f32), [32, 296, 56, 56], 1, 0, 256, 1), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([32, 128, 112, 112], f32), T([32, 128, 112, 112], f32), 0), {})"
    }
}