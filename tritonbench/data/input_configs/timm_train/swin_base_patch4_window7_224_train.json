{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([128, 3, 4, 4], f32), T([384, 128], f32), T([128, 128], f32), T([512, 128], f32), T([128, 512], f32), T([384, 128], f32), T([128, 128], f32), T([512, 128], f32), T([128, 512], f32), T([256, 512], f32), T([768, 256], f32), T([256, 256], f32), T([1024, 256], f32), T([256, 1024], f32), T([768, 256], f32), T([256, 256], f32), T([1024, 256], f32), T([256, 1024], f32), T([512, 1024], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1024, 2048], f32), T([3072, 1024], f32), T([1024, 1024], f32), T([4096, 1024], f32), T([1024, 4096], f32), T([3072, 1024], f32), T([1024, 1024], f32), T([4096, 1024], f32), T([1024, 4096], f32), T([1000, 1024], f32)], [T([128, 3, 4, 4], f32), T([384, 128], f32), T([128, 128], f32), T([512, 128], f32), T([128, 512], f32), T([384, 128], f32), T([128, 128], f32), T([512, 128], f32), T([128, 512], f32), T([256, 512], f32), T([768, 256], f32), T([256, 256], f32), T([1024, 256], f32), T([256, 1024], f32), T([768, 256], f32), T([256, 256], f32), T([1024, 256], f32), T([256, 1024], f32), T([512, 1024], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1536, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1024, 2048], f32), T([3072, 1024], f32), T([1024, 1024], f32), T([4096, 1024], f32), T([1024, 4096], f32), T([3072, 1024], f32), T([1024, 1024], f32), T([4096, 1024], f32), T([1024, 4096], f32), T([1000, 1024], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64, 1000], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 2,
        "inputs": "((T([64, 32, 49, 49], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 2,
        "inputs": "((T([4096, 4, 49, 49], f32), T([4096, 4, 49, 49], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 2,
        "inputs": "((T([64, 8, 7, 8, 7, 128], f32), [64, 56, 56, 128]), {})"
    },
    "aten.add.Tensor": {
        "count": 4,
        "inputs": "((T([64, 49, 1024], f32), T([64, 49, 1024], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([64, 1024], f32), T([1024, 1000], f32, stride=(1, 1024))), {})"
    },
    "aten.bernoulli_.float": {
        "count": 1,
        "inputs": "((T([64, 1, 1], f32), 0.8999999985098839), {})"
    },
    "aten.bmm.default": {
        "count": 2,
        "inputs": "((T([16384, 49, 49], f32), T([16384, 49, 32], f32, stride=(1568, 1, 49))), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 1024], f32),), {})"
    },
    "aten.constant_pad_nd.default": {
        "count": 3,
        "inputs": "((T([64, 56, 56, 128], f32), [0, 0, 0, 0, 0, 0]), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([64, 3, 224, 224], f32), T([128, 3, 4, 4], f32), T([128], f32), [4, 4], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([64, 128, 56, 56], f32, stride=(401408, 1, 7168, 128)), T([64, 3, 224, 224], f32), T([128, 3, 4, 4], f32), [128], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([64, 7, 7, 1024], f32, stride=(1024, 0, 0, 1)), 49), {})"
    },
    "aten.div_.Tensor": {
        "count": 1,
        "inputs": "((T([64, 1, 1], f32), 0.8999999985098839), {})"
    },
    "aten.gelu.default": {
        "count": 2,
        "inputs": "((T([64, 49, 4096], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 2,
        "inputs": "((T([64, 3136, 512], f32), T([64, 3136, 512], f32)), {})"
    },
    "aten.index.Tensor": {
        "count": 2,
        "inputs": "((T([169, 32], f32), [T([2401], i64)]), {})"
    },
    "aten.index_put.default": {
        "count": 2,
        "inputs": "((T([169, 4], f32), [T([2401], i64)], T([2401, 4], f32, stride=(1, 2401)), True), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([64, 7, 7, 1024], f32), [1, 2]), {})"
    },
    "aten.mm.default": {
        "count": 2,
        "inputs": "((T([384, 200704], f32, stride=(1, 384)), T([200704, 128], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 2,
        "inputs": "((T([4096, 4, 49, 32], f32), 0.1767766952966369), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 2,
        "inputs": "((T([64, 49, 1024], f32), [1024], T([1024], f32), T([1024], f32), 1e-05), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 1,
        "inputs": "((T([64, 56, 56, 128], f32), T([64, 56, 56, 128], f32, stride=(401408, 56, 1, 3136)), [128], T([64, 56, 56, 1], f32), T([64, 56, 56, 1], f32), T([128], f32), T([128], f32), [True, True, True]), {})"
    },
    "aten.new_empty.default": {
        "count": 2,
        "inputs": "((T([64, 49, 1024], f32), [64, 1, 1]), {'pin_memory': False})"
    },
    "aten.new_zeros.default": {
        "count": 2,
        "inputs": "((T([2401, 4], f32, stride=(1, 2401)), [169, 4]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([64, 1000], f32), T([64], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([64], i64), 1000), {})"
    },
    "aten.roll.default": {
        "count": 1,
        "inputs": "((T([64, 56, 56, 128], f32), [3, 3], [2, 1]), {})"
    },
    "aten.stack.default": {
        "count": 2,
        "inputs": "(([T([4096, 4, 49, 32], f32), T([4096, 4, 49, 32], f32, stride=(6272, 1568, 1, 49)), T([4096, 4, 49, 32], f32)],), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 2,
        "inputs": "((T([200704, 384], f32), [0], True), {})"
    },
    "aten.unbind.int": {
        "count": 2,
        "inputs": "((T([3, 64, 32, 49, 32], f32, stride=(1024, 150528, 32, 3072, 1)),), {})"
    }
}