{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([32, 3, 3, 3], f32), T([64, 32, 3, 3], f32), T([128, 64, 1, 1], f32), T([32, 64, 1, 1], f32), T([64, 32, 3, 3], f32), T([64, 64, 1, 1], f32), T([64, 128, 1, 1], f32), T([128, 64, 3, 3], f32), T([128, 128, 1, 1], f32), T([64, 64, 1, 1], f32), T([64, 64, 3, 3], f32), T([64, 64, 1, 1], f32), T([64, 64, 3, 3], f32), T([64, 64, 1, 1], f32), T([128, 128, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 256, 1, 1], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([256, 256, 1, 1], f32), T([512, 256, 3, 3], f32), T([512, 512, 1, 1], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([512, 512, 1, 1], f32), T([1024, 512, 3, 3], f32), T([1024, 1024, 1, 1], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([1024, 1024, 1, 1], f32), T([1000, 1024], f32)], [T([32, 3, 3, 3], f32), T([64, 32, 3, 3], f32), T([128, 64, 1, 1], f32), T([32, 64, 1, 1], f32), T([64, 32, 3, 3], f32), T([64, 64, 1, 1], f32), T([64, 128, 1, 1], f32), T([128, 64, 3, 3], f32), T([128, 128, 1, 1], f32), T([64, 64, 1, 1], f32), T([64, 64, 3, 3], f32), T([64, 64, 1, 1], f32), T([64, 64, 3, 3], f32), T([64, 64, 1, 1], f32), T([128, 128, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 256, 1, 1], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 128, 1, 1], f32), T([256, 256, 1, 1], f32), T([512, 256, 3, 3], f32), T([512, 512, 1, 1], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([256, 256, 3, 3], f32), T([256, 256, 1, 1], f32), T([512, 512, 1, 1], f32), T([1024, 512, 3, 3], f32), T([1024, 1024, 1, 1], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([512, 512, 3, 3], f32), T([512, 512, 1, 1], f32), T([1024, 1024, 1, 1], f32), T([1000, 1024], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([64, 64, 128, 128], f32), T([64, 64, 128, 128], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 67,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([64, 1024], f32), T([1024, 1000], f32, stride=(1, 1024))), {})"
    },
    "aten.cat.default": {
        "count": 2,
        "inputs": "(([T([64, 512, 8, 8], f32, stride=(65536, 64, 8, 1)), T([64, 512, 8, 8], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 1024], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 4,
        "inputs": "((T([64, 512, 8, 8], f32), T([512, 512, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([64, 32, 256, 256], f32), T([64, 3, 256, 256], f32), T([32, 3, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 9,
        "inputs": "((T([64, 512, 8, 8], f32), T([512], f32), T([512], f32), T([512], f32), T([512], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([64, 32, 256, 256], f32), T([64, 32, 256, 256], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([64, 1024, 8, 8], f32, stride=(1024, 1, 0, 0)), 64), {})"
    },
    "aten.leaky_relu_.default": {
        "count": 9,
        "inputs": "((T([64, 512, 8, 8], f32),), {})"
    },
    "aten.leaky_relu_backward.default": {
        "count": 1,
        "inputs": "((T([64, 32, 256, 256], f32), T([64, 32, 256, 256], f32), 0.01, True), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([64, 1024, 8, 8], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 64], f32, stride=(1, 1000)), T([64, 1024], f32)), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([64, 1000], f32), T([64], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([64], i64), 1000), {})"
    },
    "aten.split.Tensor": {
        "count": 1,
        "inputs": "((T([64, 1024, 8, 8], f32), 512, 1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), [0], True), {})"
    }
}