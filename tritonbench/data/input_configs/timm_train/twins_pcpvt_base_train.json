{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([64, 3, 4, 4], f32), T([128, 64, 2, 2], f32), T([320, 128, 2, 2], f32), T([512, 320, 2, 2], f32), T([64, 64], f32), T([128, 64], f32), T([64, 64], f32), T([64, 64, 8, 8], f32), T([512, 64], f32), T([64, 512], f32), T([64, 64], f32), T([128, 64], f32), T([64, 64], f32), T([64, 64, 8, 8], f32), T([512, 64], f32), T([64, 512], f32), T([64, 64], f32), T([128, 64], f32), T([64, 64], f32), T([64, 64, 8, 8], f32), T([512, 64], f32), T([64, 512], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([512, 512], f32), T([1024, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([512, 512], f32), T([1024, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([512, 512], f32), T([1024, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1000, 512], f32)], [T([64, 3, 4, 4], f32), T([128, 64, 2, 2], f32), T([320, 128, 2, 2], f32), T([512, 320, 2, 2], f32), T([64, 64], f32), T([128, 64], f32), T([64, 64], f32), T([64, 64, 8, 8], f32), T([512, 64], f32), T([64, 512], f32), T([64, 64], f32), T([128, 64], f32), T([64, 64], f32), T([64, 64, 8, 8], f32), T([512, 64], f32), T([64, 512], f32), T([64, 64], f32), T([128, 64], f32), T([64, 64], f32), T([64, 64, 8, 8], f32), T([512, 64], f32), T([64, 512], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([128, 128], f32), T([256, 128], f32), T([128, 128], f32), T([128, 128, 4, 4], f32), T([1024, 128], f32), T([128, 1024], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([320, 320], f32), T([640, 320], f32), T([320, 320], f32), T([320, 320, 2, 2], f32), T([1280, 320], f32), T([320, 1280], f32), T([512, 512], f32), T([1024, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([512, 512], f32), T([1024, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([512, 512], f32), T([1024, 512], f32), T([512, 512], f32), T([2048, 512], f32), T([512, 2048], f32), T([1000, 512], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64, 1000], f32), 1, f32), {})"
    },
    "aten._scaled_dot_product_efficient_attention.default": {
        "count": 3,
        "inputs": "((T([64, 8, 49, 64], f32, stride=(25088, 64, 512, 1)), T([64, 8, 49, 64], f32, stride=(50176, 64, 1024, 1)), T([64, 8, 49, 64], f32, stride=(50176, 64, 1024, 1)), None, True), {})"
    },
    "aten._scaled_dot_product_efficient_attention_backward.default": {
        "count": 3,
        "inputs": "((T([64, 1, 3136, 64], f32), T([64, 1, 3136, 64], f32), T([64, 1, 49, 64], f32, stride=(6272, 64, 128, 1)), T([64, 1, 49, 64], f32, stride=(6272, 64, 128, 1)), None, T([64, 1, 3136, 64], f32), T([64, 1, 3136], f32), T([], i64), T([], i64), 0.0, [True, True, True, False]), {})"
    },
    "aten._unsafe_view.default": {
        "count": 3,
        "inputs": "((T([64, 49, 2, 1, 64], f32), [64, 49, 128]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([64, 64, 56, 56], f32), T([64, 64, 56, 56], f32, stride=(200704, 1, 3584, 64))), {})"
    },
    "aten.add_.Tensor": {
        "count": 1,
        "inputs": "((T([64, 512, 7, 7], f32, stride=(25088, 1, 3584, 512)), T([64, 512, 7, 7], f32, stride=(25088, 1, 3584, 512))), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([64, 512], f32), T([512, 1000], f32, stride=(1, 512))), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 512], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([64, 512, 7, 7], f32, stride=(25088, 1, 3584, 512)), T([512, 1, 3, 3], f32), T([512], f32), [1, 1], [1, 1], [1, 1], False, [0, 0], 512), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([64, 64, 56, 56], f32, stride=(200704, 1, 3584, 64)), T([64, 3, 224, 224], f32), T([64, 3, 4, 4], f32), [64], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.copy_.default": {
        "count": 3,
        "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32, stride=(4096, 1, 512, 64))), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([64, 49, 512], f32, stride=(512, 0, 1)), 49), {})"
    },
    "aten.gelu.default": {
        "count": 3,
        "inputs": "((T([64, 49, 2048], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 3,
        "inputs": "((T([64, 3136, 512], f32), T([64, 3136, 512], f32)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([64, 49, 512], f32), [1]), {})"
    },
    "aten.mm.default": {
        "count": 3,
        "inputs": "((T([128, 3136], f32, stride=(1, 128)), T([3136, 64], f32)), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 7,
        "inputs": "((T([64, 49, 512], f32), [512], T([512], f32), T([512], f32), 1e-06), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 1,
        "inputs": "((T([64, 3136, 64], f32, stride=(200704, 1, 3136)), T([64, 3136, 64], f32, stride=(200704, 1, 3136)), [64], T([64, 3136, 1], f32), T([64, 3136, 1], f32), T([64], f32), T([64], f32), [True, True, True]), {})"
    },
    "aten.new_empty_strided.default": {
        "count": 3,
        "inputs": "((T([64, 64, 8, 8], f32, stride=(4096, 1, 512, 64)), [64, 64, 8, 8], [4096, 64, 8, 1]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([64, 1000], f32), T([64], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([64], i64), 1000), {})"
    },
    "aten.stack.default": {
        "count": 3,
        "inputs": "(([T([64, 1, 49, 64], f32), T([64, 1, 49, 64], f32)],), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 3,
        "inputs": "((T([3136, 128], f32), [0], True), {})"
    },
    "aten.unbind.int": {
        "count": 3,
        "inputs": "((T([2, 64, 8, 49, 64], f32, stride=(512, 50176, 64, 1024, 1)),), {})"
    }
}