{
    "aten._foreach_add.List": [
        {
            "count": 1,
            "inputs": "(([T([384, 3, 16, 16], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1000, 384], f32)], [T([384, 3, 16, 16], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([196, 196], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1, 1, 384], f32), T([1, 1, 384], f32), T([1000, 384], f32)]), {'alpha': 0.0001})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32), [25088, 384]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([25088, 1536], f32), [128, 196, 1536]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 384, 196], f32), [49152, 196]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32, stride=(75264, 1, 196)), T([128, 196, 384], f32, stride=(75264, 1, 196))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 1536], f32), T([1536], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32, stride=(75264, 1, 196)), T([128, 196, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32), T([128, 196, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32), T([128, 196, 384], f32, stride=(75264, 1, 196))), {})"
        }
    ],
    "aten.addcmul.default": [
        {
            "count": 25,
            "inputs": "((T([1, 1, 384], f32), T([1, 1, 384], f32), T([128, 196, 384], f32, stride=(75264, 1, 196))), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 12,
            "inputs": "((T([196], f32), T([49152, 196], f32), T([196, 196], f32, stride=(1, 196))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([384], f32), T([25088, 1536], f32), T([1536, 384], f32, stride=(1, 1536))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000], f32), T([128, 384], f32), T([384, 1000], f32, stride=(1, 384))), {})"
        }
    ],
    "aten.clone.default": [
        {
            "count": 37,
            "inputs": "((T([384], f32),), {})"
        },
        {
            "count": 12,
            "inputs": "((T([196], f32),), {})"
        },
        {
            "count": 12,
            "inputs": "((T([1536], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([384, 3, 16, 16], f32),), {})"
        },
        {
            "count": 50,
            "inputs": "((T([1, 1, 384], f32),), {})"
        },
        {
            "count": 12,
            "inputs": "((T([196, 196], f32),), {})"
        },
        {
            "count": 12,
            "inputs": "((T([1536, 384], f32),), {})"
        },
        {
            "count": 12,
            "inputs": "((T([384, 1536], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000, 384], f32),), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 1,
            "inputs": "((T([128, 3, 224, 224], f32), T([384, 3, 16, 16], f32), T([384], f32), [16, 16], [0, 0], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 384, 14, 14], f32, stride=(75264, 1, 5376, 384)), T([128, 3, 224, 224], f32), T([384, 3, 16, 16], f32), [384], [16, 16], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 1,
            "inputs": "((T([128, 196, 384], f32, stride=(384, 0, 1)), 196), {})"
        }
    ],
    "aten.gelu.default": [
        {
            "count": 12,
            "inputs": "((T([128, 196, 1536], f32),), {})"
        }
    ],
    "aten.gelu_backward.default": [
        {
            "count": 12,
            "inputs": "((T([128, 196, 1536], f32), T([128, 196, 1536], f32)), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 1,
            "inputs": "((T([128, 196, 384], f32, stride=(75264, 1, 196)), [1]), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 12,
            "inputs": "((T([25088, 384], f32), T([384, 1536], f32, stride=(1, 384))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([1000, 384], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000, 128], f32, stride=(1, 1000)), T([128, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([25088, 384], f32), T([384, 1536], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([384, 25088], f32, stride=(1, 384)), T([25088, 1536], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([1536, 25088], f32, stride=(1, 1536)), T([25088, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([25088, 1536], f32), T([1536, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([49152, 196], f32), T([196, 196], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([196, 49152], f32, stride=(1, 196)), T([49152, 196], f32)), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 25,
            "inputs": "((T([128, 196, 384], f32, stride=(75264, 1, 196)), 1), {})"
        },
        {
            "count": 25,
            "inputs": "((T([1, 1, 384], f32), 1), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 12,
            "inputs": "((T([384], f32), T([128, 196, 384], f32, stride=(75264, 1, 196))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([384], f32), T([128, 196, 384], f32)), {})"
        },
        {
            "count": 25,
            "inputs": "((T([128, 196, 384], f32), T([128, 196, 384], f32, stride=(75264, 1, 196))), {})"
        },
        {
            "count": 13,
            "inputs": "((T([128, 196, 384], f32), T([1, 1, 384], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 196, 384], f32), T([384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32), T([128, 196, 384], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32, stride=(75264, 1, 196)), T([128, 196, 384], f32, stride=(75264, 1, 196))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 384], f32, stride=(75264, 1, 196)), T([1, 1, 384], f32)), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([128, 1000], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([128], i64), None, 1, -100), {})"
        }
    ],
    "aten.random_.to": [
        {
            "count": 1,
            "inputs": "((T([128], i64), 1000), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), [0], True), {})"
        },
        {
            "count": 50,
            "inputs": "((T([128, 196, 384], f32), [0, 1], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([25088, 384], f32), [0], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 196, 1536], f32), [0, 1], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([49152, 196], f32), [0], True), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 196, 384], f32, stride=(75264, 1, 196)), [0, 1], True), {})"
        }
    ]
}