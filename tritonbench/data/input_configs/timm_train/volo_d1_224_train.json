{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([64, 3, 7, 7], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([192, 64, 4, 4], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([384, 192, 2, 2], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1000, 384], f32), T([1000, 384], f32)], [T([64, 3, 7, 7], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([192, 64, 4, 4], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([192, 192], f32), T([486, 192], f32), T([192, 192], f32), T([576, 192], f32), T([192, 576], f32), T([384, 192, 2, 2], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1152, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1152, 384], f32), T([384, 1152], f32), T([1000, 384], f32), T([1000, 384], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64, 1000], f32), 1, f32), {})"
    },
    "aten._scaled_dot_product_efficient_attention.default": {
        "count": 14,
        "inputs": "((T([64, 12, 196, 32], f32, stride=(225792, 32, 1152, 1)), T([64, 12, 196, 32], f32, stride=(225792, 32, 1152, 1)), T([64, 12, 196, 32], f32, stride=(225792, 32, 1152, 1)), None, True), {})"
    },
    "aten._scaled_dot_product_efficient_attention_backward.default": {
        "count": 14,
        "inputs": "((T([64, 12, 196, 32], f32, stride=(75264, 32, 384, 1)), T([64, 12, 196, 32], f32, stride=(225792, 32, 1152, 1)), T([64, 12, 196, 32], f32, stride=(225792, 32, 1152, 1)), T([64, 12, 196, 32], f32, stride=(225792, 32, 1152, 1)), None, T([64, 12, 196, 32], f32, stride=(75264, 32, 384, 1)), T([64, 12, 224], f32), T([], i64), T([], i64), 0.0, [True, True, True, False]), {})"
    },
    "aten._softmax.default": {
        "count": 2,
        "inputs": "((T([64, 12, 1, 197], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 4,
        "inputs": "((T([64, 6, 196, 9, 9], f32), T([64, 6, 196, 9, 9], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 4,
        "inputs": "((T([64, 196, 6, 9, 9], f32), [64, 14, 14, 486]), {})"
    },
    "aten.add.Tensor": {
        "count": 4,
        "inputs": "((T([64, 28, 28, 192], f32), T([64, 28, 28, 192], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 3,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([64, 384], f32, stride=(75648, 1)), T([384, 1000], f32, stride=(1, 384))), {})"
    },
    "aten.avg_pool2d.default": {
        "count": 4,
        "inputs": "((T([64, 192, 28, 28], f32, stride=(150528, 1, 5376, 192)), [2, 2], [2, 2], [0, 0], True), {})"
    },
    "aten.avg_pool2d_backward.default": {
        "count": 4,
        "inputs": "((T([64, 192, 14, 14], f32, stride=(37632, 1, 2688, 192)), T([64, 192, 28, 28], f32, stride=(150528, 1, 5376, 192)), [2, 2], [2, 2], [0, 0], True, True, None), {})"
    },
    "aten.bmm.default": {
        "count": 4,
        "inputs": "((T([75264, 9, 32], f32), T([75264, 32, 9], f32, stride=(288, 1, 32))), {})"
    },
    "aten.cat.default": {
        "count": 2,
        "inputs": "(([T([64, 1, 384], f32), T([64, 196, 384], f32, stride=(75648, 384, 1))], 1), {})"
    },
    "aten.clone.default": {
        "count": 2,
        "inputs": "((T([1000, 384], f32),), {})"
    },
    "aten.col2im.default": {
        "count": 8,
        "inputs": "((T([64, 1728, 196], f32), [28, 28], [3, 3], [1, 1], [1, 1], [2, 2]), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([64, 192, 28, 28], f32), T([384, 192, 2, 2], f32), T([384], f32), [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([64, 64, 112, 112], f32), T([64, 3, 224, 224], f32), T([64, 3, 7, 7], f32), [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 3,
        "inputs": "((T([64, 64, 112, 112], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 3,
        "inputs": "((T([64, 64, 112, 112], f32), T([64, 64, 112, 112], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.gelu.default": {
        "count": 2,
        "inputs": "((T([64, 1, 1152], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 4,
        "inputs": "((T([64, 28, 28, 576], f32), T([64, 28, 28, 576], f32)), {})"
    },
    "aten.im2col.default": {
        "count": 8,
        "inputs": "((T([64, 192, 28, 28], f32, stride=(150528, 1, 5376, 192)), [3, 3], [1, 1], [1, 1], [2, 2]), {})"
    },
    "aten.max.dim": {
        "count": 1,
        "inputs": "((T([64, 196, 1000], f32), 1), {})"
    },
    "aten.mm.default": {
        "count": 4,
        "inputs": "((T([486, 12544], f32, stride=(1, 486)), T([12544, 192], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 4,
        "inputs": "((T([64, 6, 196, 9, 9], f32), 0.1767766952966369), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 2,
        "inputs": "((T([64, 1, 384], f32), [384], T([384], f32), T([384], f32), 1e-05), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 8,
        "inputs": "((T([64, 28, 28, 192], f32), T([64, 28, 28, 192], f32, stride=(150528, 28, 1, 784)), [192], T([64, 28, 28, 1], f32), T([64, 28, 28, 1], f32), T([192], f32), T([192], f32), [True, True, True]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([64, 1000], f32), T([64], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([64, 1000], f32), T([64], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([64], i64), 1000), {})"
    },
    "aten.relu_.default": {
        "count": 3,
        "inputs": "((T([64, 64, 112, 112], f32),), {})"
    },
    "aten.scatter.src": {
        "count": 1,
        "inputs": "((T([64, 196, 1000], f32), 1, T([64, 1, 1000], i64), T([64, 1, 1000], f32)), {})"
    },
    "aten.select_backward.default": {
        "count": 1,
        "inputs": "((T([64, 384], f32), [64, 197, 384], 1, 0), {})"
    },
    "aten.slice_backward.default": {
        "count": 4,
        "inputs": "((T([64, 1, 384], f32), [64, 197, 384], 1, 0, 1, 1), {})"
    },
    "aten.stack.default": {
        "count": 14,
        "inputs": "(([T([64, 12, 196, 32], f32, stride=(75264, 32, 384, 1)), T([64, 12, 196, 32], f32, stride=(75264, 32, 384, 1)), T([64, 12, 196, 32], f32, stride=(75264, 32, 384, 1))],), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 4,
        "inputs": "((T([12544, 486], f32), [0], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 3,
        "inputs": "((T([64, 64, 112, 112], f32), T([64, 64, 112, 112], f32), 0), {})"
    },
    "aten.unbind.int": {
        "count": 2,
        "inputs": "((T([2, 64, 12, 197, 32], f32, stride=(384, 151296, 32, 768, 1)),), {})"
    }
}