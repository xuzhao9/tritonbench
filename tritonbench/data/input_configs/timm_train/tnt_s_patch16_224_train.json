{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([24, 3, 7, 7], f32), T([384, 384], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1000, 384], f32)], [T([24, 3, 7, 7], f32), T([384, 384], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([48, 24], f32), T([24, 24], f32), T([24, 24], f32), T([96, 24], f32), T([24, 96], f32), T([384, 384], f32), T([768, 384], f32), T([384, 384], f32), T([384, 384], f32), T([1536, 384], f32), T([384, 1536], f32), T([1000, 384], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 12,
        "inputs": "((T([128, 6, 197, 197], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 12,
        "inputs": "((T([25088, 4, 16, 16], f32), T([25088, 4, 16, 16], f32), -1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 12,
        "inputs": "((T([25088, 16, 2, 4, 6], f32), [25088, 16, 48]), {})"
    },
    "aten.add.Tensor": {
        "count": 48,
        "inputs": "((T([25088, 16, 24], f32), T([25088, 16, 24], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([128, 384], f32, stride=(75648, 1)), T([384, 1000], f32, stride=(1, 384))), {})"
    },
    "aten.bmm.default": {
        "count": 12,
        "inputs": "((T([100352, 16, 16], f32), T([100352, 16, 6], f32, stride=(96, 1, 16))), {})"
    },
    "aten.cat.default": {
        "count": 12,
        "inputs": "(([T([128, 1, 384], f32, stride=(75648, 384, 1)), T([128, 196, 384], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 384], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([25088, 3, 16, 16], f32), T([24, 3, 7, 7], f32), T([24], f32), [4, 4], [3, 3], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([25088, 24, 4, 4], f32, stride=(384, 1, 96, 24)), T([25088, 3, 16, 16], f32), T([24, 3, 7, 7], f32), [24], [4, 4], [3, 3], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.gelu.default": {
        "count": 12,
        "inputs": "((T([128, 197, 1536], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 12,
        "inputs": "((T([25088, 16, 96], f32), T([25088, 16, 96], f32)), {})"
    },
    "aten.im2col.default": {
        "count": 1,
        "inputs": "((T([128, 3, 224, 224], f32), [16, 16], [1, 1], [0, 0], [16, 16]), {})"
    },
    "aten.mm.default": {
        "count": 12,
        "inputs": "((T([401408, 48], f32), T([48, 24], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 24,
        "inputs": "((T([128, 6, 197, 197], f32), 0.125), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 25,
        "inputs": "((T([128, 197, 384], f32), [384], T([384], f32), T([384], f32), 1e-05), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 24,
        "inputs": "((T([25088, 16, 24], f32), T([25088, 16, 24], f32, stride=(384, 1, 16)), [24], T([25088, 16, 1], f32), T([25088, 16, 1], f32), T([24], f32), T([24], f32), [True, True, True]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([128, 1000], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([128], i64), 1000), {})"
    },
    "aten.select_backward.default": {
        "count": 1,
        "inputs": "((T([128, 384], f32), [128, 197, 384], 1, 0), {})"
    },
    "aten.slice_backward.default": {
        "count": 12,
        "inputs": "((T([128, 1, 384], f32, stride=(75648, 384, 1)), [128, 197, 384], 1, 0, 1, 1), {})"
    },
    "aten.stack.default": {
        "count": 12,
        "inputs": "(([T([25088, 4, 16, 6], f32), T([25088, 4, 16, 6], f32, stride=(384, 96, 1, 16))],), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([25088, 24, 4, 4], f32, stride=(384, 1, 96, 24)), [0], True), {})"
    },
    "aten.unbind.int": {
        "count": 12,
        "inputs": "((T([2, 128, 6, 197, 64], f32, stride=(384, 151296, 64, 768, 1)),), {})"
    }
}