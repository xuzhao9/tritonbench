{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([32, 3, 3, 3], f32), T([32, 32, 3, 3], f32), T([64, 32, 3, 3], f32), T([80, 64, 1, 1], f32), T([192, 80, 3, 3], f32), T([64, 192, 1, 1], f32), T([48, 192, 1, 1], f32), T([64, 48, 5, 5], f32), T([64, 192, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([32, 192, 1, 1], f32), T([64, 256, 1, 1], f32), T([48, 256, 1, 1], f32), T([64, 48, 5, 5], f32), T([64, 256, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([64, 256, 1, 1], f32), T([64, 288, 1, 1], f32), T([48, 288, 1, 1], f32), T([64, 48, 5, 5], f32), T([64, 288, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([64, 288, 1, 1], f32), T([384, 288, 3, 3], f32), T([64, 288, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([192, 768, 1, 1], f32), T([128, 768, 1, 1], f32), T([128, 128, 1, 7], f32), T([192, 128, 7, 1], f32), T([128, 768, 1, 1], f32), T([128, 128, 7, 1], f32), T([128, 128, 1, 7], f32), T([128, 128, 7, 1], f32), T([192, 128, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 1, 7], f32), T([192, 160, 7, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 7, 1], f32), T([160, 160, 1, 7], f32), T([160, 160, 7, 1], f32), T([192, 160, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 1, 7], f32), T([192, 160, 7, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 7, 1], f32), T([160, 160, 1, 7], f32), T([160, 160, 7, 1], f32), T([192, 160, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([192, 192, 1, 7], f32), T([192, 192, 7, 1], f32), T([192, 768, 1, 1], f32), T([192, 192, 7, 1], f32), T([192, 192, 1, 7], f32), T([192, 192, 7, 1], f32), T([192, 192, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([320, 192, 3, 3], f32), T([192, 768, 1, 1], f32), T([192, 192, 1, 7], f32), T([192, 192, 7, 1], f32), T([192, 192, 3, 3], f32), T([320, 1280, 1, 1], f32), T([384, 1280, 1, 1], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([448, 1280, 1, 1], f32), T([384, 448, 3, 3], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([192, 1280, 1, 1], f32), T([320, 2048, 1, 1], f32), T([384, 2048, 1, 1], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([448, 2048, 1, 1], f32), T([384, 448, 3, 3], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([192, 2048, 1, 1], f32), T([1000, 2048], f32)], [T([32, 3, 3, 3], f32), T([32, 32, 3, 3], f32), T([64, 32, 3, 3], f32), T([80, 64, 1, 1], f32), T([192, 80, 3, 3], f32), T([64, 192, 1, 1], f32), T([48, 192, 1, 1], f32), T([64, 48, 5, 5], f32), T([64, 192, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([32, 192, 1, 1], f32), T([64, 256, 1, 1], f32), T([48, 256, 1, 1], f32), T([64, 48, 5, 5], f32), T([64, 256, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([64, 256, 1, 1], f32), T([64, 288, 1, 1], f32), T([48, 288, 1, 1], f32), T([64, 48, 5, 5], f32), T([64, 288, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([64, 288, 1, 1], f32), T([384, 288, 3, 3], f32), T([64, 288, 1, 1], f32), T([96, 64, 3, 3], f32), T([96, 96, 3, 3], f32), T([192, 768, 1, 1], f32), T([128, 768, 1, 1], f32), T([128, 128, 1, 7], f32), T([192, 128, 7, 1], f32), T([128, 768, 1, 1], f32), T([128, 128, 7, 1], f32), T([128, 128, 1, 7], f32), T([128, 128, 7, 1], f32), T([192, 128, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 1, 7], f32), T([192, 160, 7, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 7, 1], f32), T([160, 160, 1, 7], f32), T([160, 160, 7, 1], f32), T([192, 160, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 1, 7], f32), T([192, 160, 7, 1], f32), T([160, 768, 1, 1], f32), T([160, 160, 7, 1], f32), T([160, 160, 1, 7], f32), T([160, 160, 7, 1], f32), T([192, 160, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([192, 192, 1, 7], f32), T([192, 192, 7, 1], f32), T([192, 768, 1, 1], f32), T([192, 192, 7, 1], f32), T([192, 192, 1, 7], f32), T([192, 192, 7, 1], f32), T([192, 192, 1, 7], f32), T([192, 768, 1, 1], f32), T([192, 768, 1, 1], f32), T([320, 192, 3, 3], f32), T([192, 768, 1, 1], f32), T([192, 192, 1, 7], f32), T([192, 192, 7, 1], f32), T([192, 192, 3, 3], f32), T([320, 1280, 1, 1], f32), T([384, 1280, 1, 1], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([448, 1280, 1, 1], f32), T([384, 448, 3, 3], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([192, 1280, 1, 1], f32), T([320, 2048, 1, 1], f32), T([384, 2048, 1, 1], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([448, 2048, 1, 1], f32), T([384, 448, 3, 3], f32), T([384, 384, 1, 3], f32), T([384, 384, 3, 1], f32), T([192, 2048, 1, 1], f32), T([1000, 2048], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 3,
        "inputs": "((T([128, 192, 35, 35], f32), T([128, 192, 35, 35], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 94,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([128, 2048], f32), T([2048, 1000], f32, stride=(1, 2048))), {})"
    },
    "aten.avg_pool2d.default": {
        "count": 1,
        "inputs": "((T([128, 2048, 8, 8], f32), [3, 3], [1, 1], [1, 1]), {})"
    },
    "aten.avg_pool2d_backward.default": {
        "count": 1,
        "inputs": "((T([128, 192, 35, 35], f32), T([128, 192, 35, 35], f32), [3, 3], [1, 1], [1, 1], False, True, None), {})"
    },
    "aten.cat.default": {
        "count": 2,
        "inputs": "(([T([128, 320, 8, 8], f32), T([128, 768, 8, 8], f32), T([128, 768, 8, 8], f32), T([128, 192, 8, 8], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 2048], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([128, 2048, 8, 8], f32), T([192, 2048, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([128, 32, 149, 149], f32), T([128, 3, 299, 299], f32), T([32, 3, 3, 3], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 2,
        "inputs": "((T([128, 448, 8, 8], f32), T([448], f32), T([448], f32), T([448], f32), T([448], f32), True, 0.1, 0.001), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([128, 32, 149, 149], f32), T([128, 32, 149, 149], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), 0.001, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([128, 2048, 8, 8], f32, stride=(2048, 1, 0, 0)), 64), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 1,
        "inputs": "((T([128, 768, 17, 17], f32), [3, 3], [2, 2]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([128, 64, 73, 73], f32), T([128, 64, 147, 147], f32), [3, 3], [2, 2], [0, 0], [1, 1], False, T([128, 64, 73, 73], i64)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([128, 2048, 8, 8], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 128], f32, stride=(1, 1000)), T([128, 2048], f32)), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([128, 1000], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([128], i64), 1000), {})"
    },
    "aten.relu_.default": {
        "count": 2,
        "inputs": "((T([128, 448, 8, 8], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), [0], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([128, 32, 149, 149], f32), T([128, 32, 149, 149], f32), 0), {})"
    }
}