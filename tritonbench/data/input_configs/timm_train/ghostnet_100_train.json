{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([16, 3, 3, 3], f32), T([8, 16, 1, 1], f32), T([8, 1, 3, 3], f32), T([8, 16, 1, 1], f32), T([8, 1, 3, 3], f32), T([24, 16, 1, 1], f32), T([24, 1, 3, 3], f32), T([48, 1, 3, 3], f32), T([12, 48, 1, 1], f32), T([12, 1, 3, 3], f32), T([16, 1, 3, 3], f32), T([24, 16, 1, 1], f32), T([36, 24, 1, 1], f32), T([36, 1, 3, 3], f32), T([12, 72, 1, 1], f32), T([12, 1, 3, 3], f32), T([36, 24, 1, 1], f32), T([36, 1, 3, 3], f32), T([72, 1, 5, 5], f32), T([20, 72, 1, 1], f32), T([72, 20, 1, 1], f32), T([20, 72, 1, 1], f32), T([20, 1, 3, 3], f32), T([24, 1, 5, 5], f32), T([40, 24, 1, 1], f32), T([60, 40, 1, 1], f32), T([60, 1, 3, 3], f32), T([32, 120, 1, 1], f32), T([120, 32, 1, 1], f32), T([20, 120, 1, 1], f32), T([20, 1, 3, 3], f32), T([120, 40, 1, 1], f32), T([120, 1, 3, 3], f32), T([240, 1, 3, 3], f32), T([40, 240, 1, 1], f32), T([40, 1, 3, 3], f32), T([40, 1, 3, 3], f32), T([80, 40, 1, 1], f32), T([100, 80, 1, 1], f32), T([100, 1, 3, 3], f32), T([40, 200, 1, 1], f32), T([40, 1, 3, 3], f32), T([92, 80, 1, 1], f32), T([92, 1, 3, 3], f32), T([40, 184, 1, 1], f32), T([40, 1, 3, 3], f32), T([92, 80, 1, 1], f32), T([92, 1, 3, 3], f32), T([40, 184, 1, 1], f32), T([40, 1, 3, 3], f32), T([240, 80, 1, 1], f32), T([240, 1, 3, 3], f32), T([120, 480, 1, 1], f32), T([480, 120, 1, 1], f32), T([56, 480, 1, 1], f32), T([56, 1, 3, 3], f32), T([80, 1, 3, 3], f32), T([112, 80, 1, 1], f32), T([336, 112, 1, 1], f32), T([336, 1, 3, 3], f32), T([168, 672, 1, 1], f32), T([672, 168, 1, 1], f32), T([56, 672, 1, 1], f32), T([56, 1, 3, 3], f32), T([336, 112, 1, 1], f32), T([336, 1, 3, 3], f32), T([672, 1, 5, 5], f32), T([168, 672, 1, 1], f32), T([672, 168, 1, 1], f32), T([80, 672, 1, 1], f32), T([80, 1, 3, 3], f32), T([112, 1, 5, 5], f32), T([160, 112, 1, 1], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([240, 960, 1, 1], f32), T([960, 240, 1, 1], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([240, 960, 1, 1], f32), T([960, 240, 1, 1], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([960, 160, 1, 1], f32), T([1280, 960, 1, 1], f32), T([1000, 1280], f32)], [T([16, 3, 3, 3], f32), T([8, 16, 1, 1], f32), T([8, 1, 3, 3], f32), T([8, 16, 1, 1], f32), T([8, 1, 3, 3], f32), T([24, 16, 1, 1], f32), T([24, 1, 3, 3], f32), T([48, 1, 3, 3], f32), T([12, 48, 1, 1], f32), T([12, 1, 3, 3], f32), T([16, 1, 3, 3], f32), T([24, 16, 1, 1], f32), T([36, 24, 1, 1], f32), T([36, 1, 3, 3], f32), T([12, 72, 1, 1], f32), T([12, 1, 3, 3], f32), T([36, 24, 1, 1], f32), T([36, 1, 3, 3], f32), T([72, 1, 5, 5], f32), T([20, 72, 1, 1], f32), T([72, 20, 1, 1], f32), T([20, 72, 1, 1], f32), T([20, 1, 3, 3], f32), T([24, 1, 5, 5], f32), T([40, 24, 1, 1], f32), T([60, 40, 1, 1], f32), T([60, 1, 3, 3], f32), T([32, 120, 1, 1], f32), T([120, 32, 1, 1], f32), T([20, 120, 1, 1], f32), T([20, 1, 3, 3], f32), T([120, 40, 1, 1], f32), T([120, 1, 3, 3], f32), T([240, 1, 3, 3], f32), T([40, 240, 1, 1], f32), T([40, 1, 3, 3], f32), T([40, 1, 3, 3], f32), T([80, 40, 1, 1], f32), T([100, 80, 1, 1], f32), T([100, 1, 3, 3], f32), T([40, 200, 1, 1], f32), T([40, 1, 3, 3], f32), T([92, 80, 1, 1], f32), T([92, 1, 3, 3], f32), T([40, 184, 1, 1], f32), T([40, 1, 3, 3], f32), T([92, 80, 1, 1], f32), T([92, 1, 3, 3], f32), T([40, 184, 1, 1], f32), T([40, 1, 3, 3], f32), T([240, 80, 1, 1], f32), T([240, 1, 3, 3], f32), T([120, 480, 1, 1], f32), T([480, 120, 1, 1], f32), T([56, 480, 1, 1], f32), T([56, 1, 3, 3], f32), T([80, 1, 3, 3], f32), T([112, 80, 1, 1], f32), T([336, 112, 1, 1], f32), T([336, 1, 3, 3], f32), T([168, 672, 1, 1], f32), T([672, 168, 1, 1], f32), T([56, 672, 1, 1], f32), T([56, 1, 3, 3], f32), T([336, 112, 1, 1], f32), T([336, 1, 3, 3], f32), T([672, 1, 5, 5], f32), T([168, 672, 1, 1], f32), T([672, 168, 1, 1], f32), T([80, 672, 1, 1], f32), T([80, 1, 3, 3], f32), T([112, 1, 5, 5], f32), T([160, 112, 1, 1], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([240, 960, 1, 1], f32), T([960, 240, 1, 1], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([480, 160, 1, 1], f32), T([480, 1, 3, 3], f32), T([240, 960, 1, 1], f32), T([960, 240, 1, 1], f32), T([80, 960, 1, 1], f32), T([80, 1, 3, 3], f32), T([960, 160, 1, 1], f32), T([1280, 960, 1, 1], f32), T([1000, 1280], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([512, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([512, 1000], f32), T([512, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 2,
        "inputs": "((T([512, 8, 112, 112], f32, stride=(200704, 12544, 112, 1)), T([512, 8, 112, 112], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 5,
        "inputs": "((T([512, 160, 7, 7], f32), T([512, 160, 7, 7], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([512, 1280], f32), T([1280, 1000], f32, stride=(1, 1280))), {})"
    },
    "aten.cat.default": {
        "count": 4,
        "inputs": "(([T([512, 480, 7, 7], f32), T([512, 480, 7, 7], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 1280], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([512, 960, 1, 1], f32), T([1280, 960, 1, 1], f32), T([1280], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([512, 16, 112, 112], f32), T([512, 3, 224, 224], f32), T([16, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.copy_.default": {
        "count": 3,
        "inputs": "((T([512, 16, 112, 112], f32), T([512, 16, 112, 112], f32)), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([512, 960, 7, 7], f32), T([960], f32), T([960], f32), T([960], f32), T([960], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([512, 16, 112, 112], f32), T([512, 16, 112, 112], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([512, 72, 28, 28], f32, stride=(72, 1, 0, 0)), 784), {})"
    },
    "aten.hardsigmoid.default": {
        "count": 2,
        "inputs": "((T([512, 960, 1, 1], f32),), {})"
    },
    "aten.hardsigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([512, 72, 1, 1], f32), T([512, 72, 1, 1], f32)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([512, 960, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 512], f32, stride=(1, 1000)), T([512, 1280], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([512, 72, 28, 28], f32), T([512, 72, 28, 28], f32)), {})"
    },
    "aten.new_empty_strided.default": {
        "count": 1,
        "inputs": "((T([512, 16, 112, 112], f32), [512, 16, 112, 112], [200704, 12544, 112, 1]), {})"
    },
    "aten.new_zeros.default": {
        "count": 1,
        "inputs": "((T([512, 16, 112, 112], f32), [102760448]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([512, 1000], f32), T([512], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([512, 1000], f32), T([512], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([512], i64), 1000), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([512, 1280, 1, 1], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([512, 72, 28, 28], f32), [2, 3], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([512, 16, 112, 112], f32), T([512, 16, 112, 112], f32), 0), {})"
    }
}