{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([8, 3, 3, 3], f32), T([8, 1, 3, 3], f32), T([16, 8, 1, 1], f32), T([16, 1, 3, 3], f32), T([32, 16, 1, 1], f32), T([32, 1, 3, 3], f32), T([32, 32, 1, 1], f32), T([32, 1, 3, 3], f32), T([64, 32, 1, 1], f32), T([64, 1, 3, 3], f32), T([64, 64, 1, 1], f32), T([64, 1, 3, 3], f32), T([128, 64, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([32, 128, 1, 1], f32), T([128, 32, 1, 1], f32), T([256, 128, 1, 1], f32), T([256, 1, 5, 5], f32), T([64, 256, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 256, 1, 1], f32), T([1280, 256, 1, 1], f32), T([1000, 1280], f32)], [T([8, 3, 3, 3], f32), T([8, 1, 3, 3], f32), T([16, 8, 1, 1], f32), T([16, 1, 3, 3], f32), T([32, 16, 1, 1], f32), T([32, 1, 3, 3], f32), T([32, 32, 1, 1], f32), T([32, 1, 3, 3], f32), T([64, 32, 1, 1], f32), T([64, 1, 3, 3], f32), T([64, 64, 1, 1], f32), T([64, 1, 3, 3], f32), T([128, 64, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([128, 128, 1, 1], f32), T([128, 1, 5, 5], f32), T([32, 128, 1, 1], f32), T([128, 32, 1, 1], f32), T([256, 128, 1, 1], f32), T([256, 1, 5, 5], f32), T([64, 256, 1, 1], f32), T([256, 64, 1, 1], f32), T([256, 256, 1, 1], f32), T([1280, 256, 1, 1], f32), T([1000, 1280], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), T([256, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([256, 128, 7, 7], f32), T([256, 128, 7, 7], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 27,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([256, 1280], f32), T([1280, 1000], f32, stride=(1, 1280))), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 1280], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([256, 256, 1, 1], f32), T([1280, 256, 1, 1], f32), T([1280], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([256, 8, 112, 112], f32), T([256, 3, 224, 224], f32), T([8, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 3,
        "inputs": "((T([256, 256, 7, 7], f32), T([256], f32), T([256], f32), T([256], f32), T([256], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 2,
        "inputs": "((T([256, 8, 112, 112], f32), T([256, 8, 112, 112], f32), T([8], f32), T([8], f32), T([8], f32), T([8], f32), T([8], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([256, 128, 7, 7], f32, stride=(128, 1, 0, 0)), 49), {})"
    },
    "aten.hardsigmoid.default": {
        "count": 1,
        "inputs": "((T([256, 256, 1, 1], f32),), {})"
    },
    "aten.hardsigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([256, 128, 1, 1], f32), T([256, 128, 1, 1], f32)), {})"
    },
    "aten.hardswish_.default": {
        "count": 1,
        "inputs": "((T([256, 1280, 1, 1], f32),), {})"
    },
    "aten.hardswish_backward.default": {
        "count": 2,
        "inputs": "((T([256, 8, 112, 112], f32), T([256, 8, 112, 112], f32)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([256, 256, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 256], f32, stride=(1, 1000)), T([256, 1280], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([256, 128, 7, 7], f32), T([256, 128, 7, 7], f32)), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([256, 1000], f32), T([256], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), T([256], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([256], i64), 1000), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([256, 64, 1, 1], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([256, 128, 7, 7], f32), [2, 3], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([256, 32, 1, 1], f32), T([256, 32, 1, 1], f32), 0), {})"
    }
}