{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([32, 3, 3, 3], f32), T([24, 32, 1, 1], f32), T([24, 8, 3, 3], f32), T([8, 24, 1, 1], f32), T([24, 8, 1, 1], f32), T([24, 24, 1, 1], f32), T([24, 32, 1, 1], f32), T([56, 24, 1, 1], f32), T([56, 8, 3, 3], f32), T([6, 56, 1, 1], f32), T([56, 6, 1, 1], f32), T([56, 56, 1, 1], f32), T([56, 24, 1, 1], f32), T([152, 56, 1, 1], f32), T([152, 8, 3, 3], f32), T([14, 152, 1, 1], f32), T([152, 14, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 56, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 8, 3, 3], f32), T([38, 152, 1, 1], f32), T([152, 38, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 8, 3, 3], f32), T([38, 152, 1, 1], f32), T([152, 38, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 8, 3, 3], f32), T([38, 152, 1, 1], f32), T([152, 38, 1, 1], f32), T([152, 152, 1, 1], f32), T([368, 152, 1, 1], f32), T([368, 8, 3, 3], f32), T([38, 368, 1, 1], f32), T([368, 38, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 152, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([1000, 368], f32)], [T([32, 3, 3, 3], f32), T([24, 32, 1, 1], f32), T([24, 8, 3, 3], f32), T([8, 24, 1, 1], f32), T([24, 8, 1, 1], f32), T([24, 24, 1, 1], f32), T([24, 32, 1, 1], f32), T([56, 24, 1, 1], f32), T([56, 8, 3, 3], f32), T([6, 56, 1, 1], f32), T([56, 6, 1, 1], f32), T([56, 56, 1, 1], f32), T([56, 24, 1, 1], f32), T([152, 56, 1, 1], f32), T([152, 8, 3, 3], f32), T([14, 152, 1, 1], f32), T([152, 14, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 56, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 8, 3, 3], f32), T([38, 152, 1, 1], f32), T([152, 38, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 8, 3, 3], f32), T([38, 152, 1, 1], f32), T([152, 38, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 152, 1, 1], f32), T([152, 8, 3, 3], f32), T([38, 152, 1, 1], f32), T([152, 38, 1, 1], f32), T([152, 152, 1, 1], f32), T([368, 152, 1, 1], f32), T([368, 8, 3, 3], f32), T([38, 368, 1, 1], f32), T([368, 38, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 152, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 368, 1, 1], f32), T([368, 8, 3, 3], f32), T([92, 368, 1, 1], f32), T([368, 92, 1, 1], f32), T([368, 368, 1, 1], f32), T([1000, 368], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([1024, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([1024, 1000], f32), T([1024, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([1024, 32, 112, 112], f32), T([1024, 32, 112, 112], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 44,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([1024, 368], f32), T([368, 1000], f32, stride=(1, 368))), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 368], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 6,
        "inputs": "((T([1024, 92, 1, 1], f32), T([368, 92, 1, 1], f32), T([368], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 32, 112, 112], f32), T([1024, 3, 224, 224], f32), T([32, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 21,
        "inputs": "((T([1024, 368, 7, 7], f32), T([368], f32), T([368], f32), T([368], f32), T([368], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 32, 112, 112], f32), T([1024, 32, 112, 112], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([1024, 24, 56, 56], f32, stride=(24, 1, 0, 0)), 3136), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([1024, 368, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 1024], f32, stride=(1, 1000)), T([1024, 368], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([1024, 24, 56, 56], f32), T([1024, 24, 56, 56], f32)), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([1024, 1000], f32), T([1024], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([1024, 1000], f32), T([1024], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([1024], i64), 1000), {})"
    },
    "aten.relu.default": {
        "count": 7,
        "inputs": "((T([1024, 368, 7, 7], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 6,
        "inputs": "((T([1024, 92, 1, 1], f32),), {})"
    },
    "aten.sigmoid.default": {
        "count": 7,
        "inputs": "((T([1024, 368, 1, 1], f32),), {})"
    },
    "aten.sigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 24, 1, 1], f32), T([1024, 24, 1, 1], f32)), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([1024, 24, 56, 56], f32), [2, 3], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([1024, 32, 112, 112], f32), T([1024, 32, 112, 112], f32), 0), {})"
    }
}