{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([32, 3, 3, 3], f32), T([32, 1, 3, 3], f32), T([16, 32, 1, 1], f32), T([96, 16, 1, 1], f32), T([96, 1, 3, 3], f32), T([27, 96, 1, 1], f32), T([162, 27, 1, 1], f32), T([162, 1, 3, 3], f32), T([38, 162, 1, 1], f32), T([228, 38, 1, 1], f32), T([228, 1, 3, 3], f32), T([19, 228, 1, 1], f32), T([228, 19, 1, 1], f32), T([50, 228, 1, 1], f32), T([300, 50, 1, 1], f32), T([300, 1, 3, 3], f32), T([25, 300, 1, 1], f32), T([300, 25, 1, 1], f32), T([61, 300, 1, 1], f32), T([366, 61, 1, 1], f32), T([366, 1, 3, 3], f32), T([30, 366, 1, 1], f32), T([366, 30, 1, 1], f32), T([72, 366, 1, 1], f32), T([432, 72, 1, 1], f32), T([432, 1, 3, 3], f32), T([36, 432, 1, 1], f32), T([432, 36, 1, 1], f32), T([84, 432, 1, 1], f32), T([504, 84, 1, 1], f32), T([504, 1, 3, 3], f32), T([42, 504, 1, 1], f32), T([504, 42, 1, 1], f32), T([95, 504, 1, 1], f32), T([570, 95, 1, 1], f32), T([570, 1, 3, 3], f32), T([47, 570, 1, 1], f32), T([570, 47, 1, 1], f32), T([106, 570, 1, 1], f32), T([636, 106, 1, 1], f32), T([636, 1, 3, 3], f32), T([53, 636, 1, 1], f32), T([636, 53, 1, 1], f32), T([117, 636, 1, 1], f32), T([702, 117, 1, 1], f32), T([702, 1, 3, 3], f32), T([58, 702, 1, 1], f32), T([702, 58, 1, 1], f32), T([128, 702, 1, 1], f32), T([768, 128, 1, 1], f32), T([768, 1, 3, 3], f32), T([64, 768, 1, 1], f32), T([768, 64, 1, 1], f32), T([140, 768, 1, 1], f32), T([840, 140, 1, 1], f32), T([840, 1, 3, 3], f32), T([70, 840, 1, 1], f32), T([840, 70, 1, 1], f32), T([151, 840, 1, 1], f32), T([906, 151, 1, 1], f32), T([906, 1, 3, 3], f32), T([75, 906, 1, 1], f32), T([906, 75, 1, 1], f32), T([162, 906, 1, 1], f32), T([972, 162, 1, 1], f32), T([972, 1, 3, 3], f32), T([81, 972, 1, 1], f32), T([972, 81, 1, 1], f32), T([174, 972, 1, 1], f32), T([1044, 174, 1, 1], f32), T([1044, 1, 3, 3], f32), T([87, 1044, 1, 1], f32), T([1044, 87, 1, 1], f32), T([185, 1044, 1, 1], f32), T([1280, 185, 1, 1], f32), T([1000, 1280], f32)], [T([32, 3, 3, 3], f32), T([32, 1, 3, 3], f32), T([16, 32, 1, 1], f32), T([96, 16, 1, 1], f32), T([96, 1, 3, 3], f32), T([27, 96, 1, 1], f32), T([162, 27, 1, 1], f32), T([162, 1, 3, 3], f32), T([38, 162, 1, 1], f32), T([228, 38, 1, 1], f32), T([228, 1, 3, 3], f32), T([19, 228, 1, 1], f32), T([228, 19, 1, 1], f32), T([50, 228, 1, 1], f32), T([300, 50, 1, 1], f32), T([300, 1, 3, 3], f32), T([25, 300, 1, 1], f32), T([300, 25, 1, 1], f32), T([61, 300, 1, 1], f32), T([366, 61, 1, 1], f32), T([366, 1, 3, 3], f32), T([30, 366, 1, 1], f32), T([366, 30, 1, 1], f32), T([72, 366, 1, 1], f32), T([432, 72, 1, 1], f32), T([432, 1, 3, 3], f32), T([36, 432, 1, 1], f32), T([432, 36, 1, 1], f32), T([84, 432, 1, 1], f32), T([504, 84, 1, 1], f32), T([504, 1, 3, 3], f32), T([42, 504, 1, 1], f32), T([504, 42, 1, 1], f32), T([95, 504, 1, 1], f32), T([570, 95, 1, 1], f32), T([570, 1, 3, 3], f32), T([47, 570, 1, 1], f32), T([570, 47, 1, 1], f32), T([106, 570, 1, 1], f32), T([636, 106, 1, 1], f32), T([636, 1, 3, 3], f32), T([53, 636, 1, 1], f32), T([636, 53, 1, 1], f32), T([117, 636, 1, 1], f32), T([702, 117, 1, 1], f32), T([702, 1, 3, 3], f32), T([58, 702, 1, 1], f32), T([702, 58, 1, 1], f32), T([128, 702, 1, 1], f32), T([768, 128, 1, 1], f32), T([768, 1, 3, 3], f32), T([64, 768, 1, 1], f32), T([768, 64, 1, 1], f32), T([140, 768, 1, 1], f32), T([840, 140, 1, 1], f32), T([840, 1, 3, 3], f32), T([70, 840, 1, 1], f32), T([840, 70, 1, 1], f32), T([151, 840, 1, 1], f32), T([906, 151, 1, 1], f32), T([906, 1, 3, 3], f32), T([75, 906, 1, 1], f32), T([906, 75, 1, 1], f32), T([162, 906, 1, 1], f32), T([972, 162, 1, 1], f32), T([972, 1, 3, 3], f32), T([81, 972, 1, 1], f32), T([972, 81, 1, 1], f32), T([174, 972, 1, 1], f32), T([1044, 174, 1, 1], f32), T([1044, 1, 3, 3], f32), T([87, 1044, 1, 1], f32), T([1044, 87, 1, 1], f32), T([185, 1044, 1, 1], f32), T([1280, 185, 1, 1], f32), T([1000, 1280], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), T([256, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([256, 38, 56, 56], f32), T([256, 38, 56, 56], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 62,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([256, 1280], f32), T([1280, 1000], f32, stride=(1, 1280))), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([256, 174, 7, 7], f32), T([256, 11, 7, 7], f32, stride=(9065, 49, 7, 1))], 1), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 1280], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([256, 185, 7, 7], f32), T([1280, 185, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([256, 32, 112, 112], f32), T([256, 3, 224, 224], f32), T([32, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([256, 1280, 7, 7], f32), T([1280], f32), T([1280], f32), T([1280], f32), T([1280], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 2,
        "inputs": "((T([256, 32, 112, 112], f32), T([256, 32, 112, 112], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([256, 228, 28, 28], f32, stride=(228, 1, 0, 0)), 784), {})"
    },
    "aten.hardtanh.default": {
        "count": 1,
        "inputs": "((T([256, 1044, 7, 7], f32), 0.0, 6.0), {})"
    },
    "aten.hardtanh_backward.default": {
        "count": 1,
        "inputs": "((T([256, 32, 112, 112], f32), T([256, 32, 112, 112], f32), 0.0, 6.0), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([256, 1280, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 256], f32, stride=(1, 1000)), T([256, 1280], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([256, 228, 28, 28], f32), T([256, 228, 28, 28], f32)), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([256, 1000], f32), T([256], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), T([256], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([256], i64), 1000), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([256, 87, 1, 1], f32),), {})"
    },
    "aten.sigmoid.default": {
        "count": 1,
        "inputs": "((T([256, 1044, 1, 1], f32),), {})"
    },
    "aten.sigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([256, 228, 1, 1], f32), T([256, 228, 1, 1], f32)), {})"
    },
    "aten.silu_.default": {
        "count": 1,
        "inputs": "((T([256, 1280, 7, 7], f32),), {})"
    },
    "aten.silu_backward.default": {
        "count": 1,
        "inputs": "((T([256, 32, 112, 112], f32), T([256, 32, 112, 112], f32)), {})"
    },
    "aten.slice_backward.default": {
        "count": 1,
        "inputs": "((T([256, 27, 56, 56], f32, stride=(119168, 3136, 56, 1)), [256, 38, 56, 56], 1, 0, 27, 1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([256, 228, 28, 28], f32), [2, 3], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([256, 19, 1, 1], f32), T([256, 19, 1, 1], f32), 0), {})"
    }
}