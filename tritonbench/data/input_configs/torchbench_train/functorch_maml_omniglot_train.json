{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([64, 1, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([5, 64], f32), T([5], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([32, 75, 5], f32), 2, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([32, 75, 5], f32), T([32, 75, 5], f32), 2, f32), {})"
    },
    "aten._to_copy.default": {
        "count": 6,
        "inputs": "((T([32], i64),), {'dtype': f32, 'device': 'cuda'})"
    },
    "aten._unsafe_view.default": {
        "count": 1,
        "inputs": "((T([32, 75, 64, 13, 13], f32), [2400, 64, 13, 13]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([64, 1, 3, 3], f32), T([64, 1, 3, 3], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 10,
        "inputs": "((T([5, 2048, 3, 3], f32), T([5, 2048, 3, 3], f32)), {})"
    },
    "aten.argmax.default": {
        "count": 1,
        "inputs": "((T([32, 75, 5], f32), 2), {})"
    },
    "aten.bmm.default": {
        "count": 4,
        "inputs": "((T([32, 64, 5], f32, stride=(320, 1, 64)), T([32, 5, 5], f32)), {})"
    },
    "aten.cat.default": {
        "count": 8,
        "inputs": "(([T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32)], 1), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([64, 160, 5, 5], f32, stride=(25, 1600, 5, 1)), T([64, 160, 3, 3], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([160, 64, 26, 26], f32), T([160, 1, 28, 28], f32), T([64, 1, 3, 3], f32), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.copy_.default": {
        "count": 5,
        "inputs": "((T([32, 5, 64, 26, 26], f32, stride=(43264, 1384448, 676, 26, 1)), T([32, 5, 64, 26, 26], f32, stride=(43264, 1384448, 676, 26, 1))), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([75, 2048, 3, 3], f32), T([2048], f32), T([2048], f32), None, None, True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 5,
        "inputs": "((T([5, 2048, 26, 26], f32), T([5, 2048, 26, 26], f32), T([2048], f32), None, None, T([2048], f32), T([2048], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 10,
        "inputs": "((T([1, 2048, 1, 1], f32), 45), {})"
    },
    "aten.div.Tensor": {
        "count": 1,
        "inputs": "((T([32], f32, stride=(0,)), T([32], f32)), {})"
    },
    "aten.div_.Scalar": {
        "count": 10,
        "inputs": "((T([5, 2048, 3, 3], f32), 45), {})"
    },
    "aten.eq.Tensor": {
        "count": 1,
        "inputs": "((T([32, 75], i64), T([32, 75], i64)), {})"
    },
    "aten.exp.default": {
        "count": 5,
        "inputs": "((T([32, 5, 5], f32),), {})"
    },
    "aten.gather.default": {
        "count": 5,
        "inputs": "((T([160, 64, 9], f32), -1, T([160, 64, 1], i64)), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 1,
        "inputs": "((T([2400, 64, 3, 3], f32), [2, 2], [2, 2]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([2400, 64, 13, 13], f32), T([2400, 64, 26, 26], f32), [2, 2], [2, 2], [0, 0], [1, 1], False, T([2400, 64, 13, 13], i64)), {})"
    },
    "aten.mm.default": {
        "count": 2,
        "inputs": "((T([5, 160], f32, stride=(1, 5)), T([160, 64], f32)), {})"
    },
    "aten.mul.Scalar": {
        "count": 10,
        "inputs": "((T([5, 2048, 3, 3], f32), 45), {})"
    },
    "aten.mul.Tensor": {
        "count": 5,
        "inputs": "((T([32, 64, 5, 26, 26], f32, stride=(43264, 676, 1384448, 26, 1)), T([32, 64, 5, 26, 26], f32, stride=(43264, 676, 1384448, 26, 1))), {})"
    },
    "aten.mul_.Scalar": {
        "count": 5,
        "inputs": "((T([1, 2048, 1, 1], f32), 0.06666666666666667), {})"
    },
    "aten.native_batch_norm_backward.default": {
        "count": 5,
        "inputs": "((T([5, 2048, 26, 26], f32), T([5, 2048, 26, 26], f32), T([2048], f32), None, None, T([2048], f32), T([2048], f32), True, 1e-05, [True, False, False]), {})"
    },
    "aten.ne.Scalar": {
        "count": 3,
        "inputs": "((T([32, 75], i64), -100), {})"
    },
    "aten.neg.default": {
        "count": 5,
        "inputs": "((T([32, 5, 1], f32),), {})"
    },
    "aten.new_empty.default": {
        "count": 1,
        "inputs": "((T([1, 1, 3, 3], f32), []), {})"
    },
    "aten.new_empty_strided.default": {
        "count": 5,
        "inputs": "((T([32, 64, 5, 26, 26], f32, stride=(43264, 676, 1384448, 26, 1)), [32, 64, 5, 26, 26], [43264, 676, 1384448, 26, 1]), {})"
    },
    "aten.new_zeros.default": {
        "count": 1,
        "inputs": "((T([32, 5, 64, 11, 11], f32, stride=(7744, 247808, 121, 11, 1)), [1239040]), {})"
    },
    "aten.pow.Tensor_Scalar": {
        "count": 15,
        "inputs": "((T([1, 2048, 1, 1], f32), 3), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([32, 75, 64, 3, 3], f32, stride=(576, 18432, 9, 3, 1)),), {})"
    },
    "aten.scatter.value": {
        "count": 5,
        "inputs": "((T([32, 5, 5], f32), 2, T([32, 5, 1], i64), -1.0), {})"
    },
    "aten.scatter_add.default": {
        "count": 1,
        "inputs": "((T([32, 75, 5], f32), 2, T([32, 75, 1], i64), T([32, 75, 1], f32)), {})"
    },
    "aten.sub.Tensor": {
        "count": 10,
        "inputs": "((T([1, 2048, 1, 1], f32), T([5, 2048, 3, 3], f32)), {})"
    },
    "aten.sub_.Tensor": {
        "count": 10,
        "inputs": "((T([5, 2048, 3, 3], f32), T([5, 2048, 3, 3], f32)), {})"
    },
    "aten.sum.default": {
        "count": 1,
        "inputs": "((T([32], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([32, 5, 5], f32), [0, 1], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([32, 5, 64, 11, 11], f32, stride=(7744, 247808, 121, 11, 1)), T([32, 5, 64, 11, 11], f32, stride=(7744, 247808, 121, 11, 1)), 0), {})"
    },
    "aten.where.self": {
        "count": 1,
        "inputs": "((T([32, 75], b8), T([32, 75], f32, stride=(1, 0)), T([], f32)), {})"
    }
}