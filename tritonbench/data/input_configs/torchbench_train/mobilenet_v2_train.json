{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([32, 3, 3, 3], f32), T([32], f32), T([32], f32), T([32, 1, 3, 3], f32), T([32], f32), T([32], f32), T([16, 32, 1, 1], f32), T([16], f32), T([16], f32), T([96, 16, 1, 1], f32), T([96], f32), T([96], f32), T([96, 1, 3, 3], f32), T([96], f32), T([96], f32), T([24, 96, 1, 1], f32), T([24], f32), T([24], f32), T([144, 24, 1, 1], f32), T([144], f32), T([144], f32), T([144, 1, 3, 3], f32), T([144], f32), T([144], f32), T([24, 144, 1, 1], f32), T([24], f32), T([24], f32), T([144, 24, 1, 1], f32), T([144], f32), T([144], f32), T([144, 1, 3, 3], f32), T([144], f32), T([144], f32), T([32, 144, 1, 1], f32), T([32], f32), T([32], f32), T([192, 32, 1, 1], f32), T([192], f32), T([192], f32), T([192, 1, 3, 3], f32), T([192], f32), T([192], f32), T([32, 192, 1, 1], f32), T([32], f32), T([32], f32), T([192, 32, 1, 1], f32), T([192], f32), T([192], f32), T([192, 1, 3, 3], f32), T([192], f32), T([192], f32), T([32, 192, 1, 1], f32), T([32], f32), T([32], f32), T([192, 32, 1, 1], f32), T([192], f32), T([192], f32), T([192, 1, 3, 3], f32), T([192], f32), T([192], f32), T([64, 192, 1, 1], f32), T([64], f32), T([64], f32), T([384, 64, 1, 1], f32), T([384], f32), T([384], f32), T([384, 1, 3, 3], f32), T([384], f32), T([384], f32), T([64, 384, 1, 1], f32), T([64], f32), T([64], f32), T([384, 64, 1, 1], f32), T([384], f32), T([384], f32), T([384, 1, 3, 3], f32), T([384], f32), T([384], f32), T([64, 384, 1, 1], f32), T([64], f32), T([64], f32), T([384, 64, 1, 1], f32), T([384], f32), T([384], f32), T([384, 1, 3, 3], f32), T([384], f32), T([384], f32), T([64, 384, 1, 1], f32), T([64], f32), T([64], f32), T([384, 64, 1, 1], f32), T([384], f32), T([384], f32), T([384, 1, 3, 3], f32), T([384], f32), T([384], f32), T([96, 384, 1, 1], f32), T([96], f32), T([96], f32), T([576, 96, 1, 1], f32), T([576], f32), T([576], f32), T([576, 1, 3, 3], f32), T([576], f32), T([576], f32), T([96, 576, 1, 1], f32), T([96], f32), T([96], f32), T([576, 96, 1, 1], f32), T([576], f32), T([576], f32), T([576, 1, 3, 3], f32), T([576], f32), T([576], f32), T([96, 576, 1, 1], f32), T([96], f32), T([96], f32), T([576, 96, 1, 1], f32), T([576], f32), T([576], f32), T([576, 1, 3, 3], f32), T([576], f32), T([576], f32), T([160, 576, 1, 1], f32), T([160], f32), T([160], f32), T([960, 160, 1, 1], f32), T([960], f32), T([960], f32), T([960, 1, 3, 3], f32), T([960], f32), T([960], f32), T([160, 960, 1, 1], f32), T([160], f32), T([160], f32), T([960, 160, 1, 1], f32), T([960], f32), T([960], f32), T([960, 1, 3, 3], f32), T([960], f32), T([960], f32), T([160, 960, 1, 1], f32), T([160], f32), T([160], f32), T([960, 160, 1, 1], f32), T([960], f32), T([960], f32), T([960, 1, 3, 3], f32), T([960], f32), T([960], f32), T([320, 960, 1, 1], f32), T([320], f32), T([320], f32), T([1280, 320, 1, 1], f32), T([1280], f32), T([1280], f32), T([1000, 1280], f32), T([1000], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([96, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([96, 1000], f32), T([96, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 6,
        "inputs": "((T([96, 160, 7, 7], f32), T([96, 160, 7, 7], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 104,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 2,
        "inputs": "((T([1000], f32), T([96, 1280], f32), T([1280, 1000], f32, stride=(1, 1280))), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([96, 1280, 7, 7], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 2,
        "inputs": "((T([96, 320, 7, 7], f32), T([1280, 320, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([96, 32, 112, 112], f32), T([96, 3, 224, 224], f32), T([32, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 2,
        "inputs": "((T([96, 1280, 7, 7], f32), T([1280], f32), T([1280], f32), T([1280], f32), T([1280], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 2,
        "inputs": "((T([96, 32, 112, 112], f32), T([96, 32, 112, 112], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([96, 1280, 7, 7], f32, stride=(1280, 1, 0, 0)), 49), {})"
    },
    "aten.hardtanh_.default": {
        "count": 2,
        "inputs": "((T([96, 1280, 7, 7], f32), 0.0, 6.0), {})"
    },
    "aten.hardtanh_backward.default": {
        "count": 2,
        "inputs": "((T([96, 32, 112, 112], f32), T([96, 32, 112, 112], f32), 0.0, 6.0), {})"
    },
    "aten.mean.dim": {
        "count": 2,
        "inputs": "((T([96, 1280, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 96], f32, stride=(1, 1000)), T([96, 1280], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([96, 1000], f32, stride=(0, 0)), T([96, 1000], f32)), {})"
    },
    "aten.native_dropout.default": {
        "count": 2,
        "inputs": "((T([96, 1280], f32), 0.2, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 1,
        "inputs": "((T([96, 1280], f32), T([96, 1280], b8), 1.25), {})"
    },
    "aten.neg.default": {
        "count": 2,
        "inputs": "((T([], f32),), {})"
    },
    "aten.sum.default": {
        "count": 1,
        "inputs": "((T([96, 1000], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([96, 1000], f32), [0], True), {})"
    }
}