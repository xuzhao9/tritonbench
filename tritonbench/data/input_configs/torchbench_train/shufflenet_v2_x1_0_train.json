{
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([24, 3, 3, 3], f32), T([24], f32), T([24], f32), T([24, 1, 3, 3], f32), T([24], f32), T([24], f32), T([58, 24, 1, 1], f32), T([58], f32), T([58], f32), T([58, 24, 1, 1], f32), T([58], f32), T([58], f32), T([58, 1, 3, 3], f32), T([58], f32), T([58], f32), T([58, 58, 1, 1], f32), T([58], f32), T([58], f32), T([58, 58, 1, 1], f32), T([58], f32), T([58], f32), T([58, 1, 3, 3], f32), T([58], f32), T([58], f32), T([58, 58, 1, 1], f32), T([58], f32), T([58], f32), T([58, 58, 1, 1], f32), T([58], f32), T([58], f32), T([58, 1, 3, 3], f32), T([58], f32), T([58], f32), T([58, 58, 1, 1], f32), T([58], f32), T([58], f32), T([58, 58, 1, 1], f32), T([58], f32), T([58], f32), T([58, 1, 3, 3], f32), T([58], f32), T([58], f32), T([58, 58, 1, 1], f32), T([58], f32), T([58], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([116, 1, 3, 3], f32), T([116], f32), T([116], f32), T([116, 116, 1, 1], f32), T([116], f32), T([116], f32), T([232, 1, 3, 3], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 1, 3, 3], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 1, 3, 3], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 1, 3, 3], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([232, 1, 3, 3], f32), T([232], f32), T([232], f32), T([232, 232, 1, 1], f32), T([232], f32), T([232], f32), T([1024, 464, 1, 1], f32), T([1024], f32), T([1024], f32), T([1000, 1024], f32), T([1000], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 4,
            "inputs": "((T([128, 2, 232, 7, 7], f32), [128, 464, 7, 7]), {})"
        },
        {
            "count": 8,
            "inputs": "((T([128, 2, 116, 14, 14], f32), [128, 232, 14, 14]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([128, 2, 58, 28, 28], f32), [128, 116, 28, 28]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128, 232, 14, 14], f32), T([128, 232, 14, 14], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 116, 28, 28], f32), T([128, 116, 28, 28], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 24, 56, 56], f32), T([128, 24, 56, 56], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 112,
            "inputs": "((T([], i64), 1), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 2,
            "inputs": "((T([1000], f32), T([128, 1024], f32), T([1024, 1000], f32, stride=(1, 1024))), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 2,
            "inputs": "(([T([128, 58, 28, 28], f32), T([128, 58, 28, 28], f32)], 1), {})"
        },
        {
            "count": 9,
            "inputs": "(([T([128, 58, 28, 28], f32, stride=(90944, 784, 28, 1)), T([128, 58, 28, 28], f32)], 1), {})"
        },
        {
            "count": 2,
            "inputs": "(([T([128, 116, 14, 14], f32), T([128, 116, 14, 14], f32)], 1), {})"
        },
        {
            "count": 21,
            "inputs": "(([T([128, 116, 14, 14], f32, stride=(45472, 196, 14, 1)), T([128, 116, 14, 14], f32)], 1), {})"
        },
        {
            "count": 2,
            "inputs": "(([T([128, 232, 7, 7], f32), T([128, 232, 7, 7], f32)], 1), {})"
        },
        {
            "count": 9,
            "inputs": "(([T([128, 232, 7, 7], f32, stride=(22736, 49, 7, 1)), T([128, 232, 7, 7], f32)], 1), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 2,
            "inputs": "((T([128, 3, 224, 224], f32), T([24, 3, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 24, 56, 56], f32), T([24, 1, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 24), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 24, 28, 28], f32), T([58, 24, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 24, 56, 56], f32), T([58, 24, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 58, 56, 56], f32), T([58, 1, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 58), {})"
        },
        {
            "count": 8,
            "inputs": "((T([128, 58, 28, 28], f32), T([58, 58, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 58, 28, 28], f32, stride=(90944, 784, 28, 1)), T([58, 58, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 58, 28, 28], f32), T([58, 1, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 58), {})"
        },
        {
            "count": 4,
            "inputs": "((T([128, 116, 28, 28], f32), T([116, 1, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 116), {})"
        },
        {
            "count": 18,
            "inputs": "((T([128, 116, 14, 14], f32), T([116, 116, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 116, 28, 28], f32), T([116, 116, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 14,
            "inputs": "((T([128, 116, 14, 14], f32, stride=(45472, 196, 14, 1)), T([116, 116, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 14,
            "inputs": "((T([128, 116, 14, 14], f32), T([116, 1, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 116), {})"
        },
        {
            "count": 4,
            "inputs": "((T([128, 232, 14, 14], f32), T([232, 1, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 232), {})"
        },
        {
            "count": 10,
            "inputs": "((T([128, 232, 7, 7], f32), T([232, 232, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 232, 14, 14], f32), T([232, 232, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 232, 7, 7], f32, stride=(22736, 49, 7, 1)), T([232, 232, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 232, 7, 7], f32), T([232, 1, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 232), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 464, 7, 7], f32), T([1024, 464, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1024, 7, 7], f32), T([128, 464, 7, 7], f32), T([1024, 464, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 232, 7, 7], f32), T([128, 232, 7, 7], f32), T([232, 232, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 232, 7, 7], f32), T([128, 232, 7, 7], f32), T([232, 1, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 232, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 232, 7, 7], f32), T([128, 232, 7, 7], f32, stride=(22736, 49, 7, 1)), T([232, 232, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 232, 7, 7], f32), T([128, 232, 14, 14], f32), T([232, 1, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 232, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 232, 14, 14], f32), T([128, 232, 14, 14], f32), T([232, 232, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 9,
            "inputs": "((T([128, 116, 14, 14], f32), T([128, 116, 14, 14], f32), T([116, 116, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 7,
            "inputs": "((T([128, 116, 14, 14], f32), T([128, 116, 14, 14], f32), T([116, 1, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 116, [True, True, False]), {})"
        },
        {
            "count": 7,
            "inputs": "((T([128, 116, 14, 14], f32), T([128, 116, 14, 14], f32, stride=(45472, 196, 14, 1)), T([116, 116, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 116, 14, 14], f32), T([128, 116, 28, 28], f32), T([116, 1, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 116, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 116, 28, 28], f32), T([128, 116, 28, 28], f32), T([116, 116, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([128, 58, 28, 28], f32), T([128, 58, 28, 28], f32), T([58, 58, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 58, 28, 28], f32), T([128, 58, 28, 28], f32), T([58, 1, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 58, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 58, 28, 28], f32), T([128, 58, 28, 28], f32, stride=(90944, 784, 28, 1)), T([58, 58, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 58, 28, 28], f32), T([128, 58, 56, 56], f32), T([58, 1, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 58, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 58, 56, 56], f32), T([128, 24, 56, 56], f32), T([58, 24, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 58, 28, 28], f32), T([128, 24, 28, 28], f32), T([58, 24, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 24, 28, 28], f32), T([128, 24, 56, 56], f32), T([24, 1, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 24, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 24, 112, 112], f32), T([128, 3, 224, 224], f32), T([24, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
        }
    ],
    "aten.cudnn_batch_norm.default": [
        {
            "count": 2,
            "inputs": "((T([128, 24, 112, 112], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 24, 28, 28], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 24,
            "inputs": "((T([128, 58, 28, 28], f32), T([58], f32), T([58], f32), T([58], f32), T([58], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 58, 56, 56], f32), T([58], f32), T([58], f32), T([58], f32), T([58], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 50,
            "inputs": "((T([128, 116, 14, 14], f32), T([116], f32), T([116], f32), T([116], f32), T([116], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 116, 28, 28], f32), T([116], f32), T([116], f32), T([116], f32), T([116], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 26,
            "inputs": "((T([128, 232, 7, 7], f32), T([232], f32), T([232], f32), T([232], f32), T([232], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 232, 14, 14], f32), T([232], f32), T([232], f32), T([232], f32), T([232], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 1024, 7, 7], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), True, 0.1, 1e-05), {})"
        }
    ],
    "aten.cudnn_batch_norm_backward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1024, 7, 7], f32), T([128, 1024, 7, 7], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 13,
            "inputs": "((T([128, 232, 7, 7], f32), T([128, 232, 7, 7], f32), T([232], f32), T([232], f32), T([232], f32), T([232], f32), T([232], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 232, 14, 14], f32), T([128, 232, 14, 14], f32), T([232], f32), T([232], f32), T([232], f32), T([232], f32), T([232], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 25,
            "inputs": "((T([128, 116, 14, 14], f32), T([128, 116, 14, 14], f32), T([116], f32), T([116], f32), T([116], f32), T([116], f32), T([116], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 116, 28, 28], f32), T([128, 116, 28, 28], f32), T([116], f32), T([116], f32), T([116], f32), T([116], f32), T([116], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([128, 58, 28, 28], f32), T([128, 58, 28, 28], f32), T([58], f32), T([58], f32), T([58], f32), T([58], f32), T([58], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 58, 56, 56], f32), T([128, 58, 56, 56], f32), T([58], f32), T([58], f32), T([58], f32), T([58], f32), T([58], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 24, 28, 28], f32), T([128, 24, 28, 28], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 24, 112, 112], f32), T([128, 24, 112, 112], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), T([24], f32), 1e-05, T([0], u8)), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 2,
            "inputs": "((T([], f32), 128), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 1024, 7, 7], f32, stride=(1024, 1, 0, 0)), 49), {})"
        }
    ],
    "aten.max_pool2d_with_indices.default": [
        {
            "count": 2,
            "inputs": "((T([128, 24, 112, 112], f32), [3, 3], [2, 2], [1, 1]), {})"
        }
    ],
    "aten.max_pool2d_with_indices_backward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 24, 56, 56], f32), T([128, 24, 112, 112], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([128, 24, 56, 56], i64)), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 2,
            "inputs": "((T([128, 1024, 7, 7], f32), [2, 3]), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([1000, 1024], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000, 128], f32, stride=(1, 1000)), T([128, 1024], f32)), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), T([128, 1000], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32, stride=(0, 0)), T([128, 1000], f32)), {})"
        }
    ],
    "aten.neg.default": [
        {
            "count": 2,
            "inputs": "((T([], f32),), {})"
        }
    ],
    "aten.relu_.default": [
        {
            "count": 2,
            "inputs": "((T([128, 24, 112, 112], f32),), {})"
        },
        {
            "count": 16,
            "inputs": "((T([128, 58, 28, 28], f32),), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 58, 56, 56], f32),), {})"
        },
        {
            "count": 32,
            "inputs": "((T([128, 116, 14, 14], f32),), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 116, 28, 28], f32),), {})"
        },
        {
            "count": 16,
            "inputs": "((T([128, 232, 7, 7], f32),), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 232, 14, 14], f32),), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 1024, 7, 7], f32),), {})"
        }
    ],
    "aten.split.Tensor": [
        {
            "count": 6,
            "inputs": "((T([128, 116, 28, 28], f32), 58, 1), {})"
        },
        {
            "count": 14,
            "inputs": "((T([128, 232, 14, 14], f32), 116, 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 464, 7, 7], f32), 232, 1), {})"
        }
    ],
    "aten.sum.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32),), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([128, 1000], f32), [0], True), {})"
        }
    ],
    "aten.threshold_backward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 1024, 7, 7], f32), T([128, 1024, 7, 7], f32), 0), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 232, 7, 7], f32, stride=(22736, 49, 7, 1)), T([128, 232, 7, 7], f32), 0), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 232, 7, 7], f32), T([128, 232, 7, 7], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 232, 14, 14], f32), T([128, 232, 14, 14], f32), 0), {})"
        },
        {
            "count": 9,
            "inputs": "((T([128, 116, 14, 14], f32, stride=(45472, 196, 14, 1)), T([128, 116, 14, 14], f32), 0), {})"
        },
        {
            "count": 7,
            "inputs": "((T([128, 116, 14, 14], f32), T([128, 116, 14, 14], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 116, 28, 28], f32), T([128, 116, 28, 28], f32), 0), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 58, 28, 28], f32, stride=(90944, 784, 28, 1)), T([128, 58, 28, 28], f32), 0), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 58, 28, 28], f32), T([128, 58, 28, 28], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 58, 56, 56], f32), T([128, 58, 56, 56], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 24, 112, 112], f32), T([128, 24, 112, 112], f32), 0), {})"
        }
    ]
}