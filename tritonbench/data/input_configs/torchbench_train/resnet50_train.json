{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([64, 3, 7, 7], f32), T([64], f32), T([64], f32), T([64, 64, 1, 1], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([256, 64, 1, 1], f32), T([256], f32), T([256], f32), T([256, 64, 1, 1], f32), T([256], f32), T([256], f32), T([64, 256, 1, 1], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([256, 64, 1, 1], f32), T([256], f32), T([256], f32), T([64, 256, 1, 1], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([256, 64, 1, 1], f32), T([256], f32), T([256], f32), T([128, 256, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([512, 128, 1, 1], f32), T([512], f32), T([512], f32), T([512, 256, 1, 1], f32), T([512], f32), T([512], f32), T([128, 512, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([512, 128, 1, 1], f32), T([512], f32), T([512], f32), T([128, 512, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([512, 128, 1, 1], f32), T([512], f32), T([512], f32), T([128, 512, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([512, 128, 1, 1], f32), T([512], f32), T([512], f32), T([256, 512, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([1024, 256, 1, 1], f32), T([1024], f32), T([1024], f32), T([1024, 512, 1, 1], f32), T([1024], f32), T([1024], f32), T([256, 1024, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([1024, 256, 1, 1], f32), T([1024], f32), T([1024], f32), T([256, 1024, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([1024, 256, 1, 1], f32), T([1024], f32), T([1024], f32), T([256, 1024, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([1024, 256, 1, 1], f32), T([1024], f32), T([1024], f32), T([256, 1024, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([1024, 256, 1, 1], f32), T([1024], f32), T([1024], f32), T([256, 1024, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([1024, 256, 1, 1], f32), T([1024], f32), T([1024], f32), T([512, 1024, 1, 1], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([2048, 512, 1, 1], f32), T([2048], f32), T([2048], f32), T([2048, 1024, 1, 1], f32), T([2048], f32), T([2048], f32), T([512, 2048, 1, 1], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([2048, 512, 1, 1], f32), T([2048], f32), T([2048], f32), T([512, 2048, 1, 1], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([2048, 512, 1, 1], f32), T([2048], f32), T([2048], f32), T([1000, 2048], f32), T([1000], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), T([32, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([32, 64, 56, 56], f32), T([32, 64, 56, 56], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 6,
        "inputs": "((T([32, 2048, 7, 7], f32), T([32, 2048, 7, 7], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 2,
        "inputs": "((T([1000], f32), T([32, 2048], f32), T([2048, 1000], f32, stride=(1, 2048))), {})"
    },
    "aten.convolution.default": {
        "count": 4,
        "inputs": "((T([32, 512, 7, 7], f32), T([512, 512, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([32, 64, 112, 112], f32), T([32, 3, 224, 224], f32), T([64, 3, 7, 7], f32), [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 8,
        "inputs": "((T([32, 2048, 7, 7], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([32, 64, 112, 112], f32), T([32, 64, 112, 112], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([32, 2048, 7, 7], f32, stride=(2048, 1, 0, 0)), 49), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 2,
        "inputs": "((T([32, 64, 112, 112], f32), [3, 3], [2, 2], [1, 1]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([32, 64, 56, 56], f32), T([32, 64, 112, 112], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([32, 64, 56, 56], i64)), {})"
    },
    "aten.mean.dim": {
        "count": 2,
        "inputs": "((T([32, 2048, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 32], f32, stride=(1, 1000)), T([32, 2048], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([32, 1000], f32, stride=(0, 0)), T([32, 1000], f32)), {})"
    },
    "aten.neg.default": {
        "count": 2,
        "inputs": "((T([], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 6,
        "inputs": "((T([32, 2048, 7, 7], f32),), {})"
    },
    "aten.sum.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), [0], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([32, 64, 112, 112], f32), T([32, 64, 112, 112], f32), 0), {})"
    }
}