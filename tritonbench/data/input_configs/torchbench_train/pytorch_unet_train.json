{
    "aten._amp_update_scale_.default": {
        "count": 1,
        "inputs": "((T([], f32), T([], i32), T([], f32), 2.0, 0.5, 2000), {})"
    },
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([64, 3, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 1024, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([2, 64, 1, 1], f32), T([2], f32)], [T([64, 3, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 1024, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([2, 64, 1, 1], f32), T([2], f32)]), {'alpha': 1e-08})"
    },
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([64, 3, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 1024, 3, 3], f32), T([512], f32), T([512], f32), T([512], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([2, 64, 1, 1], f32), T([2], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([1, 2, 640, 959], f16), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([1, 2, 640, 959], f16), T([1, 2, 640, 959], f16), 1, f16), {})"
    },
    "aten._softmax.default": {
        "count": 1,
        "inputs": "((T([1, 2, 640, 959], f16), 1, True), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([1, 2, 640, 959], f32), T([1, 2, 640, 959], f32), 1, f16), {})"
    },
    "aten._to_copy.default": {
        "count": 2,
        "inputs": "((T([], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda', 'non_blocking': True})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([1, 64, 640, 959], f16), T([1, 64, 640, 959], f16)), {})"
    },
    "aten.add_.Tensor": {
        "count": 1,
        "inputs": "((T([], f32), T([], f32)), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([1, 64, 640, 959], f16), T([1, 64, 640, 959], f32)], 1), {})"
    },
    "aten.constant_pad_nd.default": {
        "count": 1,
        "inputs": "((T([1, 512, 80, 119], f32), [0, -1, 0, 0]), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([1, 64, 640, 959], f16), T([2, 64, 1, 1], f16), T([2], f16), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([1, 64, 640, 959], f16), T([1, 3, 640, 959], f16), T([64, 3, 3, 3], f16), [64], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([1, 64, 320, 479], f16), T([64], f32), T([64], f32), T([64], f32), T([64], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 2,
        "inputs": "((T([1, 512, 40, 59], f16), T([1, 512, 40, 59], f16), T([512], f32), T([512], f32), T([512], f32), T([512], f32), T([512], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Tensor": {
        "count": 2,
        "inputs": "((T([], f32), 2), {})"
    },
    "aten.dot.default": {
        "count": 2,
        "inputs": "((T([613760], f32), T([613760], f32, stride=(2,))), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 1,
        "inputs": "((T([1, 512, 80, 119], f16), [2, 2], [2, 2]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([1, 64, 320, 479], f16), T([1, 64, 640, 959], f16), [2, 2], [2, 2], [0, 0], [1, 1], False, T([1, 64, 320, 479], i64)), {})"
    },
    "aten.mul.Tensor": {
        "count": 2,
        "inputs": "((T([], f32), T([613760], f32, stride=(2,))), {})"
    },
    "aten.neg.default": {
        "count": 3,
        "inputs": "((T([], f32),), {})"
    },
    "aten.nll_loss2d_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([1, 2, 640, 959], f32), T([1, 640, 959], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss2d_forward.default": {
        "count": 1,
        "inputs": "((T([1, 2, 640, 959], f32), T([1, 640, 959], i64), None, 1, -100), {})"
    },
    "aten.reciprocal.default": {
        "count": 1,
        "inputs": "((T([], f64),), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([1, 64, 320, 479], f16),), {})"
    },
    "aten.rsub.Scalar": {
        "count": 1,
        "inputs": "((T([], f32), 1), {})"
    },
    "aten.scatter_.value": {
        "count": 1,
        "inputs": "((T([1, 640, 959, 2], i64), -1, T([1, 640, 959, 1], i64), 1), {})"
    },
    "aten.select_backward.default": {
        "count": 1,
        "inputs": "((T([1, 640, 959], f32), [1, 2, 640, 959], 1, 0), {})"
    },
    "aten.sum.default": {
        "count": 2,
        "inputs": "((T([1, 640, 959], f32, stride=(1227520, 1918, 2)),), {'dtype': f32})"
    },
    "aten.threshold_backward.default": {
        "count": 2,
        "inputs": "((T([1, 512, 40, 59], f16), T([1, 512, 40, 59], f16), 0), {})"
    },
    "aten.upsample_bilinear2d.default": {
        "count": 1,
        "inputs": "((T([1, 64, 320, 479], f32), [640, 958], True, 2.0, 2.0), {})"
    },
    "aten.upsample_bilinear2d_backward.default": {
        "count": 1,
        "inputs": "((T([1, 512, 80, 118], f32), [80, 118], [1, 512, 40, 59], True, 2.0, 2.0), {})"
    }
}