{
    "aten._cudnn_rnn.default": {
        "count": 1,
        "inputs": "((T([6524, 512], f32), [T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32)], 4, T([1576960], f32), T([2, 64, 256], f32), T([2, 64, 256], f32), 2, 256, 0, 1, False, 0.0, True, True, [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 62, 62, 62, 62, 62, 62, 62, 62, 61, 61, 61, 61, 60, 58, 58, 58, 58, 58, 58, 58, 58, 58, 57, 57, 57, 57, 56, 56, 55, 55, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 51, 50, 49, 49, 48, 46, 46, 44, 43, 43, 43, 42, 42, 42, 42, 42, 41, 40, 39, 37, 37, 37, 37, 36, 36, 35, 35, 35, 33, 32, 31, 30, 29, 29, 28, 27, 26, 26, 26, 26, 25, 25, 25, 25, 25, 23, 22, 21, 21, 21, 21, 20, 20, 20, 19, 17, 16, 15, 15, 15, 13, 13, 13, 10, 8, 8, 8, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1], None), {})"
    },
    "aten._cudnn_rnn_backward.default": {
        "count": 1,
        "inputs": "((T([6524, 512], f32), [T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32)], 4, T([1576960], f32), T([2, 64, 256], f32), T([2, 64, 256], f32), T([6524, 512], f32), T([6524, 512], f32), None, None, 2, 256, 0, 1, False, 0.0, True, True, [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 62, 62, 62, 62, 62, 62, 62, 62, 61, 61, 61, 61, 60, 58, 58, 58, 58, 58, 58, 58, 58, 58, 57, 57, 57, 57, 56, 56, 55, 55, 54, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 51, 50, 49, 49, 48, 46, 46, 44, 43, 43, 43, 42, 42, 42, 42, 42, 41, 40, 39, 37, 37, 37, 37, 36, 36, 35, 35, 35, 33, 32, 31, 30, 29, 29, 28, 27, 26, 26, 26, 26, 25, 25, 25, 25, 25, 23, 22, 21, 21, 21, 21, 20, 20, 20, 19, 17, 16, 15, 15, 15, 13, 13, 13, 10, 8, 8, 8, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1], None, T([66806016], u8), [True, False, False, True]), {})"
    },
    "aten._cudnn_rnn_flatten_weight.default": {
        "count": 1,
        "inputs": "(([T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32)], 4, 512, 2, 256, 0, 1, True, True), {})"
    },
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([148, 512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([256, 80], f32), T([256, 256], f32), T([4096, 768], f32), T([4096, 1024], f32), T([4096], f32), T([4096], f32), T([128, 1024], f32), T([128, 512], f32), T([1, 128], f32), T([32, 2, 31], f32), T([128, 32], f32), T([4096, 1536], f32), T([4096, 1024], f32), T([4096], f32), T([4096], f32), T([80, 1536], f32), T([80], f32), T([1, 1536], f32), T([1], f32), T([512, 80, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([80, 512, 5], f32), T([80], f32), T([80], f32), T([80], f32)], [T([148, 512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([256, 80], f32), T([256, 256], f32), T([4096, 768], f32), T([4096, 1024], f32), T([4096], f32), T([4096], f32), T([128, 1024], f32), T([128, 512], f32), T([1, 128], f32), T([32, 2, 31], f32), T([128, 32], f32), T([4096, 1536], f32), T([4096, 1024], f32), T([4096], f32), T([4096], f32), T([80, 1536], f32), T([80], f32), T([1, 1536], f32), T([1], f32), T([512, 80, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([80, 512, 5], f32), T([80], f32), T([80], f32), T([80], f32)]), {'alpha': 1e-06})"
    },
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([148, 512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([1024, 512], f32), T([1024, 256], f32), T([1024], f32), T([1024], f32), T([256, 80], f32), T([256, 256], f32), T([4096, 768], f32), T([4096, 1024], f32), T([4096], f32), T([4096], f32), T([128, 1024], f32), T([128, 512], f32), T([1, 128], f32), T([32, 2, 31], f32), T([128, 32], f32), T([4096, 1536], f32), T([4096, 1024], f32), T([4096], f32), T([4096], f32), T([80, 1536], f32), T([80], f32), T([1, 1536], f32), T([1], f32), T([512, 80, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512, 5], f32), T([512], f32), T([512], f32), T([512], f32), T([80, 512, 5], f32), T([80], f32), T([80], f32), T([80], f32)],), {})"
    },
    "aten._pack_padded_sequence.default": {
        "count": 1,
        "inputs": "((T([64, 168, 512], f32, stride=(86016, 1, 168)), T([64], i64), True), {})"
    },
    "aten._softmax.default": {
        "count": 857,
        "inputs": "((T([64, 168], f32), 1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 857,
        "inputs": "((T([64, 168], f32), T([64, 168], f32), 1, f32), {})"
    },
    "aten._thnn_fused_lstm_cell.default": {
        "count": 1714,
        "inputs": "((T([64, 4096], f32), T([64, 4096], f32), T([64, 1024], f32), T([4096], f32), T([4096], f32)), {})"
    },
    "aten._thnn_fused_lstm_cell_backward_impl.default": {
        "count": 1712,
        "inputs": "((T([64, 1024], f32), T([64, 1024], f32), T([64, 1024], f32), T([64, 1024], f32), T([64, 4096], f32), True), {})"
    },
    "aten._to_copy.default": {
        "count": 1,
        "inputs": "((T([64], i64),), {'dtype': i64, 'layout': torch.strided, 'device': 'cpu'})"
    },
    "aten._unsafe_view.default": {
        "count": 857,
        "inputs": "((T([10752, 1], f32), [64, 168, 1]), {})"
    },
    "aten.add.Tensor": {
        "count": 49,
        "inputs": "((T([6524, 512], f32), T([6524, 512], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 857,
        "inputs": "((T([64, 168], f32), T([64, 168], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 857,
        "inputs": "((T([1], f32), T([64, 1536], f32), T([1536, 1], f32)), {})"
    },
    "aten.binary_cross_entropy_with_logits.default": {
        "count": 1,
        "inputs": "((T([54848, 1], f32), T([54848, 1], f32)), {})"
    },
    "aten.bitwise_not.default": {
        "count": 1,
        "inputs": "((T([64, 857], b8),), {})"
    },
    "aten.bmm.default": {
        "count": 857,
        "inputs": "((T([64, 1, 512], f32), T([64, 512, 168], f32, stride=(512, 1, 32768))), {})"
    },
    "aten.cat.default": {
        "count": 857,
        "inputs": "(([T([64, 1024], f32), T([64, 512], f32)], 1), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([64, 512, 857], f32), T([80, 512, 5], f32), T([80], f32), [1], [2], [1], False, [0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([64, 512, 168], f32), T([64, 512, 168], f32, stride=(86016, 1, 512)), T([512, 512, 5], f32), [512], [1], [2], [1], False, [0], 1, [True, True, True]), {})"
    },
    "aten.copy_.default": {
        "count": 2,
        "inputs": "((T([1, 512], f32), T([1, 512], f32)), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 1,
        "inputs": "((T([64, 80, 857], f32), T([80], f32), T([80], f32), T([80], f32), T([80], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 3,
        "inputs": "((T([64, 512, 168], f32), T([64, 512, 168], f32), T([512], f32), T([512], f32), T([512], f32), T([512], f32), T([512], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div_.Scalar": {
        "count": 1,
        "inputs": "((T([54848, 1], f32), 54848), {})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([148, 512], f32), T([64, 168], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([64, 168, 512], f32, stride=(86016, 1, 168)), T([64, 168], i64), 148, -1, False), {})"
    },
    "aten.lt.Tensor": {
        "count": 1,
        "inputs": "((T([857], i64), T([64, 1], i64)), {})"
    },
    "aten.masked_fill_.Scalar": {
        "count": 1,
        "inputs": "((T([64, 857], f32), T([64, 857], b8), 1000.0), {})"
    },
    "aten.max.default": {
        "count": 2,
        "inputs": "((T([64], i64),), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([256, 54912], f32, stride=(1, 256)), T([54912, 80], f32)), {})"
    },
    "aten.mse_loss.default": {
        "count": 2,
        "inputs": "((T([64, 80, 857], f32, stride=(68560, 1, 80)), T([64, 80, 857], f32)), {})"
    },
    "aten.mse_loss_backward.default": {
        "count": 2,
        "inputs": "((T([], f32), T([64, 80, 857], f32, stride=(68560, 1, 80)), T([64, 80, 857], f32), 1), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([54848, 1], f32), T([], f32)), {})"
    },
    "aten.native_dropout.default": {
        "count": 1,
        "inputs": "((T([64, 80, 857], f32), 0.5, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 2,
        "inputs": "((T([64, 512, 168], f32), T([64, 512, 168], b8), 2.0), {})"
    },
    "aten.new_empty_strided.default": {
        "count": 49,
        "inputs": "((T([168, 64, 512], f32), [168, 64, 512], [32768, 512, 1]), {})"
    },
    "aten.relu.default": {
        "count": 2,
        "inputs": "((T([858, 64, 256], f32),), {})"
    },
    "aten.select_backward.default": {
        "count": 1,
        "inputs": "((T([64, 256], f32, stride=(768, 1)), [858, 64, 256], 0, 0), {})"
    },
    "aten.sigmoid.default": {
        "count": 1,
        "inputs": "((T([54848, 1], f32),), {})"
    },
    "aten.slice_backward.default": {
        "count": 1,
        "inputs": "((T([1920, 512], f32), [6524, 512], 0, 0, 1920, 1), {})"
    },
    "aten.stack.default": {
        "count": 1,
        "inputs": "(([T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32), T([64, 80], f32)],), {})"
    },
    "aten.sub.Tensor": {
        "count": 1,
        "inputs": "((T([54848, 1], f32), T([54848, 1], f32)), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 857,
        "inputs": "((T([64, 168, 128], f32), [1], True), {})"
    },
    "aten.tanh.default": {
        "count": 4,
        "inputs": "((T([64, 512, 857], f32),), {})"
    },
    "aten.tanh_backward.default": {
        "count": 857,
        "inputs": "((T([64, 168, 128], f32), T([64, 168, 128], f32)), {})"
    },
    "aten.threshold_backward.default": {
        "count": 3,
        "inputs": "((T([64, 512, 168], f32), T([64, 512, 168], f32), 0), {})"
    },
    "aten.zero_.default": {
        "count": 1,
        "inputs": "((T([64, 512], f32),), {})"
    }
}