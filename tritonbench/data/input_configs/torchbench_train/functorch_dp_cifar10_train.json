{
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([64, 3, 7, 7], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128, 64, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256, 128, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512, 256, 1, 1], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([1000, 512], f32), T([1000], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 1000], f32), 2, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 1000], f32), T([64, 1, 1000], f32), 2, f32), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 1,
            "inputs": "((T([64], i64),), {'dtype': f32, 'device': 'cuda'})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 1,
            "inputs": "((T([64, 1000], f32), [64, 1, 1000]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512], f32), [64, 1, 512]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1000, 512], f32), [64, 1000, 512]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 64, 16, 16], f32), T([64, 1, 1], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 64, 8, 8], f32), T([64, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 128, 4, 4], f32), T([128, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 256, 2, 2], f32), T([256, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 512, 1, 1], f32), T([512, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000], f32), T([64, 1, 1000], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 16, 1], f32), T([64, 1, 32, 16, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 16, 1], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 512, 1, 1], f32), T([64, 1, 512, 1, 1], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 256, 2, 2], f32), T([64, 1, 256, 2, 2], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 8, 4], f32), T([64, 1, 32, 8, 4], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 8, 4], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 128, 4, 4], f32), T([64, 1, 128, 4, 4], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 4, 16], f32), T([64, 1, 32, 4, 16], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 4, 16], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 1, 64, 8, 8], f32), T([64, 1, 64, 8, 8], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 32, 2, 64], f32), T([64, 1, 32, 2, 64], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 32, 2, 64], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 32, 2, 256], f32), T([64, 1, 32, 2, 256], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 32, 2, 256], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64], f32), 1e-06), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 7, 7], f32), T([64, 3, 7, 7], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64], f32), T([64], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 3, 3], f32), T([128, 64, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([128], f32), T([128], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 128, 3, 3], f32), T([128, 128, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 1, 1], f32), T([128, 64, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 3, 3], f32), T([256, 128, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([256], f32), T([256], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([256, 256, 3, 3], f32), T([256, 256, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 1, 1], f32), T([256, 128, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 3, 3], f32), T([512, 256, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([512], f32), T([512], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([512, 512, 3, 3], f32), T([512, 512, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 1, 1], f32), T([512, 256, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000, 512], f32), T([1000, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000], f32), T([1000], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 2,
            "inputs": "((T([64, 1, 64, 8, 8], f32), T([64, 1, 64, 8, 8], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 128, 4, 4], f32), T([64, 1, 128, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 256, 2, 2], f32), T([64, 1, 256, 2, 2], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 512, 1, 1], f32), T([64, 1, 512, 1, 1], f32)), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 1,
            "inputs": "((T([64, 1000, 1], f32), T([64, 1, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 9408], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 64], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 36864], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 73728], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 128], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 147456], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 8192], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 294912], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 256], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 589824], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 32768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 1179648], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 512], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 2359296], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 131072], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 512000], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 1, 64], f32), T([1, 64, 1000], f32)), {})"
        }
    ],
    "aten.clamp.default": [
        {
            "count": 1,
            "inputs": "((T([64], f32), None, 1.0), {})"
        }
    ],
    "aten.clamp_min.default": [
        {
            "count": 20,
            "inputs": "((T([64, 1, 32, 1, 1], f32), 0), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 1,
            "inputs": "((T([64, 3, 32, 32], f32), T([64, 3, 7, 7], f32), None, [2, 2], [3, 3], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 8, 8], f32), T([128, 64, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 128, 4, 4], f32), T([128, 128, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 8, 8], f32), T([128, 64, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([256, 128, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 256, 2, 2], f32), T([256, 256, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([256, 128, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([512, 256, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 512, 1, 1], f32), T([512, 512, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([512, 256, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 3,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32, stride=(0, 0, 0, 0)), T([512, 512, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 32768, 1, 1], f32), T([1, 32768, 1, 1], f32), T([32768, 512, 3, 3], f32, stride=(0, 0, 0, 0)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 256, 2, 2], f32, stride=(0, 0, 0, 0)), T([512, 256, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 32768, 1, 1], f32), T([1, 16384, 2, 2], f32), T([32768, 256, 1, 1], f32, stride=(0, 0, 0, 0)), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 256, 2, 2], f32, stride=(0, 0, 0, 0)), T([512, 256, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 32768, 1, 1], f32), T([1, 16384, 2, 2], f32), T([32768, 256, 3, 3], f32, stride=(0, 0, 0, 0)), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 256, 2, 2], f32, stride=(0, 0, 0, 0)), T([256, 256, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 16384, 2, 2], f32), T([1, 16384, 2, 2], f32), T([16384, 256, 3, 3], f32, stride=(0, 0, 0, 0)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 128, 4, 4], f32, stride=(0, 0, 0, 0)), T([256, 128, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 16384, 2, 2], f32), T([1, 8192, 4, 4], f32), T([16384, 128, 1, 1], f32, stride=(0, 0, 0, 0)), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 128, 4, 4], f32, stride=(0, 0, 0, 0)), T([256, 128, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 16384, 2, 2], f32), T([1, 8192, 4, 4], f32), T([16384, 128, 3, 3], f32, stride=(0, 0, 0, 0)), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 128, 4, 4], f32, stride=(0, 0, 0, 0)), T([128, 128, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 8192, 4, 4], f32), T([1, 8192, 4, 4], f32), T([8192, 128, 3, 3], f32, stride=(0, 0, 0, 0)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 64, 8, 8], f32, stride=(0, 0, 0, 0)), T([128, 64, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 8192, 4, 4], f32), T([1, 4096, 8, 8], f32), T([8192, 64, 1, 1], f32, stride=(0, 0, 0, 0)), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 64, 8, 8], f32, stride=(0, 0, 0, 0)), T([128, 64, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 8192, 4, 4], f32), T([1, 4096, 8, 8], f32), T([8192, 64, 3, 3], f32, stride=(0, 0, 0, 0)), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32, stride=(0, 0, 0, 0)), T([64, 64, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([1, 4096, 8, 8], f32), T([1, 4096, 8, 8], f32), T([4096, 64, 3, 3], f32, stride=(0, 0, 0, 0)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 4096, 16, 16], f32), T([1, 192, 32, 32], f32), T([4096, 3, 7, 7], f32, stride=(0, 0, 0, 0)), None, [2, 2], [3, 3], [1, 1], False, [0, 0], 64, [False, True, False]), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 512, 1, 1], f32), 1), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 2,
            "inputs": "((T([64], f32), T([64], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 7, 7], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64], f32), 64), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 3, 3], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([128], f32), 64), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 128, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 1, 1], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 3, 3], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([256], f32), 64), {})"
        },
        {
            "count": 3,
            "inputs": "((T([256, 256, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 1, 1], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 3, 3], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([512], f32), 64), {})"
        },
        {
            "count": 3,
            "inputs": "((T([512, 512, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 1, 1], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000, 512], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1000], f32), 64), {})"
        }
    ],
    "aten.gather.default": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 1000], f32), 2, T([64, 1, 1], i64)), {})"
        }
    ],
    "aten.linalg_vector_norm.default": [
        {
            "count": 1,
            "inputs": "((T([64, 9408], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 64], f32), 2, [-1]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 36864], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 73728], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 128], f32), 2, [-1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 147456], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 8192], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 294912], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 256], f32), 2, [-1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 589824], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 32768], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1179648], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 512], f32), 2, [-1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 2359296], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 131072], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512000], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1000], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([62, 64], f32), 2, [0]), {})"
        }
    ],
    "aten.max_pool2d_with_indices.default": [
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), [3, 3], [2, 2], [1, 1]), {})"
        }
    ],
    "aten.max_pool2d_with_indices_backward.default": [
        {
            "count": 1,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 16, 16], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([64, 64, 8, 8], i64)), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 512, 1, 1], f32), [4, 3], True), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([64, 512], f32), T([512, 1000], f32, stride=(1, 512))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1000], f32), T([1000, 512], f32)), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 1,
            "inputs": "((T([1000], f32), 1), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 1, 1], f32), 0.0625), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 1, 1], f32), 0.03125), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 1, 1], f32), 0.015625), {})"
        },
        {
            "count": 8,
            "inputs": "((T([64, 1, 32, 1, 1], f32), 0.0078125), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 32, 1, 1], f32), 0.001953125), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 64, 16, 16], f32), T([64, 1, 1], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 64, 8, 8], f32), T([64, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 128, 4, 4], f32), T([128, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 256, 2, 2], f32), T([256, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 512, 1, 1], f32), T([512, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 1000], f32), T([64, 1, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 16, 1], f32), T([64, 1, 32, 16, 1], f32)), {})"
        },
        {
            "count": 140,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([1, 32, 16, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 16, 1], f32), T([1, 32, 16, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([64, 1, 32, 16, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 16, 1], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 8, 4], f32), T([64, 1, 32, 8, 4], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([1, 32, 8, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 8, 1], f32), T([1, 32, 8, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([64, 1, 32, 8, 4], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 8, 1], f32), T([64, 1, 32, 8, 4], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 8, 1], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 4, 16], f32), T([64, 1, 32, 4, 16], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([1, 32, 4, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 4, 1], f32), T([1, 32, 4, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([64, 1, 32, 4, 16], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 4, 1], f32), T([64, 1, 32, 4, 16], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 4, 1], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 32, 2, 64], f32), T([64, 1, 32, 2, 64], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([1, 32, 2, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 2, 1], f32), T([1, 32, 2, 1], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([64, 1, 32, 2, 64], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 32, 2, 1], f32), T([64, 1, 32, 2, 64], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 2, 1], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 32, 2, 256], f32), T([64, 1, 32, 2, 256], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([64, 1, 32, 2, 256], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 32, 2, 1], f32), T([64, 1, 32, 2, 256], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64], f32), 1.0), {})"
        }
    ],
    "aten.native_group_norm.default": [
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), None, None, 64, 64, 256, 32, 1e-05), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), None, None, 64, 64, 64, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 128, 4, 4], f32), None, None, 64, 128, 16, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 256, 2, 2], f32), None, None, 64, 256, 4, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 512, 1, 1], f32), None, None, 64, 512, 1, 32, 1e-05), {})"
        }
    ],
    "aten.ne.Scalar": [
        {
            "count": 3,
            "inputs": "((T([64, 1], i64), -100), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 1], i64), -100), {})"
        }
    ],
    "aten.neg.default": [
        {
            "count": 1,
            "inputs": "((T([64, 1], f32),), {})"
        },
        {
            "count": 20,
            "inputs": "((T([64, 1, 32, 1, 1], f32),), {})"
        }
    ],
    "aten.new_empty.default": [
        {
            "count": 3,
            "inputs": "((T([1, 512, 1, 1], f32), []), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 3, 3], f32), []), {})"
        },
        {
            "count": 5,
            "inputs": "((T([1, 256, 2, 2], f32), []), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 256, 1, 1], f32), []), {})"
        },
        {
            "count": 4,
            "inputs": "((T([1, 256, 3, 3], f32), []), {})"
        },
        {
            "count": 5,
            "inputs": "((T([1, 128, 4, 4], f32), []), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 128, 1, 1], f32), []), {})"
        },
        {
            "count": 4,
            "inputs": "((T([1, 128, 3, 3], f32), []), {})"
        },
        {
            "count": 6,
            "inputs": "((T([1, 64, 8, 8], f32), []), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 64, 1, 1], f32), []), {})"
        },
        {
            "count": 5,
            "inputs": "((T([1, 64, 3, 3], f32), []), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 3, 7, 7], f32), []), {})"
        }
    ],
    "aten.reciprocal.default": [
        {
            "count": 1,
            "inputs": "((T([64], f32),), {})"
        }
    ],
    "aten.reciprocal_.default": [
        {
            "count": 20,
            "inputs": "((T([64, 1, 32, 1, 1], f32),), {})"
        }
    ],
    "aten.relu_.default": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 64, 16, 16], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 64, 8, 8], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 128, 4, 4], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 256, 2, 2], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 512, 1, 1], f32),), {})"
        }
    ],
    "aten.scatter.value": [
        {
            "count": 1,
            "inputs": "((T([64, 1, 1000], f32), 2, T([64, 1, 1], i64), -1.0), {})"
        }
    ],
    "aten.stack.default": [
        {
            "count": 1,
            "inputs": "(([T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32)],), {})"
        }
    ],
    "aten.sub.Scalar": [
        {
            "count": 20,
            "inputs": "((T([64, 1, 32, 1, 1], f32), 1e-05), {})"
        }
    ],
    "aten.sub.Tensor": [
        {
            "count": 40,
            "inputs": "((T([64, 1, 32, 1, 1], f32), T([64, 1, 32, 1, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 16, 1], f32), T([64, 1, 32, 16, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 8, 1], f32), T([64, 1, 32, 8, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 4, 1], f32), T([64, 1, 32, 4, 1], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 1, 32, 2, 1], f32), T([64, 1, 32, 2, 1], f32)), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([64, 1], b8), [1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1], f32), [1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 1000], f32), [1], True), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 16, 1], f32), [4]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 16, 1], f32), [3]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 16, 1], f32), [1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 8, 4], f32), [4]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 8, 1], f32), [3]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 8, 1], f32), [1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 4, 16], f32), [4]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 4, 1], f32), [3]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 4, 1], f32), [1]), {})"
        },
        {
            "count": 8,
            "inputs": "((T([64, 1, 32, 2, 64], f32), [4]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 2, 1], f32), [3]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 2, 1], f32), [1]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 1, 32, 2, 256], f32), [4]), {})"
        }
    ],
    "aten.threshold_backward.default": [
        {
            "count": 4,
            "inputs": "((T([64, 1, 512, 1, 1], f32), T([64, 1, 512, 1, 1], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 256, 2, 2], f32), T([64, 1, 256, 2, 2], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 128, 4, 4], f32), T([64, 1, 128, 4, 4], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 1, 64, 8, 8], f32), T([64, 1, 64, 8, 8], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 64, 16, 16], f32), T([64, 1, 64, 16, 16], f32), 0), {})"
        }
    ],
    "aten.unsqueeze_.default": [
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 16], f32), 4), {})"
        },
        {
            "count": 40,
            "inputs": "((T([64, 1, 32, 1], f32), 3), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 8], f32), 4), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 4], f32), 4), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 1, 32, 2], f32), 4), {})"
        }
    ],
    "aten.where.self": [
        {
            "count": 1,
            "inputs": "((T([64, 1], b8), T([64, 1], i64), T([], i64)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1], b8), T([64, 1], f32), T([], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 1], b8), T([64, 1, 1], i64), T([], i64)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 1], b8), T([64, 1, 1], f32), T([], f32)), {})"
        }
    ]
}