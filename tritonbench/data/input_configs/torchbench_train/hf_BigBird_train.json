{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([50358, 768], f32), T([4096, 768], f32), T([2, 768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([50358], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([2048, 50358], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([2048, 50358], f32), T([2048, 50358], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 12,
        "inputs": "((T([2, 12, 12, 64, 512], f32), -1, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 12,
        "inputs": "((T([2, 12, 12, 64, 512], f32), T([2, 12, 12, 64, 512], f32), -1, f32), {})"
    },
    "aten._to_copy.default": {
        "count": 12,
        "inputs": "((T([12, 14, 3], i32),), {'dtype': i64, 'device': 'cuda'})"
    },
    "aten._unsafe_view.default": {
        "count": 12,
        "inputs": "((T([2, 1024, 768], f32), [2048, 768]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([50358, 768], f32), T([50358, 768], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 36,
        "inputs": "((T([2, 12, 12, 64, 64], f32), T([2, 12, 12, 64, 64], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([50358], f32), T([2048, 768], f32), T([768, 50358], f32, stride=(1, 768))), {})"
    },
    "aten.any.default": {
        "count": 1,
        "inputs": "((T([2, 2], b8),), {})"
    },
    "aten.bmm.default": {
        "count": 24,
        "inputs": "((T([288, 64, 192], f32), T([288, 192, 64], f32)), {})"
    },
    "aten.cat.default": {
        "count": 12,
        "inputs": "(([T([2, 12, 1, 64, 64], f32), T([2, 12, 1, 64, 64], f32), T([2, 12, 12, 64, 64], f32), T([2, 12, 1, 64, 64], f32), T([2, 12, 1, 64, 64], f32)], 2), {})"
    },
    "aten.copy_.default": {
        "count": 36,
        "inputs": "((T([2, 12, 12, 64, 64], f32), T([2, 12, 12, 64, 64], f32)), {})"
    },
    "aten.div.Tensor_mode": {
        "count": 24,
        "inputs": "((T([1008], i64), 42), {'rounding_mode': 'floor'})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([4096, 768], f32), T([1, 1024], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([2, 1024, 768], f32), T([2, 1024], i64), 50358, 0, False), {})"
    },
    "aten.eq.Scalar": {
        "count": 1,
        "inputs": "((T([2, 2], i64), 0), {})"
    },
    "aten.index.Tensor": {
        "count": 24,
        "inputs": "((T([16, 64], f32), [T([504], i64)]), {})"
    },
    "aten.index_add.default": {
        "count": 24,
        "inputs": "((T([384, 64, 64], f32), 0, T([1008], i64), T([1008, 64, 64], f32)), {})"
    },
    "aten.index_select.default": {
        "count": 24,
        "inputs": "((T([384, 64, 64], f32), 0, T([1008], i64)), {})"
    },
    "aten.minimum.default": {
        "count": 24,
        "inputs": "((T([2, 1, 1, 448], f32), T([2, 12, 64, 448], f32)), {})"
    },
    "aten.mm.default": {
        "count": 12,
        "inputs": "((T([3072, 2048], f32, stride=(1, 3072)), T([2048, 768], f32)), {})"
    },
    "aten.mul.Scalar": {
        "count": 12,
        "inputs": "((T([2, 1024, 3072], f32), 3.0), {})"
    },
    "aten.mul.Tensor": {
        "count": 24,
        "inputs": "((T([2, 12, 12, 64, 192], f32, stride=(4718592, 393216, 32768, 512, 1)), 0.125), {})"
    },
    "aten.native_dropout.default": {
        "count": 25,
        "inputs": "((T([2, 1024, 768], f32), 0.1, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 25,
        "inputs": "((T([2, 1024, 768], f32), T([2, 1024, 768], b8), 1.1111111111111112), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 26,
        "inputs": "((T([2, 1024, 768], f32), [768], T([768], f32), T([768], f32), 1e-12), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 26,
        "inputs": "((T([2, 1024, 768], f32), T([2, 1024, 768], f32), [768], T([2, 1024, 1], f32), T([2, 1024, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
    },
    "aten.new_empty_strided.default": {
        "count": 36,
        "inputs": "((T([288, 64, 64], f32), [288, 64, 64], [4096, 64, 1]), {})"
    },
    "aten.new_ones.default": {
        "count": 24,
        "inputs": "((T([2, 12, 14, 64, 192], f32), [2, 12, 64, 256]), {'pin_memory': False})"
    },
    "aten.new_zeros.default": {
        "count": 24,
        "inputs": "((T([1008, 64, 64], f32), [384, 64, 64]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([2048, 50358], f32), T([2048], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([2048, 50358], f32), T([2048], i64), None, 1, -100), {})"
    },
    "aten.pow.Tensor_Scalar": {
        "count": 12,
        "inputs": "((T([2, 1024, 3072], f32), 2.0), {})"
    },
    "aten.rsub.Scalar": {
        "count": 12,
        "inputs": "((T([2, 12, 12, 64, 192], f32, stride=(2064384, 172032, 12288, 192, 1)), 1.0), {})"
    },
    "aten.select_backward.default": {
        "count": 12,
        "inputs": "((T([2, 12, 64, 64], f32, stride=(344064, 28672, 1, 448)), [2, 12, 16, 64, 64], 2, 1), {})"
    },
    "aten.slice_backward.default": {
        "count": 12,
        "inputs": "((T([2, 12, 12, 64, 64], f32, stride=(1769472, 147456, 12288, 1, 192)), [2, 12, 16, 64, 64], 2, 1, -3, 1), {})"
    },
    "aten.stack.default": {
        "count": 12,
        "inputs": "(([T([504, 64], f32), T([504, 64], f32)],), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([2, 1024, 768], f32), [0], True), {})"
    },
    "aten.tanh.default": {
        "count": 1,
        "inputs": "((T([2, 1024, 768], f32),), {})"
    },
    "aten.tanh_backward.default": {
        "count": 12,
        "inputs": "((T([2, 1024, 3072], f32), T([2, 1024, 3072], f32)), {})"
    },
    "aten.unbind.int": {
        "count": 12,
        "inputs": "((T([2, 12, 14, 3], i64),), {})"
    },
    "aten.unsqueeze_.default": {
        "count": 48,
        "inputs": "((T([2, 12, 64, 64], f32), 2), {})"
    }
}