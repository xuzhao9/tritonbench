{
    "aten._foreach_add.List": [
        {
            "count": 1,
            "inputs": "(([T([20005, 768], f32), T([3, 768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([2, 768], f32), T([2], f32), T([20005, 768], f32), T([20005], f32)], [T([20005, 768], f32), T([3, 768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([2, 768], f32), T([2], f32), T([20005, 768], f32), T([20005], f32)]), {'alpha': 0.01})"
        }
    ],
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([20005, 768], f32), T([3, 768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([2, 768], f32), T([2], f32), T([20005, 768], f32), T([20005], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([16, 2], f32), -1, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 128, 20005], f32), -1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([16, 128, 20005], f32, stride=(2560640, 1, 128)), T([16, 128, 20005], f32), -1, f32), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 2], f32), T([16, 2], f32), -1, f32), {})"
        }
    ],
    "aten._softmax.default": [
        {
            "count": 12,
            "inputs": "((T([16, 12, 128, 128], f32), -1, False), {})"
        }
    ],
    "aten._softmax_backward_data.default": [
        {
            "count": 12,
            "inputs": "((T([16, 12, 128, 128], f32), T([16, 12, 128, 128], f32), -1, f32), {})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 36,
            "inputs": "((T([16, 12, 128, 64], f32), [192, 128, 64]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 12, 64, 128], f32), [192, 64, 128]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([192, 128, 128], f32), [16, 12, 128, 128]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([192, 128, 64], f32), [16, 12, 128, 64]), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 12, 64], f32), [16, 128, 768]), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 128, 768], f32), [2048, 768]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 128, 768], f32), T([1, 128, 768], f32)), {})"
        },
        {
            "count": 122,
            "inputs": "((T([16, 128, 768], f32), T([16, 128, 768], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 1], f32), 1e-06), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 768], f32), T([768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([], f32), T([], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 48,
            "inputs": "((T([768], f32), T([2048, 768], f32), T([768, 768], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072], f32), T([2048, 768], f32), T([768, 3072], f32, stride=(1, 768))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768], f32), T([2048, 3072], f32), T([3072, 768], f32, stride=(1, 3072))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2], f32), T([16, 768], f32, stride=(98304, 1)), T([768, 2], f32, stride=(1, 768))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([20005], f32), T([2048, 768], f32), T([768, 20005], f32, stride=(1, 768))), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 12,
            "inputs": "((T([192, 128, 64], f32), T([192, 64, 128], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([192, 128, 128], f32), T([192, 128, 64], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([192, 128, 128], f32, stride=(16384, 1, 128)), T([192, 128, 64], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([192, 128, 64], f32), T([192, 64, 128], f32, stride=(8192, 1, 64))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([192, 64, 128], f32, stride=(8192, 1, 64)), T([192, 128, 128], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([192, 128, 128], f32), T([192, 128, 64], f32, stride=(8192, 1, 128))), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 24,
            "inputs": "((T([16, 128, 768], f32, stride=(128, 1, 0)), 768), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 96,
            "inputs": "((T([16, 128, 768], f32), T([16, 128, 1], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 12, 128, 128], f32), 8.0), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 1], f32), T([16, 128, 1], f32)), {})"
        }
    ],
    "aten.embedding.default": [
        {
            "count": 1,
            "inputs": "((T([20005, 768], f32), T([16, 128], i64), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 768], f32), T([16, 128], i64), 0), {})"
        }
    ],
    "aten.embedding_dense_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 128, 768], f32), T([16, 128], i64), 3, 0, False), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 128, 768], f32), T([16, 128], i64), 20005, 0, False), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 12,
            "inputs": "((T([16, 1, 128, 128], b8), 0), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 1], f32), 0), {})"
        }
    ],
    "aten.gelu.default": [
        {
            "count": 12,
            "inputs": "((T([16, 128, 3072], f32),), {})"
        }
    ],
    "aten.gelu_backward.default": [
        {
            "count": 12,
            "inputs": "((T([16, 128, 3072], f32), T([16, 128, 3072], f32)), {})"
        }
    ],
    "aten.gt.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 128], i64), 0), {})"
        }
    ],
    "aten.masked_fill.Scalar": [
        {
            "count": 12,
            "inputs": "((T([16, 12, 128, 128], f32), T([16, 1, 128, 128], b8), -1000000000.0), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 12, 128, 128], f32), T([16, 1, 128, 128], b8), 0), {})"
        }
    ],
    "aten.masked_fill_.Scalar": [
        {
            "count": 24,
            "inputs": "((T([16, 128, 1], f32), T([16, 128, 1], b8), 0), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 48,
            "inputs": "((T([16, 128, 768], f32), [-1], True), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([2048, 20005], f32), T([20005, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([20005, 2048], f32, stride=(1, 20005)), T([2048, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 2], f32), T([2, 768], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2, 16], f32, stride=(1, 2)), T([16, 768], f32, stride=(98304, 1))), {})"
        },
        {
            "count": 12,
            "inputs": "((T([2048, 768], f32), T([768, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([768, 2048], f32, stride=(1, 768)), T([2048, 3072], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([2048, 3072], f32), T([3072, 768], f32)), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3072, 2048], f32, stride=(1, 3072)), T([2048, 768], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([2048, 768], f32), T([768, 768], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([768, 2048], f32, stride=(1, 768)), T([2048, 768], f32)), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 24,
            "inputs": "((T([16, 128, 1], f32), 2), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 1], f32), 0.002607561929595828), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 24,
            "inputs": "((T([768], f32), T([16, 128, 768], f32)), {})"
        },
        {
            "count": 48,
            "inputs": "((T([16, 128, 768], f32), T([16, 128, 768], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 768], f32), T([768], f32)), {})"
        },
        {
            "count": 24,
            "inputs": "((T([16, 128, 1], f32), T([16, 128, 768], f32)), {})"
        }
    ],
    "aten.native_dropout.default": [
        {
            "count": 37,
            "inputs": "((T([16, 128, 768], f32), 0.1, True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 12, 128, 128], f32), 0.1, True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 128, 3072], f32), 0.1, True), {})"
        }
    ],
    "aten.native_dropout_backward.default": [
        {
            "count": 37,
            "inputs": "((T([16, 128, 768], f32), T([16, 128, 768], b8), 1.1111111111111112), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 128, 3072], f32), T([16, 128, 3072], b8), 1.1111111111111112), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 12, 128, 128], f32), T([16, 12, 128, 128], b8), 1.1111111111111112), {})"
        }
    ],
    "aten.neg.default": [
        {
            "count": 48,
            "inputs": "((T([16, 128, 768], f32),), {})"
        }
    ],
    "aten.nll_loss2d_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([16, 20005, 1, 128], f32), T([16, 1, 128], i64), None, 1, 0, T([], f32)), {})"
        }
    ],
    "aten.nll_loss2d_forward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 20005, 1, 128], f32), T([16, 1, 128], i64), None, 1, 0), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([16, 2], f32), T([16], i64), None, 1, 0, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 2], f32), T([16], i64), None, 1, 0), {})"
        }
    ],
    "aten.repeat.default": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 128], b8), [1, 128, 1]), {})"
        }
    ],
    "aten.select_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 768], f32), [16, 128, 768], 1, 0), {})"
        }
    ],
    "aten.std.correction": [
        {
            "count": 24,
            "inputs": "((T([16, 128, 768], f32), [-1]), {'correction': 1, 'keepdim': True})"
        }
    ],
    "aten.sub.Tensor": [
        {
            "count": 48,
            "inputs": "((T([16, 128, 768], f32), T([16, 128, 1], f32)), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([2048, 20005], f32), [0], True), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 2], f32), [0], True), {})"
        },
        {
            "count": 60,
            "inputs": "((T([2048, 768], f32), [0], True), {})"
        },
        {
            "count": 12,
            "inputs": "((T([2048, 3072], f32), [0], True), {})"
        },
        {
            "count": 48,
            "inputs": "((T([16, 128, 768], f32), [0, 1], True), {})"
        },
        {
            "count": 48,
            "inputs": "((T([16, 128, 768], f32), [2], True), {})"
        }
    ]
}