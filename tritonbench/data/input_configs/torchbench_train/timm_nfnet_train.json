{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([16, 3, 3, 3], f32), T([16, 1, 1, 1], f32), T([32, 16, 3, 3], f32), T([32, 1, 1, 1], f32), T([64, 32, 3, 3], f32), T([64, 1, 1, 1], f32), T([128, 64, 3, 3], f32), T([128, 1, 1, 1], f32), T([256, 128, 1, 1], f32), T([256, 1, 1, 1], f32), T([128, 128, 1, 1], f32), T([128, 1, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 1, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 1, 1, 1], f32), T([256, 128, 1, 1], f32), T([256, 1, 1, 1], f32), T([128, 256, 1, 1], f32), T([256, 128, 1, 1], f32), T([512, 256, 1, 1], f32), T([512, 1, 1, 1], f32), T([256, 256, 1, 1], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([512, 256, 1, 1], f32), T([512, 1, 1, 1], f32), T([256, 512, 1, 1], f32), T([512, 256, 1, 1], f32), T([256, 512, 1, 1], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([512, 256, 1, 1], f32), T([512, 1, 1, 1], f32), T([256, 512, 1, 1], f32), T([512, 256, 1, 1], f32), T([1536, 512, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 512, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1536, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([3072, 1536, 1, 1], f32), T([3072, 1, 1, 1], f32), T([1000, 3072], f32)], [T([16, 3, 3, 3], f32), T([16, 1, 1, 1], f32), T([32, 16, 3, 3], f32), T([32, 1, 1, 1], f32), T([64, 32, 3, 3], f32), T([64, 1, 1, 1], f32), T([128, 64, 3, 3], f32), T([128, 1, 1, 1], f32), T([256, 128, 1, 1], f32), T([256, 1, 1, 1], f32), T([128, 128, 1, 1], f32), T([128, 1, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 1, 1, 1], f32), T([128, 128, 3, 3], f32), T([128, 1, 1, 1], f32), T([256, 128, 1, 1], f32), T([256, 1, 1, 1], f32), T([128, 256, 1, 1], f32), T([256, 128, 1, 1], f32), T([512, 256, 1, 1], f32), T([512, 1, 1, 1], f32), T([256, 256, 1, 1], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([512, 256, 1, 1], f32), T([512, 1, 1, 1], f32), T([256, 512, 1, 1], f32), T([512, 256, 1, 1], f32), T([256, 512, 1, 1], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([256, 128, 3, 3], f32), T([256, 1, 1, 1], f32), T([512, 256, 1, 1], f32), T([512, 1, 1, 1], f32), T([256, 512, 1, 1], f32), T([512, 256, 1, 1], f32), T([1536, 512, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 512, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1536, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([768, 1536, 1, 1], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([768, 128, 3, 3], f32), T([768, 1, 1, 1], f32), T([1536, 768, 1, 1], f32), T([1536, 1, 1, 1], f32), T([768, 1536, 1, 1], f32), T([1536, 768, 1, 1], f32), T([3072, 1536, 1, 1], f32), T([3072, 1, 1, 1], f32), T([1000, 3072], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([128, 128, 48, 48], f32), T([128, 128, 48, 48], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([1000], f32), T([128, 3072], f32), T([3072, 1000], f32, stride=(1, 3072))), {})"
    },
    "aten.avg_pool2d.default": {
        "count": 1,
        "inputs": "((T([128, 1536, 12, 12], f32), [2, 2], [2, 2], [0, 0], True, False), {})"
    },
    "aten.avg_pool2d_backward.default": {
        "count": 1,
        "inputs": "((T([128, 256, 24, 24], f32), T([128, 256, 48, 48], f32), [2, 2], [2, 2], [0, 0], True, False, None), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([1000, 3072], f32),), {})"
    },
    "aten.constant_pad_nd.default": {
        "count": 1,
        "inputs": "((T([128, 64, 97, 97], f32), [0, -1, 0, -1]), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([128, 1536, 6, 6], f32), T([3072, 1536, 1, 1], f32), T([3072], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([128, 16, 96, 96], f32), T([128, 3, 193, 193], f32), T([16, 3, 3, 3], f32), [16], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([128, 256, 48, 48], f32, stride=(256, 1, 0, 0)), 2304), {})"
    },
    "aten.gelu.default": {
        "count": 1,
        "inputs": "((T([128, 3072, 6, 6], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 1,
        "inputs": "((T([128, 16, 96, 96], f32), T([128, 16, 96, 96], f32)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([128, 3072, 6, 6], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 128], f32, stride=(1, 1000)), T([128, 3072], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([128, 16, 96, 96], f32), 1.7015043497085571), {})"
    },
    "aten.mul_.Tensor": {
        "count": 1,
        "inputs": "((T([128, 3072, 6, 6], f32), 1.7015043497085571), {})"
    },
    "aten.native_batch_norm.default": {
        "count": 1,
        "inputs": "((T([1, 3072, 1536], f32), T([3072], f32), None, None, None, True, 0.0, 1e-05), {})"
    },
    "aten.native_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([1, 16, 27], f32), T([1, 16, 27], f32), T([16], f32), None, None, T([16], f32), T([16], f32), True, 1e-05, [True, True, False]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([128, 1000], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([128, 1000], f32), T([128], i64), None, 1, -100), {})"
    },
    "aten.random_.to": {
        "count": 1,
        "inputs": "((T([128], i64), 1000), {})"
    },
    "aten.relu_.default": {
        "count": 9,
        "inputs": "((T([128, 768, 1, 1], f32),), {})"
    },
    "aten.sigmoid.default": {
        "count": 9,
        "inputs": "((T([128, 1536, 1, 1], f32),), {})"
    },
    "aten.sigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([128, 256, 1, 1], f32), T([128, 256, 1, 1], f32)), {})"
    },
    "aten.sum.default": {
        "count": 1,
        "inputs": "((T([128, 256, 48, 48], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([128, 256, 48, 48], f32), [2, 3], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([128, 128, 1, 1], f32), T([128, 128, 1, 1], f32), 0), {})"
    }
}