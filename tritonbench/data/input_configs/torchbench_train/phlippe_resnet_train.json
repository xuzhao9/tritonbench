{
    "aten._foreach_add.List": [
        {
            "count": 1,
            "inputs": "(([T([16, 3, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([32, 16, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 16, 1, 1], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([64, 32, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 32, 1, 1], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([10, 64], f32), T([10], f32)], [T([16, 3, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 3, 3], f32), T([16], f32), T([16], f32), T([32, 16, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 16, 1, 1], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([32, 32, 3, 3], f32), T([32], f32), T([32], f32), T([64, 32, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 32, 1, 1], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([10, 64], f32), T([10], f32)]), {'alpha': 0.0001})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([128, 10], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([128, 10], f32), T([128, 10], f32), 1, f32), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 7,
            "inputs": "((T([128, 16, 32, 32], f32), T([128, 16, 32, 32], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 32, 16, 16], f32), T([128, 32, 16, 16], f32)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 64, 8, 8], f32), T([128, 64, 8, 8], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 19,
            "inputs": "((T([], i64), 1), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 1,
            "inputs": "((T([10], f32), T([128, 64], f32), T([64, 10], f32, stride=(1, 64))), {})"
        }
    ],
    "aten.clone.default": [
        {
            "count": 1,
            "inputs": "((T([16, 3, 3, 3], f32),), {})"
        },
        {
            "count": 14,
            "inputs": "((T([16], f32),), {})"
        },
        {
            "count": 6,
            "inputs": "((T([16, 16, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([32, 16, 3, 3], f32),), {})"
        },
        {
            "count": 13,
            "inputs": "((T([32], f32),), {})"
        },
        {
            "count": 5,
            "inputs": "((T([32, 32, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([32, 16, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 32, 3, 3], f32),), {})"
        },
        {
            "count": 13,
            "inputs": "((T([64], f32),), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 64, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 32, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10, 64], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10], f32),), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 1,
            "inputs": "((T([128, 3, 32, 32], f32), T([16, 3, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 16, 32, 32], f32), T([16, 16, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 16, 32, 32], f32), T([32, 16, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 32, 16, 16], f32), T([32, 32, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 16, 32, 32], f32), T([32, 16, 1, 1], f32), T([32], f32), [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 32, 16, 16], f32), T([64, 32, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 64, 8, 8], f32), T([64, 64, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 32, 16, 16], f32), T([64, 32, 1, 1], f32), T([64], f32), [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 5,
            "inputs": "((T([128, 64, 8, 8], f32), T([128, 64, 8, 8], f32), T([64, 64, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 8, 8], f32), T([128, 32, 16, 16], f32), T([64, 32, 1, 1], f32), [64], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 8, 8], f32), T([128, 32, 16, 16], f32), T([64, 32, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 5,
            "inputs": "((T([128, 32, 16, 16], f32), T([128, 32, 16, 16], f32), T([32, 32, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 32, 16, 16], f32), T([128, 16, 32, 32], f32), T([32, 16, 1, 1], f32), [32], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 32, 16, 16], f32), T([128, 16, 32, 32], f32), T([32, 16, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 16, 32, 32], f32), T([128, 16, 32, 32], f32), T([16, 16, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 16, 32, 32], f32), T([128, 3, 32, 32], f32), T([16, 3, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
        }
    ],
    "aten.cudnn_batch_norm.default": [
        {
            "count": 7,
            "inputs": "((T([128, 16, 32, 32], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 32, 16, 16], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 64, 8, 8], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), True, 0.1, 1e-05), {})"
        }
    ],
    "aten.cudnn_batch_norm_backward.default": [
        {
            "count": 6,
            "inputs": "((T([128, 64, 8, 8], f32), T([128, 64, 8, 8], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 32, 16, 16], f32), T([128, 32, 16, 16], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), T([32], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 7,
            "inputs": "((T([128, 16, 32, 32], f32), T([128, 16, 32, 32], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), 1e-05, T([0], u8)), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 1,
            "inputs": "((T([128, 64, 8, 8], f32, stride=(64, 1, 0, 0)), 64), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 1,
            "inputs": "((T([128, 64, 8, 8], f32), [-1, -2], True), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([128, 10], f32), T([10, 64], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10, 128], f32, stride=(1, 10)), T([128, 64], f32)), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([128, 10], f32), T([128], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([128, 10], f32), T([128], i64), None, 1, -100), {})"
        }
    ],
    "aten.relu.default": [
        {
            "count": 7,
            "inputs": "((T([128, 16, 32, 32], f32),), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 32, 16, 16], f32),), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 64, 8, 8], f32),), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([128, 10], f32), [0], True), {})"
        }
    ],
    "aten.threshold_backward.default": [
        {
            "count": 6,
            "inputs": "((T([128, 64, 8, 8], f32), T([128, 64, 8, 8], f32), 0), {})"
        },
        {
            "count": 6,
            "inputs": "((T([128, 32, 16, 16], f32), T([128, 32, 16, 16], f32), 0), {})"
        },
        {
            "count": 7,
            "inputs": "((T([128, 16, 32, 32], f32), T([128, 16, 32, 32], f32), 0), {})"
        }
    ]
}