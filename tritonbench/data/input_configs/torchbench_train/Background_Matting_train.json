{
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([64, 3, 7, 7], f32), T([64], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([64, 3, 7, 7], f32), T([64], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([64, 1, 7, 7], f32), T([64], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([64, 512, 1, 1], f32), T([64], f32), T([64], f32), T([64, 512, 1, 1], f32), T([64], f32), T([64], f32), T([64, 512, 1, 1], f32), T([64], f32), T([64], f32), T([256, 448, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([1, 64, 7, 7], f32), T([1], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128], f32), T([128], f32), T([64, 256, 3, 3], f32), T([64], f32), T([64], f32), T([64], f32), T([3, 64, 7, 7], f32), T([3], f32)],), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([64, 3, 4, 4], f32), T([64], f32), T([128, 64, 4, 4], f32), T([128], f32), T([256, 128, 4, 4], f32), T([256], f32), T([512, 256, 4, 4], f32), T([512], f32), T([1, 512, 4, 4], f32), T([1], f32)],), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 4,
            "inputs": "((T([3, 3, 512, 512], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 1, 512, 512], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 4, 512, 512], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 1, 512, 512], b8),), {'dtype': f32, 'device': 'cuda'})"
        },
        {
            "count": 2,
            "inputs": "((T([1, 1, 3, 3], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cpu'})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 1, 67, 67], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 8,
            "inputs": "((T([], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cpu'})"
        }
    ],
    "aten.abs.default": [
        {
            "count": 9,
            "inputs": "((T([1, 512, 512], f32),), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 512, 512], f32),), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 40,
            "inputs": "((T([3, 256, 128, 128], f32), T([3, 256, 128, 128], f32)), {})"
        },
        {
            "count": 15,
            "inputs": "((T([], f32), 1e-06), {})"
        },
        {
            "count": 16,
            "inputs": "((T([], f32), 0), {})"
        },
        {
            "count": 16,
            "inputs": "((T([], f32), T([], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 1, 512, 512], f32), 1), {})"
        },
        {
            "count": 7,
            "inputs": "((T([3, 3, 512, 512], f32), T([3, 3, 512, 512], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32), 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 512, 512], f32), T([3, 512, 512], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([3, 1, 512, 512], f32), T([3, 1, 512, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 256, 128, 128], f32, stride=(7340032, 16384, 128, 1)), T([3, 256, 128, 128], f32, stride=(8388608, 16384, 128, 1))), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 256, 128, 128], f32), T([3, 256, 128, 128], f32, stride=(8388608, 16384, 128, 1))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 256, 128, 128], f32, stride=(8388608, 16384, 128, 1)), T([3, 256, 128, 128], f32, stride=(8388608, 16384, 128, 1))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 128, 256, 256], f32, stride=(16777216, 65536, 256, 1)), T([3, 128, 256, 256], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1, 512, 4, 4], f32), T([1, 512, 4, 4], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1], f32), T([1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 4, 4], f32), T([512, 256, 4, 4], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512], f32), T([512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 4, 4], f32), T([256, 128, 4, 4], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256], f32), T([256], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 4, 4], f32), T([128, 64, 4, 4], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128], f32), T([128], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 4, 4], f32), T([64, 3, 4, 4], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64], f32), T([64], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 46,
            "inputs": "((T([], i64), 1), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 6,
            "inputs": "(([T([3, 256, 128, 128], f32), T([3, 256, 128, 128], f32)], 1), {})"
        },
        {
            "count": 2,
            "inputs": "(([T([3, 64, 128, 128], f32), T([3, 64, 128, 128], f32), T([3, 64, 128, 128], f32)], 1), {})"
        },
        {
            "count": 2,
            "inputs": "(([T([3, 256, 128, 128], f32), T([3, 192, 128, 128], f32)], 1), {})"
        },
        {
            "count": 2,
            "inputs": "(([T([3, 128, 256, 256], f32), T([3, 128, 256, 256], f32)], 1), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([1, 512, 216], f32, stride=(262144, 512, 1)), T([1, 512, 296], f32, stride=(262144, 512, 1))], 2), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([3, 512, 216], f32, stride=(262144, 512, 1)), T([3, 512, 296], f32, stride=(262144, 512, 1))], 2), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([1, 512, 65], f32, stride=(262144, 512, 1)), T([1, 512, 447], f32, stride=(262144, 512, 1))], 2), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([3, 512, 65], f32, stride=(262144, 512, 1)), T([3, 512, 447], f32, stride=(262144, 512, 1))], 2), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([1, 512, 350], f32, stride=(262144, 512, 1)), T([1, 512, 162], f32, stride=(262144, 512, 1))], 2), {})"
        },
        {
            "count": 1,
            "inputs": "(([T([3, 512, 350], f32, stride=(262144, 512, 1)), T([3, 512, 162], f32, stride=(262144, 512, 1))], 2), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 4,
            "inputs": "((T([3, 3, 518, 518], f32), T([64, 3, 7, 7], f32), T([64], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 8,
            "inputs": "((T([3, 64, 512, 512], f32), T([128, 64, 3, 3], f32), T([128], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 8,
            "inputs": "((T([3, 128, 256, 256], f32), T([256, 128, 3, 3], f32), T([256], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 1, 518, 518], f32), T([64, 1, 7, 7], f32), T([64], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 4, 518, 518], f32), T([64, 4, 7, 7], f32), T([64], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 512, 128, 128], f32), T([64, 512, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 448, 128, 128], f32), T([256, 448, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 52,
            "inputs": "((T([3, 256, 130, 130], f32), T([256, 256, 3, 3], f32), T([256], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 4,
            "inputs": "((T([3, 256, 256, 256], f32), T([128, 256, 3, 3], f32), T([128], f32), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 128, 512, 512], f32), T([64, 128, 3, 3], f32), T([64], f32), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 64, 518, 518], f32), T([1, 64, 7, 7], f32), T([1], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 256, 512, 512], f32), T([64, 256, 3, 3], f32), T([64], f32), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 64, 518, 518], f32), T([3, 64, 7, 7], f32), T([3], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 4,
            "inputs": "((T([3, 1, 512, 512], f32), T([1, 1, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 3, 512, 512], f32), T([64, 3, 4, 4], f32), T([64], f32), [2, 2], [2, 2], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 257, 257], f32), T([128, 64, 4, 4], f32), T([128], f32), [2, 2], [2, 2], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 128, 129, 129], f32), T([256, 128, 4, 4], f32), T([256], f32), [2, 2], [2, 2], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 256, 65, 65], f32), T([512, 256, 4, 4], f32), T([512], f32), [1, 1], [2, 2], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 512, 66, 66], f32), T([1, 512, 4, 4], f32), T([1], f32), [1, 1], [2, 2], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 3,
            "inputs": "((T([3, 1, 67, 67], f32), T([3, 512, 66, 66], f32), T([1, 512, 4, 4], f32), [1], [1, 1], [2, 2], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 512, 66, 66], f32), T([3, 256, 65, 65], f32), T([512, 256, 4, 4], f32), [512], [1, 1], [2, 2], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 256, 65, 65], f32), T([3, 128, 129, 129], f32), T([256, 128, 4, 4], f32), [256], [2, 2], [2, 2], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 128, 129, 129], f32), T([3, 64, 257, 257], f32), T([128, 64, 4, 4], f32), [128], [2, 2], [2, 2], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 257, 257], f32), T([3, 3, 512, 512], f32), T([64, 3, 4, 4], f32), [64], [2, 2], [2, 2], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 1, 512, 512], f32), T([3, 1, 512, 512], f32), T([1, 1, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 3, 512, 512], f32), T([3, 64, 518, 518], f32), T([3, 64, 7, 7], f32), [3], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 64, 512, 512], f32), T([3, 256, 512, 512], f32), T([64, 256, 3, 3], f32), [64], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 128, 256, 256], f32), T([3, 256, 256, 256], f32), T([128, 256, 3, 3], f32), [128], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 26,
            "inputs": "((T([3, 256, 128, 128], f32), T([3, 256, 130, 130], f32), T([256, 256, 3, 3], f32), [256], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 1, 512, 512], f32), T([3, 64, 518, 518], f32), T([1, 64, 7, 7], f32), [1], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 64, 512, 512], f32), T([3, 128, 512, 512], f32), T([64, 128, 3, 3], f32), [64], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 256, 128, 128], f32), T([3, 448, 128, 128], f32), T([256, 448, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 128, 128], f32), T([3, 512, 128, 128], f32), T([64, 512, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 256, 128, 128], f32), T([3, 128, 256, 256], f32), T([256, 128, 3, 3], f32), [256], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 128, 256, 256], f32), T([3, 64, 512, 512], f32), T([128, 64, 3, 3], f32), [128], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 64, 512, 512], f32), T([3, 1, 518, 518], f32), T([64, 1, 7, 7], f32), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 64, 512, 512], f32), T([3, 3, 518, 518], f32), T([64, 3, 7, 7], f32), [64], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
        }
    ],
    "aten.copy_.default": [
        {
            "count": 3,
            "inputs": "((T([3, 512, 512], f32), T([3, 512, 512], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 512, 66, 66], f32), T([3, 512, 66, 66], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 1536, 66, 66], f32), T([1, 1536, 66, 66], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 256, 65, 65], f32), T([3, 256, 65, 65], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 768, 65, 65], f32), T([1, 768, 65, 65], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 128, 129, 129], f32), T([3, 128, 129, 129], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 384, 129, 129], f32), T([1, 384, 129, 129], f32)), {})"
        },
        {
            "count": 9,
            "inputs": "((T([37632], u8), T([37632], u8)), {})"
        },
        {
            "count": 87,
            "inputs": "((T([256], u8), T([256], u8)), {})"
        },
        {
            "count": 46,
            "inputs": "((T([8], u8), T([8], u8)), {})"
        },
        {
            "count": 13,
            "inputs": "((T([294912], u8), T([294912], u8)), {})"
        },
        {
            "count": 63,
            "inputs": "((T([512], u8), T([512], u8)), {})"
        },
        {
            "count": 16,
            "inputs": "((T([1179648], u8), T([1179648], u8)), {})"
        },
        {
            "count": 335,
            "inputs": "((T([1024], u8), T([1024], u8)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([12544], u8), T([12544], u8)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([50176], u8), T([50176], u8)), {})"
        },
        {
            "count": 9,
            "inputs": "((T([131072], u8), T([131072], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([458752], u8), T([458752], u8)), {})"
        },
        {
            "count": 78,
            "inputs": "((T([2359296], u8), T([2359296], u8)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([4], u8), T([4], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([589824], u8), T([589824], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([12], u8), T([12], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([12288], u8), T([12288], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([524288], u8), T([524288], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([2097152], u8), T([2097152], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([8388608], u8), T([8388608], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([2048], u8), T([2048], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([32768], u8), T([32768], u8)), {})"
        }
    ],
    "aten.cudnn_batch_norm.default": [
        {
            "count": 6,
            "inputs": "((T([3, 64, 512, 512], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), False, 0.1, 1e-05), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 128, 256, 256], f32), T([128], f32), T([128], f32), T([128], f32), T([128], f32), False, 0.1, 1e-05), {})"
        },
        {
            "count": 31,
            "inputs": "((T([3, 256, 128, 128], f32), T([256], f32), T([256], f32), T([256], f32), T([256], f32), False, 0.1, 1e-05), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 128, 128], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), False, 0.1, 1e-05), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 64, 512, 512], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 128, 256, 256], f32), T([128], f32), T([128], f32), T([128], f32), T([128], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 31,
            "inputs": "((T([3, 256, 128, 128], f32), T([256], f32), T([256], f32), T([256], f32), T([256], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 128, 128], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), True, 0.1, 1e-05), {})"
        }
    ],
    "aten.cudnn_batch_norm_backward.default": [
        {
            "count": 5,
            "inputs": "((T([3, 64, 512, 512], f32), T([3, 64, 512, 512], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 5,
            "inputs": "((T([3, 128, 256, 256], f32), T([3, 128, 256, 256], f32), T([128], f32), T([128], f32), T([128], f32), T([128], f32), T([128], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 30,
            "inputs": "((T([3, 256, 128, 128], f32), T([3, 256, 128, 128], f32), T([256], f32), T([256], f32), T([256], f32), T([256], f32), T([256], f32), 1e-05, T([0], u8)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 128, 128], f32), T([3, 64, 128, 128], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), 1e-05, T([0], u8)), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 30,
            "inputs": "((T([], f32), T([], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([], f32), 3), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 1, 512, 512], f32), 2), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32), 2), {})"
        },
        {
            "count": 6,
            "inputs": "((T([], f32), 1), {})"
        }
    ],
    "aten.gt.Scalar": [
        {
            "count": 1,
            "inputs": "((T([3, 1, 512, 512], f32), -0.98), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 1, 512, 512], f32), 0.95), {})"
        },
        {
            "count": 15,
            "inputs": "((T([], f32), 0), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([3, 3, 512, 512], f32), [T([3], i64)]), {})"
        }
    ],
    "aten.leaky_relu_.default": [
        {
            "count": 3,
            "inputs": "((T([3, 64, 257, 257], f32), 0.2), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 128, 129, 129], f32), 0.2), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 256, 65, 65], f32), 0.2), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 512, 66, 66], f32), 0.2), {})"
        }
    ],
    "aten.leaky_relu_backward.default": [
        {
            "count": 3,
            "inputs": "((T([3, 512, 66, 66], f32), T([3, 512, 66, 66], f32), 0.2, True), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 256, 65, 65], f32), T([3, 256, 65, 65], f32), 0.2, True), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 128, 129, 129], f32), T([3, 128, 129, 129], f32), 0.2, True), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 257, 257], f32), T([3, 64, 257, 257], f32), 0.2, True), {})"
        }
    ],
    "aten.mse_loss.default": [
        {
            "count": 3,
            "inputs": "((T([3, 1, 67, 67], f32), T([3, 1, 67, 67], f32)), {})"
        }
    ],
    "aten.mse_loss_backward.default": [
        {
            "count": 3,
            "inputs": "((T([], f32), T([3, 1, 67, 67], f32), T([3, 1, 67, 67], f32), 1), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 27,
            "inputs": "((T([1, 512, 512], f32), T([1, 512, 512], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([], f32), 0.5), {})"
        },
        {
            "count": 21,
            "inputs": "((T([3, 512, 512], f32), T([1, 512, 512], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([3, 3, 512, 512], f32), T([3, 1, 512, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 1, 512, 512], f32), T([3, 3, 512, 512], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32), T([3, 512, 512], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([], f32), 0.05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([], f32), 1), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 512, 512], f32, stride=(0, 0, 0)), T([3, 512, 512], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 3, 512, 512], f32), T([3, 3, 512, 512], f32)), {})"
        },
        {
            "count": 9,
            "inputs": "((T([1, 512, 512], f32, stride=(0, 0, 0)), T([1, 512, 512], f32)), {})"
        }
    ],
    "aten.native_batch_norm.default": [
        {
            "count": 3,
            "inputs": "((T([1, 384, 129, 129], f32), None, None, None, None, True, 0.1, 1e-05), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 768, 65, 65], f32), None, None, None, None, True, 0.1, 1e-05), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 1536, 66, 66], f32), None, None, None, None, True, 0.1, 1e-05), {})"
        }
    ],
    "aten.native_batch_norm_backward.default": [
        {
            "count": 3,
            "inputs": "((T([1, 1536, 66, 66], f32), T([1, 1536, 66, 66], f32), None, None, None, T([1536], f32), T([1536], f32), True, 1e-05, [True, False, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 768, 65, 65], f32), T([1, 768, 65, 65], f32), None, None, None, T([768], f32), T([768], f32), True, 1e-05, [True, False, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 384, 129, 129], f32), T([1, 384, 129, 129], f32), None, None, None, T([384], f32), T([384], f32), True, 1e-05, [True, False, False]), {})"
        }
    ],
    "aten.neg.default": [
        {
            "count": 6,
            "inputs": "((T([3, 512, 512], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 1, 512, 512], f32),), {})"
        },
        {
            "count": 9,
            "inputs": "((T([1, 512, 512], f32),), {})"
        }
    ],
    "aten.new_empty_strided.default": [
        {
            "count": 3,
            "inputs": "((T([1, 1536, 66, 66], f32), [1, 1536, 66, 66], [6690816, 4356, 66, 1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 768, 65, 65], f32), [1, 768, 65, 65], [3244800, 4225, 65, 1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 384, 129, 129], f32), [1, 384, 129, 129], [6390144, 16641, 129, 1]), {})"
        }
    ],
    "aten.new_zeros.default": [
        {
            "count": 3,
            "inputs": "((T([3, 512, 66, 66], f32), [6690816]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 256, 65, 65], f32), [3244800]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 128, 129, 129], f32), [6390144]), {})"
        }
    ],
    "aten.reflection_pad2d.default": [
        {
            "count": 4,
            "inputs": "((T([3, 3, 512, 512], f32), [3, 3, 3, 3]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 1, 512, 512], f32), [3, 3, 3, 3]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 4, 512, 512], f32), [3, 3, 3, 3]), {})"
        },
        {
            "count": 52,
            "inputs": "((T([3, 256, 128, 128], f32), [1, 1, 1, 1]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([3, 64, 512, 512], f32), [3, 3, 3, 3]), {})"
        }
    ],
    "aten.reflection_pad2d_backward.default": [
        {
            "count": 2,
            "inputs": "((T([3, 64, 518, 518], f32), T([3, 64, 512, 512], f32), [3, 3, 3, 3]), {})"
        },
        {
            "count": 26,
            "inputs": "((T([3, 256, 130, 130], f32), T([3, 256, 128, 128], f32), [1, 1, 1, 1]), {})"
        }
    ],
    "aten.relu_.default": [
        {
            "count": 12,
            "inputs": "((T([3, 64, 512, 512], f32),), {})"
        },
        {
            "count": 12,
            "inputs": "((T([3, 128, 256, 256], f32),), {})"
        },
        {
            "count": 36,
            "inputs": "((T([3, 256, 128, 128], f32),), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 64, 128, 128], f32),), {})"
        }
    ],
    "aten.rsub.Scalar": [
        {
            "count": 2,
            "inputs": "((T([3, 1, 512, 512], f32), 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32), 1), {})"
        }
    ],
    "aten.select_backward.default": [
        {
            "count": 2,
            "inputs": "((T([3, 512, 512], f32), [3, 3, 512, 512], 0, 2), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 512, 512], f32), [3, 3, 512, 512], 0, 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 512, 512], f32), [3, 3, 512, 512], 0, 0), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32), [3, 1, 512, 512], 0, 2), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32), [3, 1, 512, 512], 0, 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([1, 512, 512], f32), [3, 1, 512, 512], 0, 0), {})"
        }
    ],
    "aten.sgn.default": [
        {
            "count": 6,
            "inputs": "((T([3, 512, 512], f32),), {})"
        },
        {
            "count": 9,
            "inputs": "((T([1, 512, 512], f32),), {})"
        }
    ],
    "aten.sub.Tensor": [
        {
            "count": 9,
            "inputs": "((T([1, 512, 512], f32), T([1, 512, 512], f32)), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 512, 512], f32), T([3, 512, 512], f32)), {})"
        }
    ],
    "aten.sum.default": [
        {
            "count": 39,
            "inputs": "((T([1, 512, 512], f32),), {})"
        },
        {
            "count": 6,
            "inputs": "((T([3, 512, 512], f32),), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 2,
            "inputs": "((T([3, 3, 512, 512], f32), [1], True), {})"
        }
    ],
    "aten.tanh.default": [
        {
            "count": 2,
            "inputs": "((T([3, 1, 512, 512], f32),), {})"
        }
    ],
    "aten.tanh_backward.default": [
        {
            "count": 1,
            "inputs": "((T([3, 1, 512, 512], f32), T([3, 1, 512, 512], f32)), {})"
        }
    ],
    "aten.threshold_backward.default": [
        {
            "count": 5,
            "inputs": "((T([3, 64, 512, 512], f32), T([3, 64, 512, 512], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 128, 256, 256], f32, stride=(16777216, 65536, 256, 1)), T([3, 128, 256, 256], f32), 0), {})"
        },
        {
            "count": 16,
            "inputs": "((T([3, 256, 128, 128], f32), T([3, 256, 128, 128], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([3, 128, 256, 256], f32), T([3, 128, 256, 256], f32), 0), {})"
        },
        {
            "count": 3,
            "inputs": "((T([3, 64, 128, 128], f32, stride=(7340032, 16384, 128, 1)), T([3, 64, 128, 128], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 256, 128, 128], f32, stride=(8388608, 16384, 128, 1)), T([3, 256, 128, 128], f32), 0), {})"
        }
    ],
    "aten.upsample_bilinear2d.default": [
        {
            "count": 4,
            "inputs": "((T([3, 256, 128, 128], f32), [256, 256], True, 2.0, 2.0), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 128, 256, 256], f32), [512, 512], True, 2.0, 2.0), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 256, 256, 256], f32), [512, 512], True, 2.0, 2.0), {})"
        }
    ],
    "aten.upsample_bilinear2d_backward.default": [
        {
            "count": 1,
            "inputs": "((T([3, 256, 512, 512], f32), [512, 512], [3, 256, 256, 256], True, 2.0, 2.0), {})"
        },
        {
            "count": 2,
            "inputs": "((T([3, 256, 256, 256], f32), [256, 256], [3, 256, 128, 128], True, 2.0, 2.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 128, 512, 512], f32), [512, 512], [3, 128, 256, 256], True, 2.0, 2.0), {})"
        }
    ]
}