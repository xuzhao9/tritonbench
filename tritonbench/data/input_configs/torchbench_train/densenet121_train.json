{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([64, 3, 7, 7], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([128, 64, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([96], f32), T([96], f32), T([128, 96, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128, 128, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([160], f32), T([160], f32), T([128, 160, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([192], f32), T([192], f32), T([128, 192, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([224], f32), T([224], f32), T([128, 224, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([256], f32), T([256], f32), T([128, 256, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([160], f32), T([160], f32), T([128, 160, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([192], f32), T([192], f32), T([128, 192, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([224], f32), T([224], f32), T([128, 224, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([256], f32), T([256], f32), T([128, 256, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([288], f32), T([288], f32), T([128, 288, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([320], f32), T([320], f32), T([128, 320, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([352], f32), T([352], f32), T([128, 352, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([384], f32), T([384], f32), T([128, 384, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([416], f32), T([416], f32), T([128, 416, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([448], f32), T([448], f32), T([128, 448, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([480], f32), T([480], f32), T([128, 480, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([512], f32), T([512], f32), T([256, 512, 1, 1], f32), T([256], f32), T([256], f32), T([128, 256, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([288], f32), T([288], f32), T([128, 288, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([320], f32), T([320], f32), T([128, 320, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([352], f32), T([352], f32), T([128, 352, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([384], f32), T([384], f32), T([128, 384, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([416], f32), T([416], f32), T([128, 416, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([448], f32), T([448], f32), T([128, 448, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([480], f32), T([480], f32), T([128, 480, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([512], f32), T([512], f32), T([128, 512, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([544], f32), T([544], f32), T([128, 544, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([576], f32), T([576], f32), T([128, 576, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([608], f32), T([608], f32), T([128, 608, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([640], f32), T([640], f32), T([128, 640, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([672], f32), T([672], f32), T([128, 672, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([704], f32), T([704], f32), T([128, 704, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([736], f32), T([736], f32), T([128, 736, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([768], f32), T([768], f32), T([128, 768, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([800], f32), T([800], f32), T([128, 800, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([832], f32), T([832], f32), T([128, 832, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([864], f32), T([864], f32), T([128, 864, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([896], f32), T([896], f32), T([128, 896, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([928], f32), T([928], f32), T([128, 928, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([960], f32), T([960], f32), T([128, 960, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([992], f32), T([992], f32), T([128, 992, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([1024], f32), T([1024], f32), T([512, 1024, 1, 1], f32), T([512], f32), T([512], f32), T([128, 512, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([544], f32), T([544], f32), T([128, 544, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([576], f32), T([576], f32), T([128, 576, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([608], f32), T([608], f32), T([128, 608, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([640], f32), T([640], f32), T([128, 640, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([672], f32), T([672], f32), T([128, 672, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([704], f32), T([704], f32), T([128, 704, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([736], f32), T([736], f32), T([128, 736, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([768], f32), T([768], f32), T([128, 768, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([800], f32), T([800], f32), T([128, 800, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([832], f32), T([832], f32), T([128, 832, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([864], f32), T([864], f32), T([128, 864, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([896], f32), T([896], f32), T([128, 896, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([928], f32), T([928], f32), T([128, 928, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([960], f32), T([960], f32), T([128, 960, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([992], f32), T([992], f32), T([128, 992, 1, 1], f32), T([128], f32), T([128], f32), T([32, 128, 3, 3], f32), T([1024], f32), T([1024], f32), T([1000, 1024], f32), T([1000], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), T([256, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([256, 64, 56, 56], f32), T([256, 64, 56, 56], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 242,
        "inputs": "((T([], i64), 1), {})"
    },
    "aten.addmm.default": {
        "count": 2,
        "inputs": "((T([1000], f32), T([256, 1024], f32), T([1024, 1000], f32, stride=(1, 1024))), {})"
    },
    "aten.avg_pool2d.default": {
        "count": 2,
        "inputs": "((T([256, 512, 14, 14], f32), [2, 2], [2, 2]), {})"
    },
    "aten.avg_pool2d_backward.default": {
        "count": 1,
        "inputs": "((T([256, 128, 28, 28], f32), T([256, 128, 56, 56], f32), [2, 2], [2, 2], [0, 0], False, True, None), {})"
    },
    "aten.cat.default": {
        "count": 2,
        "inputs": "(([T([256, 512, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32), T([256, 32, 7, 7], f32)], 1), {})"
    },
    "aten.convolution.default": {
        "count": 2,
        "inputs": "((T([256, 992, 7, 7], f32), T([128, 992, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([256, 64, 112, 112], f32), T([256, 3, 224, 224], f32), T([64, 3, 7, 7], f32), [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 2,
        "inputs": "((T([256, 1024, 7, 7], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), True, 0.1, 1e-05), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 1,
        "inputs": "((T([256, 64, 112, 112], f32), T([256, 64, 112, 112], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), 1e-05, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([256, 1024, 7, 7], f32, stride=(1024, 1, 0, 0)), 49), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 2,
        "inputs": "((T([256, 64, 112, 112], f32), [3, 3], [2, 2], [1, 1]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([256, 64, 56, 56], f32), T([256, 64, 112, 112], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([256, 64, 56, 56], i64)), {})"
    },
    "aten.mean.dim": {
        "count": 2,
        "inputs": "((T([256, 1024, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1000, 256], f32, stride=(1, 1000)), T([256, 1024], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([256, 1000], f32, stride=(0, 0)), T([256, 1000], f32)), {})"
    },
    "aten.neg.default": {
        "count": 2,
        "inputs": "((T([], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 2,
        "inputs": "((T([256, 1024, 7, 7], f32),), {})"
    },
    "aten.sum.default": {
        "count": 1,
        "inputs": "((T([256, 1000], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([256, 1000], f32), [0], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([256, 64, 112, 112], f32), T([256, 64, 112, 112], f32), 0), {})"
    }
}