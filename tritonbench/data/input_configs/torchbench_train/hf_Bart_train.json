{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([50265, 768], f32), T([1026, 768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([1026, 768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768, 768], f32), T([768], f32), T([768], f32), T([768], f32), T([3072, 768], f32), T([3072], f32), T([768, 3072], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32), T([768], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([2048, 50265], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([2048, 50265], f32), T([2048, 50265], f32), 1, f32), {})"
    },
    "aten._scaled_dot_product_efficient_attention.default": {
        "count": 6,
        "inputs": "((T([4, 12, 512, 64], f32), T([4, 12, 512, 64], f32), T([4, 12, 512, 64], f32), None, True, 0.1, True), {'scale': 0.125})"
    },
    "aten._scaled_dot_product_efficient_attention_backward.default": {
        "count": 6,
        "inputs": "((T([4, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([4, 12, 512, 64], f32), T([4, 12, 512, 64], f32), T([4, 12, 512, 64], f32), None, T([4, 12, 512, 64], f32, stride=(393216, 64, 768, 1)), T([4, 12, 512], f32), T([], i64), T([], i64), 0.1, [True, True, True, False], True), {'scale': 0.125})"
    },
    "aten._unsafe_view.default": {
        "count": 1,
        "inputs": "((T([2048, 50265], f32), [4, 512, 50265]), {})"
    },
    "aten.add.Tensor": {
        "count": 2,
        "inputs": "((T([50265, 768], f32), T([50265, 768], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 12,
        "inputs": "((T([768], f32), T([2048, 3072], f32), T([3072, 768], f32, stride=(1, 3072))), {})"
    },
    "aten.all.default": {
        "count": 1,
        "inputs": "((T([4, 512], b8),), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([4, 511], i64, stride=(512, 1)),), {})"
    },
    "aten.copy_.default": {
        "count": 1,
        "inputs": "((T([4, 511], i64, stride=(512, 1)), T([4, 511], i64)), {})"
    },
    "aten.embedding.default": {
        "count": 1,
        "inputs": "((T([1026, 768], f32), T([1, 512], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 1,
        "inputs": "((T([4, 512, 768], f32), T([4, 512], i64), 1026, -1, False), {})"
    },
    "aten.eq.Scalar": {
        "count": 1,
        "inputs": "((T([4, 512], f32), 1), {})"
    },
    "aten.fill_.Tensor": {
        "count": 1,
        "inputs": "((T([4], i64, stride=(512,)), T([], i64)), {})"
    },
    "aten.gelu.default": {
        "count": 12,
        "inputs": "((T([4, 512, 3072], f32),), {})"
    },
    "aten.gelu_backward.default": {
        "count": 12,
        "inputs": "((T([4, 512, 3072], f32), T([4, 512, 3072], f32)), {})"
    },
    "aten.lt.Scalar": {
        "count": 12,
        "inputs": "((T([], f32), 0.0), {})"
    },
    "aten.masked_fill_.Scalar": {
        "count": 1,
        "inputs": "((T([4, 512], i64), T([4, 512], b8), 1), {})"
    },
    "aten.mm.default": {
        "count": 72,
        "inputs": "((T([768, 2048], f32, stride=(1, 768)), T([2048, 768], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 4,
        "inputs": "((T([4, 512, 768], f32), 1.0), {})"
    },
    "aten.native_dropout.default": {
        "count": 12,
        "inputs": "((T([4, 512, 3072], f32), 0.1, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 12,
        "inputs": "((T([4, 512, 3072], f32), T([4, 512, 3072], b8), 1.1111111111111112), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 32,
        "inputs": "((T([4, 512, 768], f32), [768], T([768], f32), T([768], f32), 1e-05), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 32,
        "inputs": "((T([4, 512, 768], f32), T([4, 512, 768], f32), [768], T([4, 512, 1], f32), T([4, 512, 1], f32), T([768], f32), T([768], f32), [True, True, True]), {})"
    },
    "aten.new_zeros.default": {
        "count": 1,
        "inputs": "((T([4, 512], i64), [4, 512]), {'pin_memory': False})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([2048, 50265], f32), T([2048], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([2048, 50265], f32), T([2048], i64), None, 1, -100), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([4, 512, 768], f32), [0], True), {})"
    }
}