{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([32, 6, 7, 7], f32), T([32], f32), T([32, 32, 7, 7], f32), T([32], f32), T([64, 32, 5, 5], f32), T([64], f32), T([64, 64, 5, 5], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 1024, 3, 3], f32), T([512], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256, 512, 3, 3], f32), T([256], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128, 256, 3, 3], f32), T([128], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64, 128, 3, 3], f32), T([64], f32), T([32, 64, 3, 3], f32), T([32], f32), T([32, 64, 3, 3], f32), T([32], f32), T([4, 32, 3, 3], f32), T([4], f32), T([32, 20, 7, 7], f32), T([32], f32), T([32, 32, 7, 7], f32), T([32], f32), T([64, 32, 5, 5], f32), T([64], f32), T([64, 64, 5, 5], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512, 1024, 3, 3], f32), T([512], f32), T([256, 512, 3, 3], f32), T([256], f32), T([256, 512, 3, 3], f32), T([256], f32), T([128, 256, 3, 3], f32), T([128], f32), T([128, 256, 3, 3], f32), T([128], f32), T([64, 128, 3, 3], f32), T([64], f32), T([64, 128, 3, 3], f32), T([64], f32), T([32, 64, 3, 3], f32), T([32], f32), T([32, 64, 3, 3], f32), T([32], f32), T([5, 32, 3, 3], f32), T([5], f32)],), {})"
    },
    "aten._to_copy.default": {
        "count": 6,
        "inputs": "((T([6, 352, 352], i64, stride=(0, 1, 0)),), {'dtype': f32})"
    },
    "aten.abs.default": {
        "count": 2,
        "inputs": "((T([6, 2, 351, 352], f32),), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([6, 4, 352, 352], f32), T([6, 4, 352, 352], f32)), {})"
    },
    "aten.avg_pool2d.default": {
        "count": 2,
        "inputs": "((T([6, 512, 22, 22], f32), [2, 2]), {})"
    },
    "aten.avg_pool2d_backward.default": {
        "count": 2,
        "inputs": "((T([6, 32, 176, 176], f32), T([6, 32, 352, 352], f32), [2, 2], [], [0, 0], False, True, None), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([6, 3, 352, 352], f32), T([6, 3, 352, 352], f32), T([6, 2, 352, 352], f32, stride=(495616, 123904, 352, 1)), T([6, 2, 352, 352], f32, stride=(495616, 123904, 352, 1)), T([6, 2, 352, 352], f32), T([6, 2, 352, 352], f32), T([6, 3, 352, 352], f32), T([6, 3, 352, 352], f32)], 1), {})"
    },
    "aten.convolution.default": {
        "count": 4,
        "inputs": "((T([6, 512, 44, 44], f32), T([512, 512, 3, 3], f32), T([512], f32), [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([6, 32, 352, 352], f32), T([6, 6, 352, 352], f32), T([32, 6, 7, 7], f32), [32], [1, 1], [3, 3], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
    },
    "aten.div.Scalar": {
        "count": 5,
        "inputs": "((T([6, 3, 352, 352], f32, stride=(0, 0, 0, 0)), 2230272), {})"
    },
    "aten.div.Tensor": {
        "count": 4,
        "inputs": "((T([6, 3, 352, 352], f32), T([6, 1, 352, 352], f32)), {})"
    },
    "aten.grid_sampler_2d.default": {
        "count": 6,
        "inputs": "((T([6, 3, 352, 352], f32), T([6, 352, 352, 2], f32), 0, 0, False), {})"
    },
    "aten.grid_sampler_2d_backward.default": {
        "count": 6,
        "inputs": "((T([6, 3, 352, 352], f32), T([6, 3, 352, 352], f32), T([6, 352, 352, 2], f32), 0, 0, False, [False, True]), {})"
    },
    "aten.index.Tensor": {
        "count": 8,
        "inputs": "((T([7], f32), [T([6], i64)]), {})"
    },
    "aten.leaky_relu.default": {
        "count": 1,
        "inputs": "((T([6, 5, 352, 352], f32), 0.1), {})"
    },
    "aten.leaky_relu_backward.default": {
        "count": 1,
        "inputs": "((T([6, 4, 352, 352], f32), T([6, 4, 352, 352], f32), 0.1, False), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 2,
        "inputs": "((T([6, 256, 88, 88], f32), [2, 2], [2, 2]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([6, 64, 176, 176], f32), T([6, 64, 352, 352], f32), [2, 2], [2, 2], [0, 0], [1, 1], False, T([6, 64, 176, 176], i64)), {})"
    },
    "aten.mean.default": {
        "count": 2,
        "inputs": "((T([6, 2, 351, 352], f32),), {})"
    },
    "aten.mse_loss.default": {
        "count": 1,
        "inputs": "((T([6, 512, 44, 44], f32), T([6, 512, 44, 44], f32)), {})"
    },
    "aten.mse_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([6, 512, 44, 44], f32), T([6, 512, 44, 44], f32), 1), {})"
    },
    "aten.mul.Tensor": {
        "count": 4,
        "inputs": "((T([6, 2, 352, 352], f32), T([6, 1, 1, 1], f32)), {})"
    },
    "aten.neg.default": {
        "count": 1,
        "inputs": "((T([6, 1, 352, 352], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 4,
        "inputs": "((T([6, 512, 44, 44], f32),), {})"
    },
    "aten.rsub.Scalar": {
        "count": 1,
        "inputs": "((T([6, 1, 352, 352], f32), 1), {})"
    },
    "aten.select_backward.default": {
        "count": 6,
        "inputs": "((T([6, 352, 352], f32), [6, 2, 352, 352], 1, 0), {})"
    },
    "aten.sgn.default": {
        "count": 5,
        "inputs": "((T([6, 3, 352, 352], f32),), {})"
    },
    "aten.sigmoid.default": {
        "count": 1,
        "inputs": "((T([6, 1, 352, 352], f32, stride=(619520, 123904, 352, 1)),), {})"
    },
    "aten.sigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([6, 1, 352, 352], f32), T([6, 1, 352, 352], f32)), {})"
    },
    "aten.slice_backward.default": {
        "count": 1,
        "inputs": "((T([6, 2, 352, 352], f32), [6, 4, 352, 352], 1, 0, 2, 1), {})"
    },
    "aten.stack.default": {
        "count": 6,
        "inputs": "(([T([6, 352, 352], f32), T([6, 352, 352], f32)], 3), {})"
    },
    "aten.sub.Tensor": {
        "count": 2,
        "inputs": "((T([6, 2, 351, 352], f32, stride=(495616, 123904, 352, 1)), T([6, 2, 351, 352], f32, stride=(495616, 123904, 352, 1))), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 3,
        "inputs": "((T([6, 3, 352, 352], f32), [1], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 2,
        "inputs": "((T([6, 64, 352, 352], f32), T([6, 64, 352, 352], f32), 0), {})"
    },
    "aten.upsample_bilinear2d.default": {
        "count": 2,
        "inputs": "((T([6, 64, 176, 176], f32), [352, 352], False, 2.0, 2.0), {})"
    },
    "aten.upsample_bilinear2d_backward.default": {
        "count": 2,
        "inputs": "((T([6, 512, 22, 22], f32), [22, 22], [6, 512, 11, 11], False, 2.0, 2.0), {})"
    }
}