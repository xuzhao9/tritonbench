{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([64, 3, 7, 7], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128, 64, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256, 128, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512, 256, 1, 1], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([10, 512], f32), T([10], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([64, 10], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([64, 10], f32), T([64, 10], f32), 1, f32), {})"
    },
    "aten._unsafe_view.default": {
        "count": 1,
        "inputs": "((T([64, 3, 7, 7, 16, 16], f32), [64, 147, 256]), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([10], f32), T([10], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 2,
        "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([10], f32), T([64, 512], f32), T([512, 10], f32, stride=(1, 512))), {})"
    },
    "aten.bmm.default": {
        "count": 1,
        "inputs": "((T([64, 64, 256], f32), T([64, 256, 147], f32, stride=(37632, 1, 256))), {})"
    },
    "aten.clamp.default": {
        "count": 1,
        "inputs": "((T([64], f32), None, 1.0), {})"
    },
    "aten.constant_pad_nd.default": {
        "count": 1,
        "inputs": "((T([64, 3, 32, 32], f32), [3, 3, 3, 3], 0.0), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([64, 256, 2, 2], f32), T([512, 256, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([64, 64, 16, 16], f32), T([64, 3, 32, 32], f32), T([64, 3, 7, 7], f32), [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.copy_.default": {
        "count": 1,
        "inputs": "((T([64, 64, 3, 7, 7], f32), T([64, 64, 3, 7, 7], f32)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([64, 512, 1, 1], f32), 1), {})"
    },
    "aten.div_.Tensor": {
        "count": 1,
        "inputs": "((T([10], f32), 64), {})"
    },
    "aten.linalg_vector_norm.default": {
        "count": 1,
        "inputs": "((T([64, 62], f32), 2, [1]), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 1,
        "inputs": "((T([64, 64, 16, 16], f32), [3, 3], [2, 2], [1, 1]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 16, 16], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([64, 64, 8, 8], i64)), {})"
    },
    "aten.mean.dim": {
        "count": 1,
        "inputs": "((T([64, 512, 1, 1], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([10, 64], f32, stride=(1, 10)), T([64, 1], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([64], f32), 1.0), {})"
    },
    "aten.native_group_norm.default": {
        "count": 1,
        "inputs": "((T([64, 64, 16, 16], f32), None, None, 64, 64, 256, 32, 1e-05), {})"
    },
    "aten.native_group_norm_backward.default": {
        "count": 1,
        "inputs": "((T([64, 64, 16, 16], f32), T([64, 64, 16, 16], f32), T([64, 32], f32), T([64, 32], f32), T([64], f32), 64, 64, 256, 32, [True, True, True]), {})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([64, 10], f32), T([64], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([64, 10], f32), T([64], i64), None, 1, -100), {})"
    },
    "aten.reciprocal.default": {
        "count": 1,
        "inputs": "((T([64], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 4,
        "inputs": "((T([64, 512, 1, 1], f32),), {})"
    },
    "aten.stack.default": {
        "count": 1,
        "inputs": "(([T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32)], 1), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 2,
        "inputs": "((T([64, 64, 16, 16], f32), [2, 3]), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([64, 64, 16, 16], f32), T([64, 64, 16, 16], f32), 0), {})"
    },
    "aten.zero_.default": {
        "count": 1,
        "inputs": "((T([10], f32),), {})"
    }
}