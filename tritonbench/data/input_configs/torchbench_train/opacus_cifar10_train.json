{
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([64, 3, 7, 7], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([64, 64, 3, 3], f32), T([64], f32), T([64], f32), T([128, 64, 3, 3], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128, 64, 1, 1], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([128, 128, 3, 3], f32), T([128], f32), T([128], f32), T([256, 128, 3, 3], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256, 128, 1, 1], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256], f32), T([512, 256, 3, 3], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512, 256, 1, 1], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([512, 512, 3, 3], f32), T([512], f32), T([512], f32), T([10, 512], f32), T([10], f32)],), {})"
        }
    ],
    "aten._log_softmax.default": [
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), 1, False), {})"
        }
    ],
    "aten._log_softmax_backward_data.default": [
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), T([64, 10], f32), 1, f32), {})"
        }
    ],
    "aten._unsafe_view.default": [
        {
            "count": 1,
            "inputs": "((T([64, 256, 3, 3, 1, 1], f32), [64, 2304, 1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 256, 3, 3, 2, 2], f32), [64, 2304, 4]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 1, 1, 2, 2], f32), [64, 128, 4]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 3, 3, 2, 2], f32), [64, 1152, 4]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 128, 3, 3, 4, 4], f32), [64, 1152, 16]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 1, 1, 4, 4], f32), [64, 64, 16]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 3, 3, 4, 4], f32), [64, 576, 16]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 3, 3, 8, 8], f32), [64, 576, 64]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 7, 7, 16, 16], f32), [64, 147, 256]), {})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 1,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 256, 2, 2], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 128, 4, 4], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64], f32), 1e-06), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 7, 7], f32), T([64, 3, 7, 7], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64], f32), T([64], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 3, 3], f32), T([64, 64, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 3, 3], f32), T([128, 64, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([128], f32), T([128], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 128, 3, 3], f32), T([128, 128, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 1, 1], f32), T([128, 64, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 3, 3], f32), T([256, 128, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([256], f32), T([256], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([256, 256, 3, 3], f32), T([256, 256, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 1, 1], f32), T([256, 128, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 3, 3], f32), T([512, 256, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([512], f32), T([512], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([512, 512, 3, 3], f32), T([512, 512, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 1, 1], f32), T([512, 256, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10, 512], f32), T([10, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10], f32), T([10], f32)), {})"
        }
    ],
    "aten.add_.Tensor": [
        {
            "count": 2,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 128, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 256, 2, 2], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32)), {})"
        }
    ],
    "aten.addmm.default": [
        {
            "count": 1,
            "inputs": "((T([10], f32), T([64, 512], f32), T([512, 10], f32, stride=(1, 512))), {})"
        }
    ],
    "aten.bmm.default": [
        {
            "count": 3,
            "inputs": "((T([64, 256, 4], f32), T([64, 4, 2304], f32, stride=(9216, 1, 4))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 4], f32), T([64, 4, 128], f32, stride=(512, 1, 4))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 4], f32), T([64, 4, 1152], f32, stride=(4608, 1, 4))), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 128, 16], f32), T([64, 16, 1152], f32, stride=(18432, 1, 16))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 16], f32), T([64, 16, 64], f32, stride=(1024, 1, 16))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 16], f32), T([64, 16, 576], f32, stride=(9216, 1, 16))), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 64], f32), T([64, 64, 576], f32, stride=(36864, 1, 64))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 256], f32), T([64, 256, 147], f32, stride=(37632, 1, 256))), {})"
        }
    ],
    "aten.clamp.default": [
        {
            "count": 1,
            "inputs": "((T([64], f32), None, 1.0), {})"
        }
    ],
    "aten.constant_pad_nd.default": [
        {
            "count": 3,
            "inputs": "((T([64, 512, 1, 1], f32), [1, 1, 1, 1], 0.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), [0, 0, 0, 0], 0.0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 256, 2, 2], f32), [1, 1, 1, 1], 0.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), [0, 0, 0, 0], 0.0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 128, 4, 4], f32), [1, 1, 1, 1], 0.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 8, 8], f32), [0, 0, 0, 0], 0.0), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 64, 8, 8], f32), [1, 1, 1, 1], 0.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 32, 32], f32), [3, 3, 3, 3], 0.0), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 1,
            "inputs": "((T([64, 3, 32, 32], f32), T([64, 3, 7, 7], f32), None, [2, 2], [3, 3], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 8, 8], f32), T([128, 64, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 128, 4, 4], f32), T([128, 128, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 8, 8], f32), T([128, 64, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([256, 128, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 256, 2, 2], f32), T([256, 256, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([256, 128, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([512, 256, 3, 3], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 512, 1, 1], f32), T([512, 512, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([512, 256, 1, 1], f32), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 3,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32), T([512, 512, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 256, 2, 2], f32), T([512, 256, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 256, 2, 2], f32), T([512, 256, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 256, 2, 2], f32), T([256, 256, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 128, 4, 4], f32), T([256, 128, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 128, 4, 4], f32), T([256, 128, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 128, 4, 4], f32), T([128, 128, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 64, 8, 8], f32), T([128, 64, 1, 1], f32), [0], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 64, 8, 8], f32), T([128, 64, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32), T([64, 64, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), T([64, 3, 32, 32], f32), T([64, 3, 7, 7], f32), [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
        }
    ],
    "aten.copy_.default": [
        {
            "count": 1,
            "inputs": "((T([64, 10, 512], f32), T([64, 10, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), T([64, 10], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 512], f32), T([64, 512], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 512, 512, 3, 3], f32), T([64, 512, 512, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512, 256, 1, 1], f32), T([64, 512, 256, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 512, 256, 3, 3], f32), T([64, 512, 256, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 256], f32), T([64, 256], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 256, 256, 3, 3], f32), T([64, 256, 256, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 128, 1, 1], f32), T([64, 256, 128, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 256, 128, 3, 3], f32), T([64, 256, 128, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 128], f32), T([64, 128], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 128, 128, 3, 3], f32), T([64, 128, 128, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 64, 1, 1], f32), T([64, 128, 64, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 128, 64, 3, 3], f32), T([64, 128, 64, 3, 3], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 64], f32), T([64, 64], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 64, 3, 3], f32), T([64, 64, 64, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 3, 7, 7], f32), T([64, 64, 3, 7, 7], f32)), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 1,
            "inputs": "((T([64, 512, 1, 1], f32), 1), {})"
        }
    ],
    "aten.div_.Tensor": [
        {
            "count": 1,
            "inputs": "((T([64, 3, 7, 7], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64], f32), 64), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 3, 3], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([128], f32), 64), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 128, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 1, 1], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 3, 3], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([256], f32), 64), {})"
        },
        {
            "count": 3,
            "inputs": "((T([256, 256, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 1, 1], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 3, 3], f32), 64), {})"
        },
        {
            "count": 10,
            "inputs": "((T([512], f32), 64), {})"
        },
        {
            "count": 3,
            "inputs": "((T([512, 512, 3, 3], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 1, 1], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10, 512], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10], f32), 64), {})"
        }
    ],
    "aten.linalg_vector_norm.default": [
        {
            "count": 1,
            "inputs": "((T([64, 9408], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 64], f32), 2, [-1]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 36864], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 73728], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 128], f32), 2, [-1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 147456], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 8192], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 294912], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 256], f32), 2, [-1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 589824], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 32768], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1179648], f32), 2, [-1]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 512], f32), 2, [-1]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 2359296], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 131072], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 5120], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), 2, [-1]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 62], f32), 2, [1]), {})"
        }
    ],
    "aten.max_pool2d_with_indices.default": [
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), [3, 3], [2, 2], [1, 1]), {})"
        }
    ],
    "aten.max_pool2d_with_indices_backward.default": [
        {
            "count": 1,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 16, 16], f32), [3, 3], [2, 2], [1, 1], [1, 1], False, T([64, 64, 8, 8], i64)), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 1,
            "inputs": "((T([64, 512, 1, 1], f32), [-1, -2], True), {})"
        }
    ],
    "aten.mm.default": [
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), T([10, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10, 64], f32, stride=(1, 10)), T([64, 512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([9408, 64], f32, stride=(1, 9408)), T([64, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 64], f32, stride=(1, 64)), T([64, 1], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([36864, 64], f32, stride=(1, 36864)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([73728, 64], f32, stride=(1, 73728)), T([64, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([128, 64], f32, stride=(1, 128)), T([64, 1], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([147456, 64], f32, stride=(1, 147456)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([8192, 64], f32, stride=(1, 8192)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([294912, 64], f32, stride=(1, 294912)), T([64, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([256, 64], f32, stride=(1, 256)), T([64, 1], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([589824, 64], f32, stride=(1, 589824)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([32768, 64], f32, stride=(1, 32768)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1179648, 64], f32, stride=(1, 1179648)), T([64, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([512, 64], f32, stride=(1, 512)), T([64, 1], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([2359296, 64], f32, stride=(1, 2359296)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([131072, 64], f32, stride=(1, 131072)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([5120, 64], f32, stride=(1, 5120)), T([64, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10, 64], f32, stride=(1, 10)), T([64, 1], f32)), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 512], f32), T([64, 10, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 512, 1, 1], f32), 64), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([64, 1, 4608, 1], f32), T([64, 512, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 256, 1], f32, stride=(1024, 1, 4, 2)), T([64, 512, 1, 1], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 1, 2304, 1], f32), T([64, 512, 1, 1], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 256, 2, 2], f32), 64), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 256, 2, 2], f32)), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 128, 4, 4], f32), 64), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 128, 4, 4], f32)), {})"
        },
        {
            "count": 8,
            "inputs": "((T([64, 64, 8, 8], f32), 64), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 64, 16, 16], f32), 64), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), T([64, 64, 16, 16], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64], f32), 1.0), {})"
        }
    ],
    "aten.native_group_norm.default": [
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), T([64], f32), T([64], f32), 64, 64, 256, 32, 1e-05), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64], f32), T([64], f32), 64, 64, 64, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 128, 4, 4], f32), T([128], f32), T([128], f32), 64, 128, 16, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 256, 2, 2], f32), T([256], f32), T([256], f32), 64, 256, 4, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 512, 1, 1], f32), T([512], f32), T([512], f32), 64, 512, 1, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 512, 1, 1], f32), None, None, 64, 512, 1, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 256, 2, 2], f32), None, None, 64, 256, 4, 32, 1e-05), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 128, 4, 4], f32), None, None, 64, 128, 16, 32, 1e-05), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), None, None, 64, 64, 64, 32, 1e-05), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), None, None, 64, 64, 256, 32, 1e-05), {})"
        }
    ],
    "aten.native_group_norm_backward.default": [
        {
            "count": 5,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32), T([64, 32], f32), T([64, 32], f32), T([512], f32), 64, 512, 1, 32, [True, True, True]), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 256, 2, 2], f32), T([64, 32], f32), T([64, 32], f32), T([256], f32), 64, 256, 4, 32, [True, True, True]), {})"
        },
        {
            "count": 5,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 128, 4, 4], f32), T([64, 32], f32), T([64, 32], f32), T([128], f32), 64, 128, 16, 32, [True, True, True]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32), T([64, 32], f32), T([64, 32], f32), T([64], f32), 64, 64, 64, 32, [True, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), T([64, 64, 16, 16], f32), T([64, 32], f32), T([64, 32], f32), T([64], f32), 64, 64, 256, 32, [True, True, True]), {})"
        }
    ],
    "aten.nll_loss_backward.default": [
        {
            "count": 1,
            "inputs": "((T([], f32), T([64, 10], f32), T([64], i64), None, 1, -100, T([], f32)), {})"
        }
    ],
    "aten.nll_loss_forward.default": [
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), T([64], i64), None, 1, -100), {})"
        }
    ],
    "aten.reciprocal.default": [
        {
            "count": 1,
            "inputs": "((T([64], f32),), {})"
        }
    ],
    "aten.relu_.default": [
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 128, 4, 4], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 256, 2, 2], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 512, 1, 1], f32),), {})"
        }
    ],
    "aten.stack.default": [
        {
            "count": 1,
            "inputs": "(([T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32), T([64], f32)], 1), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([64, 10], f32), [0], True), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 512, 1, 1], f32), [2, 3]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 256, 2, 2], f32), [2, 3]), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64, 128, 4, 4], f32), [2, 3]), {})"
        },
        {
            "count": 8,
            "inputs": "((T([64, 64, 8, 8], f32), [2, 3]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 64, 16, 16], f32), [2, 3]), {})"
        }
    ],
    "aten.threshold_backward.default": [
        {
            "count": 4,
            "inputs": "((T([64, 512, 1, 1], f32), T([64, 512, 1, 1], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 256, 2, 2], f32), T([64, 256, 2, 2], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 128, 4, 4], f32), T([64, 128, 4, 4], f32), 0), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 8, 8], f32), T([64, 64, 8, 8], f32), 0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 64, 16, 16], f32), T([64, 64, 16, 16], f32), 0), {})"
        }
    ],
    "aten.zero_.default": [
        {
            "count": 1,
            "inputs": "((T([64, 3, 7, 7], f32),), {})"
        },
        {
            "count": 10,
            "inputs": "((T([64], f32),), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64, 64, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 3, 3], f32),), {})"
        },
        {
            "count": 10,
            "inputs": "((T([128], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([128, 128, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 3, 3], f32),), {})"
        },
        {
            "count": 10,
            "inputs": "((T([256], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([256, 256, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 3, 3], f32),), {})"
        },
        {
            "count": 10,
            "inputs": "((T([512], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([512, 512, 3, 3], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 1, 1], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10, 512], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([10], f32),), {})"
        }
    ]
}