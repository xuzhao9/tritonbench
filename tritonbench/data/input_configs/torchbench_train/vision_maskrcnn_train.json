{
    "aten._foreach_add.List": {
        "count": 1,
        "inputs": "(([T([128, 256, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([512, 256, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([256, 512, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([1024, 512, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([512, 1024, 1, 1], f32), T([512, 512, 3, 3], f32), T([2048, 512, 1, 1], f32), T([2048, 1024, 1, 1], f32), T([512, 2048, 1, 1], f32), T([512, 512, 3, 3], f32), T([2048, 512, 1, 1], f32), T([512, 2048, 1, 1], f32), T([512, 512, 3, 3], f32), T([2048, 512, 1, 1], f32), T([256, 256, 1, 1], f32), T([256], f32), T([256, 512, 1, 1], f32), T([256], f32), T([256, 1024, 1, 1], f32), T([256], f32), T([256, 2048, 1, 1], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([3, 256, 1, 1], f32), T([3], f32), T([12, 256, 1, 1], f32), T([12], f32), T([1024, 12544], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([91, 1024], f32), T([91], f32), T([364, 1024], f32), T([364], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 2, 2], f32), T([256], f32), T([91, 256, 1, 1], f32), T([91], f32)], [T([128, 256, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([512, 256, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([128, 512, 1, 1], f32), T([128, 128, 3, 3], f32), T([512, 128, 1, 1], f32), T([256, 512, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([1024, 512, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([256, 1024, 1, 1], f32), T([256, 256, 3, 3], f32), T([1024, 256, 1, 1], f32), T([512, 1024, 1, 1], f32), T([512, 512, 3, 3], f32), T([2048, 512, 1, 1], f32), T([2048, 1024, 1, 1], f32), T([512, 2048, 1, 1], f32), T([512, 512, 3, 3], f32), T([2048, 512, 1, 1], f32), T([512, 2048, 1, 1], f32), T([512, 512, 3, 3], f32), T([2048, 512, 1, 1], f32), T([256, 256, 1, 1], f32), T([256], f32), T([256, 512, 1, 1], f32), T([256], f32), T([256, 1024, 1, 1], f32), T([256], f32), T([256, 2048, 1, 1], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([3, 256, 1, 1], f32), T([3], f32), T([12, 256, 1, 1], f32), T([12], f32), T([1024, 12544], f32), T([1024], f32), T([1024, 1024], f32), T([1024], f32), T([91, 1024], f32), T([91], f32), T([364, 1024], f32), T([364], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 3, 3], f32), T([256], f32), T([256, 256, 2, 2], f32), T([256], f32), T([91, 256, 1, 1], f32), T([91], f32)]), {'alpha': 0.0001})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([512, 91], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([512, 91], f32), T([512, 91], f32), 1, f32), {})"
    },
    "aten._to_copy.default": {
        "count": 1,
        "inputs": "((T([11, 1, 800, 1199], u8),), {'dtype': f32, 'device': 'cuda'})"
    },
    "aten._unsafe_view.default": {
        "count": 1,
        "inputs": "((T([1, 13, 19, 3, 4], f32), [1, 741, 4]), {})"
    },
    "aten.add.Tensor": {
        "count": 5,
        "inputs": "((T([1, 512, 100, 152], f32), T([1, 512, 100, 152], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 3,
        "inputs": "((T([1, 2048, 25, 38], f32), T([1, 2048, 25, 38], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 1,
        "inputs": "((T([364], f32), T([512, 1024], f32), T([1024, 364], f32, stride=(1, 1024))), {})"
    },
    "aten.any.default": {
        "count": 1,
        "inputs": "((T([11, 2], b8),), {})"
    },
    "aten.binary_cross_entropy_with_logits.default": {
        "count": 1,
        "inputs": "((T([128, 28, 28], f32), T([128, 28, 28], f32)), {})"
    },
    "aten.bitwise_and.Tensor": {
        "count": 1,
        "inputs": "((T([2011], b8), T([2011], b8)), {})"
    },
    "aten.bitwise_or.Tensor": {
        "count": 1,
        "inputs": "((T([2011], u8), T([2011], u8)), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([128, 28, 28], f32)],), {})"
    },
    "aten.clamp.default": {
        "count": 1,
        "inputs": "((T([128], f32), 2, 5), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([91, 256, 1, 1], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([128, 256, 28, 28], f32), T([91, 256, 1, 1], f32), T([91], f32), [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([1, 128, 200, 304], f32), T([1, 256, 200, 304], f32), T([128, 256, 1, 1], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.copy_.default": {
        "count": 1,
        "inputs": "((T([3, 800, 1199], f32, stride=(972800, 1216, 1)), T([3, 800, 1199], f32)), {})"
    },
    "aten.div.Tensor": {
        "count": 1,
        "inputs": "((T([128], f32), 224), {})"
    },
    "aten.div_.Scalar": {
        "count": 1,
        "inputs": "((T([256], f32), 256), {})"
    },
    "aten.eq.Scalar": {
        "count": 1,
        "inputs": "((T([128], i64), 3), {})"
    },
    "aten.eq.Tensor": {
        "count": 1,
        "inputs": "((T([11, 242991], f32), T([11, 1], f32)), {})"
    },
    "aten.exp.default": {
        "count": 2,
        "inputs": "((T([242991, 1], f32),), {})"
    },
    "aten.fill_.Scalar": {
        "count": 1,
        "inputs": "((T([], i64), 64), {})"
    },
    "aten.floor.default": {
        "count": 1,
        "inputs": "((T([128], f32),), {})"
    },
    "aten.ge.Scalar": {
        "count": 1,
        "inputs": "((T([2011], i64), 1), {})"
    },
    "aten.gt.Scalar": {
        "count": 2,
        "inputs": "((T([512], i64), 0), {})"
    },
    "aten.index.Tensor": {
        "count": 1,
        "inputs": "((T([512, 256, 7, 7], f32), [T([333], i64)]), {})"
    },
    "aten.index_put.default": {
        "count": 1,
        "inputs": "((T([242991, 4], f32), [T([87], i64)], T([87, 4], f32), True), {})"
    },
    "aten.index_put_.default": {
        "count": 1,
        "inputs": "((T([128, 256, 14, 14], f32), [T([1], i64)], T([256, 14, 14], f32)), {})"
    },
    "aten.le.Tensor": {
        "count": 1,
        "inputs": "((T([11, 2], f32, stride=(4, 1)), T([11, 2], f32, stride=(4, 1))), {})"
    },
    "aten.log.default": {
        "count": 2,
        "inputs": "((T([512, 1], f32),), {})"
    },
    "aten.log2.default": {
        "count": 1,
        "inputs": "((T([128], f32),), {})"
    },
    "aten.lt.Scalar": {
        "count": 2,
        "inputs": "((T([2011], f32), 0.5), {})"
    },
    "aten.max.default": {
        "count": 1,
        "inputs": "((T([8741, 4], f32),), {})"
    },
    "aten.max.dim": {
        "count": 1,
        "inputs": "((T([11, 2011], f32), 0), {})"
    },
    "aten.max_pool2d_with_indices.default": {
        "count": 1,
        "inputs": "((T([1, 256, 25, 38], f32), [1, 1], [2, 2]), {})"
    },
    "aten.max_pool2d_with_indices_backward.default": {
        "count": 1,
        "inputs": "((T([1, 256, 13, 19], f32), T([1, 256, 25, 38], f32), [1, 1], [2, 2], [0, 0], [1, 1], False, T([1, 256, 13, 19], i64)), {})"
    },
    "aten.maximum.default": {
        "count": 1,
        "inputs": "((T([11, 1, 2], f32, stride=(4, 4, 1)), T([1, 2011, 2], f32, stride=(8044, 4, 1))), {})"
    },
    "aten.minimum.default": {
        "count": 1,
        "inputs": "((T([11, 1, 2], f32, stride=(4, 4, 1)), T([1, 2011, 2], f32, stride=(8044, 4, 1))), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1024, 512], f32, stride=(1, 1024)), T([512, 12544], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([256], f32), T([], f32)), {})"
    },
    "aten.new_full.default": {
        "count": 1,
        "inputs": "((T([3, 800, 1199], f32), [1, 3, 800, 1216], 0), {'pin_memory': False})"
    },
    "aten.new_zeros.default": {
        "count": 1,
        "inputs": "((T([87, 4], f32), [242991, 4]), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.nll_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([512, 91], f32), T([512], i64), None, 1, -100, T([], f32)), {})"
    },
    "aten.nll_loss_forward.default": {
        "count": 1,
        "inputs": "((T([512, 91], f32), T([512], i64), None, 1, -100), {})"
    },
    "aten.nonzero.default": {
        "count": 4,
        "inputs": "((T([128], b8),), {})"
    },
    "aten.relu.default": {
        "count": 2,
        "inputs": "((T([512, 1024], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 1,
        "inputs": "((T([128, 256, 28, 28], f32),), {})"
    },
    "aten.round.default": {
        "count": 16,
        "inputs": "((T([], f32),), {})"
    },
    "aten.rsqrt.default": {
        "count": 4,
        "inputs": "((T([1, 2048, 1, 1], f32),), {})"
    },
    "aten.sigmoid.default": {
        "count": 1,
        "inputs": "((T([256], f32),), {})"
    },
    "aten.smooth_l1_loss.default": {
        "count": 1,
        "inputs": "((T([128, 4], f32), T([128, 4], f32), 2, 0.1111111111111111), {})"
    },
    "aten.smooth_l1_loss_backward.default": {
        "count": 1,
        "inputs": "((T([], f32), T([87, 4], f32), T([87, 4], f32), 2, 0.1111111111111111), {})"
    },
    "aten.split_with_sizes.default": {
        "count": 1,
        "inputs": "((T([512, 4], f32), [512]), {})"
    },
    "aten.sqrt.default": {
        "count": 1,
        "inputs": "((T([128], f32),), {})"
    },
    "aten.stack.default": {
        "count": 1,
        "inputs": "(([T([8741, 2], f32), T([8741, 2], f32)], 2), {})"
    },
    "aten.sub.Tensor": {
        "count": 1,
        "inputs": "((T([256], f32), T([256], f32)), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 2,
        "inputs": "((T([512, 1024], f32), [0], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([1, 128, 200, 304], f32), T([1, 128, 200, 304], f32), 0), {})"
    },
    "aten.topk.default": {
        "count": 1,
        "inputs": "((T([1, 741], f32), 741, 1), {})"
    },
    "aten.unbind.int": {
        "count": 1,
        "inputs": "((T([1, 1], i64), 1), {})"
    },
    "aten.uniform_.default": {
        "count": 1,
        "inputs": "((T([1], f32),), {})"
    },
    "aten.upsample_bilinear2d.default": {
        "count": 1,
        "inputs": "((T([1, 3, 427, 640], f32, stride=(3, 1, 1920, 3)), [800, 1199], False), {})"
    },
    "aten.upsample_nearest2d.default": {
        "count": 1,
        "inputs": "((T([1, 256, 100, 152], f32), [200, 304]), {})"
    },
    "aten.upsample_nearest2d_backward.default": {
        "count": 1,
        "inputs": "((T([1, 256, 50, 76], f32), [50, 76], [1, 256, 25, 38]), {})"
    },
    "torchvision._roi_align_backward.default": {
        "count": 1,
        "inputs": "((T([333, 256, 7, 7], f32), T([333, 5], f32), 0.25, 7, 7, 1, 256, 200, 304, 2, False), {})"
    },
    "torchvision.nms.default": {
        "count": 1,
        "inputs": "((T([8741, 4], f32), T([8741], f32), 0.7), {})"
    },
    "torchvision.roi_align.default": {
        "count": 1,
        "inputs": "((T([11, 1, 800, 1199], f32), T([128, 5], f32), 1.0, 28, 28, -1, False), {})"
    }
}