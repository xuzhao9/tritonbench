{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([16, 3, 3, 3], f32), T([16], f32), T([16], f32), T([16, 1, 3, 3], f32), T([16], f32), T([16], f32), T([16, 16, 1, 1], f32), T([16], f32), T([16], f32), T([64, 16, 1, 1], f32), T([64], f32), T([64], f32), T([64, 1, 3, 3], f32), T([64], f32), T([64], f32), T([24, 64, 1, 1], f32), T([24], f32), T([24], f32), T([72, 24, 1, 1], f32), T([72], f32), T([72], f32), T([72, 1, 3, 3], f32), T([72], f32), T([72], f32), T([24, 72, 1, 1], f32), T([24], f32), T([24], f32), T([72, 24, 1, 1], f32), T([72], f32), T([72], f32), T([72, 1, 5, 5], f32), T([72], f32), T([72], f32), T([24, 72, 1, 1], f32), T([24], f32), T([72, 24, 1, 1], f32), T([72], f32), T([40, 72, 1, 1], f32), T([40], f32), T([40], f32), T([120, 40, 1, 1], f32), T([120], f32), T([120], f32), T([120, 1, 5, 5], f32), T([120], f32), T([120], f32), T([32, 120, 1, 1], f32), T([32], f32), T([120, 32, 1, 1], f32), T([120], f32), T([40, 120, 1, 1], f32), T([40], f32), T([40], f32), T([120, 40, 1, 1], f32), T([120], f32), T([120], f32), T([120, 1, 5, 5], f32), T([120], f32), T([120], f32), T([32, 120, 1, 1], f32), T([32], f32), T([120, 32, 1, 1], f32), T([120], f32), T([40, 120, 1, 1], f32), T([40], f32), T([40], f32), T([240, 40, 1, 1], f32), T([240], f32), T([240], f32), T([240, 1, 3, 3], f32), T([240], f32), T([240], f32), T([80, 240, 1, 1], f32), T([80], f32), T([80], f32), T([200, 80, 1, 1], f32), T([200], f32), T([200], f32), T([200, 1, 3, 3], f32), T([200], f32), T([200], f32), T([80, 200, 1, 1], f32), T([80], f32), T([80], f32), T([184, 80, 1, 1], f32), T([184], f32), T([184], f32), T([184, 1, 3, 3], f32), T([184], f32), T([184], f32), T([80, 184, 1, 1], f32), T([80], f32), T([80], f32), T([184, 80, 1, 1], f32), T([184], f32), T([184], f32), T([184, 1, 3, 3], f32), T([184], f32), T([184], f32), T([80, 184, 1, 1], f32), T([80], f32), T([80], f32), T([480, 80, 1, 1], f32), T([480], f32), T([480], f32), T([480, 1, 3, 3], f32), T([480], f32), T([480], f32), T([120, 480, 1, 1], f32), T([120], f32), T([480, 120, 1, 1], f32), T([480], f32), T([112, 480, 1, 1], f32), T([112], f32), T([112], f32), T([672, 112, 1, 1], f32), T([672], f32), T([672], f32), T([672, 1, 3, 3], f32), T([672], f32), T([672], f32), T([168, 672, 1, 1], f32), T([168], f32), T([672, 168, 1, 1], f32), T([672], f32), T([112, 672, 1, 1], f32), T([112], f32), T([112], f32), T([672, 112, 1, 1], f32), T([672], f32), T([672], f32), T([672, 1, 5, 5], f32), T([672], f32), T([672], f32), T([168, 672, 1, 1], f32), T([168], f32), T([672, 168, 1, 1], f32), T([672], f32), T([160, 672, 1, 1], f32), T([160], f32), T([160], f32), T([960, 160, 1, 1], f32), T([960], f32), T([960], f32), T([960, 1, 5, 5], f32), T([960], f32), T([960], f32), T([240, 960, 1, 1], f32), T([240], f32), T([960, 240, 1, 1], f32), T([960], f32), T([160, 960, 1, 1], f32), T([160], f32), T([160], f32), T([960, 160, 1, 1], f32), T([960], f32), T([960], f32), T([960, 1, 5, 5], f32), T([960], f32), T([960], f32), T([240, 960, 1, 1], f32), T([240], f32), T([960, 240, 1, 1], f32), T([960], f32), T([160, 960, 1, 1], f32), T([160], f32), T([160], f32), T([960, 160, 1, 1], f32), T([960], f32), T([960], f32), T([1280, 960], f32), T([1280], f32), T([1000, 1280], f32), T([1000], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32), T([32, 1000], f32), 1, f32), {})"
    },
    "aten.add.Tensor": {
        "count": 1,
        "inputs": "((T([32, 16, 112, 112], f32), T([32, 16, 112, 112], f32)), {})"
    },
    "aten.add_.Tensor": {
        "count": 4,
        "inputs": "((T([32, 160, 7, 7], f32), T([32, 160, 7, 7], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 2,
        "inputs": "((T([1000], f32), T([32, 1280], f32), T([1280, 1000], f32, stride=(1, 1280))), {})"
    },
    "aten.bernoulli_.float": {
        "count": 2,
        "inputs": "((T([32, 1280], f32), 0.8), {})"
    },
    "aten.clone.default": {
        "count": 1,
        "inputs": "((T([32, 1280], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 4,
        "inputs": "((T([32, 960, 7, 7], f32), T([160, 960, 1, 1], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([32, 16, 112, 112], f32), T([32, 3, 224, 224], f32), T([16, 3, 3, 3], f32), [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False]), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 10,
        "inputs": "((T([32, 960, 7, 7], f32), T([960], f32), T([960], f32), T([960], f32), T([960], f32), True, 0.01, 0.001), {})"
    },
    "aten.cudnn_batch_norm_backward.default": {
        "count": 3,
        "inputs": "((T([32, 16, 112, 112], f32), T([32, 16, 112, 112], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), T([16], f32), 0.001, T([0], u8)), {})"
    },
    "aten.div.Scalar": {
        "count": 1,
        "inputs": "((T([32, 72, 28, 28], f32, stride=(72, 1, 0, 0)), 784), {})"
    },
    "aten.div_.Scalar": {
        "count": 2,
        "inputs": "((T([32, 1280], f32), 0.8), {})"
    },
    "aten.hardsigmoid.default": {
        "count": 4,
        "inputs": "((T([32, 960, 1, 1], f32),), {})"
    },
    "aten.hardsigmoid_backward.default": {
        "count": 1,
        "inputs": "((T([32, 72, 1, 1], f32), T([32, 72, 1, 1], f32)), {})"
    },
    "aten.hardswish_.default": {
        "count": 2,
        "inputs": "((T([32, 1280], f32),), {})"
    },
    "aten.hardswish_backward.default": {
        "count": 1,
        "inputs": "((T([32, 16, 112, 112], f32), T([32, 16, 112, 112], f32)), {})"
    },
    "aten.mean.dim": {
        "count": 6,
        "inputs": "((T([32, 960, 7, 7], f32), [-1, -2], True), {})"
    },
    "aten.mm.default": {
        "count": 1,
        "inputs": "((T([1280, 32], f32, stride=(1, 1280)), T([32, 960], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([32, 72, 28, 28], f32), T([32, 72, 28, 28], f32)), {})"
    },
    "aten.mul_.Tensor": {
        "count": 2,
        "inputs": "((T([32, 1280], f32), T([32, 1280], f32)), {})"
    },
    "aten.neg.default": {
        "count": 2,
        "inputs": "((T([], f32),), {})"
    },
    "aten.relu.default": {
        "count": 4,
        "inputs": "((T([32, 240, 1, 1], f32),), {})"
    },
    "aten.relu_.default": {
        "count": 8,
        "inputs": "((T([32, 120, 28, 28], f32),), {})"
    },
    "aten.sum.default": {
        "count": 1,
        "inputs": "((T([32, 1000], f32),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([32, 72, 28, 28], f32), [2, 3], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 1,
        "inputs": "((T([32, 16, 112, 112], f32), T([32, 16, 112, 112], f32), 0), {})"
    }
}