{
    "aten._foreach_sqrt.default": {
        "count": 2,
        "inputs": "(([T([512, 320], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([1014, 512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([512], f32), T([512], f32), T([512, 512], f32), T([512], f32), T([2048, 512], f32), T([2048], f32), T([512, 2048], f32), T([512], f32), T([512], f32), T([512], f32)],), {})"
    },
    "aten._log_softmax.default": {
        "count": 2,
        "inputs": "((T([220, 1014], f32), 1, False), {})"
    },
    "aten._log_softmax_backward_data.default": {
        "count": 2,
        "inputs": "((T([220, 1014], f32), T([220, 1014], f32), 1, f32), {})"
    },
    "aten._softmax.default": {
        "count": 12,
        "inputs": "((T([80, 22, 204], f32), 2, False), {})"
    },
    "aten._softmax_backward_data.default": {
        "count": 12,
        "inputs": "((T([80, 204, 204], f32), T([80, 204, 204], f32), 2, f32), {})"
    },
    "aten._to_copy.default": {
        "count": 2,
        "inputs": "((T([220], b8),), {'dtype': i64})"
    },
    "aten._unsafe_view.default": {
        "count": 12,
        "inputs": "((T([8, 10, 204, 64], f32), [80, 204, 64]), {})"
    },
    "aten.add.Tensor": {
        "count": 2,
        "inputs": "((T([1014, 512], f32), T([1014, 512], f32)), {})"
    },
    "aten.addmm.default": {
        "count": 12,
        "inputs": "((T([512], f32), T([220, 2048], f32), T([2048, 512], f32, stride=(1, 2048))), {})"
    },
    "aten.bmm.default": {
        "count": 12,
        "inputs": "((T([80, 64, 204], f32, stride=(13056, 1, 64)), T([80, 204, 204], f32)), {})"
    },
    "aten.cat.default": {
        "count": 2,
        "inputs": "(([T([10], i64), T([1], i64)],), {})"
    },
    "aten.copy_.default": {
        "count": 2,
        "inputs": "((T([], f32), T([], f32)), {})"
    },
    "aten.div.Tensor": {
        "count": 4,
        "inputs": "((T([], f32), 141), {})"
    },
    "aten.embedding.default": {
        "count": 2,
        "inputs": "((T([1014, 512], f32), T([10, 22], i64)), {})"
    },
    "aten.embedding_dense_backward.default": {
        "count": 2,
        "inputs": "((T([10, 22, 512], f32), T([10, 22], i64), 1014, -1, False), {})"
    },
    "aten.eq.Scalar": {
        "count": 2,
        "inputs": "((T([10, 22], i64), 2), {})"
    },
    "aten.eq.Tensor": {
        "count": 2,
        "inputs": "((T([220], i64), T([220], i64)), {})"
    },
    "aten.fill_.Scalar": {
        "count": 2,
        "inputs": "((T([10, 22], i64), -1), {})"
    },
    "aten.fill_.Tensor": {
        "count": 6,
        "inputs": "((T([118], f32), T([], f32)), {})"
    },
    "aten.gt.Scalar": {
        "count": 2,
        "inputs": "((T([10, 22, 22], u8), 0), {})"
    },
    "aten.index.Tensor": {
        "count": 20,
        "inputs": "((T([21], i64), [T([21], b8)]), {})"
    },
    "aten.lt.Scalar": {
        "count": 4,
        "inputs": "((T([10, 204], f32), 1), {})"
    },
    "aten.masked_fill.Scalar": {
        "count": 12,
        "inputs": "((T([80, 204, 204], f32), T([80, 204, 204], b8), 0), {})"
    },
    "aten.masked_scatter.default": {
        "count": 2,
        "inputs": "((T([220], f32), T([220], b8), T([141], f32, stride=(0,))), {})"
    },
    "aten.masked_select.default": {
        "count": 2,
        "inputs": "((T([220], b8), T([220], b8)), {})"
    },
    "aten.max.dim": {
        "count": 2,
        "inputs": "((T([220, 1014], f32), 1), {})"
    },
    "aten.mm.default": {
        "count": 2,
        "inputs": "((T([512, 2040], f32, stride=(1, 512)), T([2040, 320], f32)), {})"
    },
    "aten.mul.Tensor": {
        "count": 24,
        "inputs": "((T([10, 204, 512], f32), T([10, 204, 1], f32)), {})"
    },
    "aten.mul_.Tensor": {
        "count": 36,
        "inputs": "((T([10, 22, 512], f32), T([10, 22, 1], f32)), {})"
    },
    "aten.native_dropout.default": {
        "count": 6,
        "inputs": "((T([80, 22, 204], f32), 0.1, True), {})"
    },
    "aten.native_dropout_backward.default": {
        "count": 6,
        "inputs": "((T([80, 204, 204], f32), T([80, 204, 204], b8), 1.1111111111111112), {})"
    },
    "aten.native_layer_norm.default": {
        "count": 36,
        "inputs": "((T([10, 22, 512], f32), [512], T([512], f32), T([512], f32), 1e-05), {})"
    },
    "aten.native_layer_norm_backward.default": {
        "count": 26,
        "inputs": "((T([10, 204, 512], f32), T([10, 204, 512], f32), [512], T([10, 204, 1], f32), T([10, 204, 1], f32), T([512], f32), T([512], f32), [True, True, True]), {})"
    },
    "aten.ne.Scalar": {
        "count": 2,
        "inputs": "((T([10, 22], i64), -1), {})"
    },
    "aten.neg.default": {
        "count": 4,
        "inputs": "((T([220], f32),), {})"
    },
    "aten.new_ones.default": {
        "count": 2,
        "inputs": "((T([10, 204, 512], f32), [10, 204]), {'pin_memory': False})"
    },
    "aten.relu.default": {
        "count": 12,
        "inputs": "((T([10, 22, 2048], f32),), {})"
    },
    "aten.repeat.default": {
        "count": 12,
        "inputs": "((T([10, 22, 204], b8, stride=(204, 0, 1)), [8, 1, 1]), {})"
    },
    "aten.rsub.Scalar": {
        "count": 2,
        "inputs": "((T([220, 1014], f32), 1), {})"
    },
    "aten.scatter.value": {
        "count": 2,
        "inputs": "((T([220, 1014], f32), 1, T([220, 1], i64), 1), {})"
    },
    "aten.sum.default": {
        "count": 2,
        "inputs": "((T([10, 22], b8),), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 12,
        "inputs": "((T([2040, 2048], f32), [0], True), {})"
    },
    "aten.threshold_backward.default": {
        "count": 12,
        "inputs": "((T([10, 204, 2048], f32), T([10, 204, 2048], f32), 0), {})"
    },
    "aten.triu.default": {
        "count": 2,
        "inputs": "((T([22, 22], u8), 1), {})"
    },
    "aten.unbind.int": {
        "count": 2,
        "inputs": "((T([10, 21], i64),), {})"
    }
}