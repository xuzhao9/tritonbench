{
    "aten._foreach_sqrt.default": [
        {
            "count": 1,
            "inputs": "(([T([64, 3, 4, 4], f32), T([64], f32), T([128, 64, 4, 4], f32), T([128], f32), T([256, 128, 4, 4], f32), T([256], f32), T([512, 256, 4, 4], f32), T([512], f32), T([1024, 512, 4, 4], f32), T([1024], f32), T([2048, 1024, 4, 4], f32), T([2048], f32), T([1, 2048, 3, 3], f32), T([5, 2048, 2, 2], f32)],), {})"
        }
    ],
    "aten._to_copy.default": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 1, 1], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 1, 2, 2], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
        }
    ],
    "aten.add.Tensor": [
        {
            "count": 6,
            "inputs": "((T([16, 256, 32, 32], f32), T([16, 256, 32, 32], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 3, 128, 128], f32), T([16, 3, 128, 128], f32)), {})"
        },
        {
            "count": 3,
            "inputs": "((T([], f32), T([], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 3, 4, 4], f32), T([64, 3, 4, 4], f32, stride=(16, 1024, 4, 1))), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 2048, 2, 2], f32), T([16, 2048, 2, 2], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([1, 2048, 3, 3], f32), T([1, 2048, 3, 3], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 64, 4, 4], f32), T([128, 64, 4, 4], f32, stride=(16, 2048, 4, 1))), {})"
        },
        {
            "count": 2,
            "inputs": "((T([2048, 1024, 4, 4], f32), T([2048, 1024, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([2048], f32), T([2048], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 128, 4, 4], f32), T([256, 128, 4, 4], f32, stride=(16, 4096, 4, 1))), {})"
        },
        {
            "count": 2,
            "inputs": "((T([1024, 512, 4, 4], f32), T([1024, 512, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([1024], f32), T([1024], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 256, 4, 4], f32), T([512, 256, 4, 4], f32, stride=(16, 8192, 4, 1))), {})"
        },
        {
            "count": 2,
            "inputs": "((T([512, 256, 4, 4], f32), T([512, 256, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([512], f32), T([512], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1024, 512, 4, 4], f32), T([1024, 512, 4, 4], f32, stride=(16, 16384, 4, 1))), {})"
        },
        {
            "count": 2,
            "inputs": "((T([256, 128, 4, 4], f32), T([256, 128, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([256], f32), T([256], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2048, 1024, 4, 4], f32), T([2048, 1024, 4, 4], f32, stride=(16, 32768, 4, 1))), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128, 64, 4, 4], f32), T([128, 64, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([128], f32), T([128], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 1024, 4, 4], f32), T([16, 1024, 4, 4], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 8, 8], f32), T([16, 512, 8, 8], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 256, 16, 16], f32), T([16, 256, 16, 16], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 128, 32, 32], f32), T([16, 128, 32, 32], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 64, 64, 64], f32), T([16, 64, 64, 64], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64, 3, 4, 4], f32), T([64, 3, 4, 4], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([64], f32), T([64], f32)), {})"
        }
    ],
    "aten.binary_cross_entropy_with_logits.default": [
        {
            "count": 1,
            "inputs": "((T([16, 5], f32), T([16, 5], f32), None, None, 2), {})"
        }
    ],
    "aten.cat.default": [
        {
            "count": 1,
            "inputs": "(([T([16, 3, 128, 128], f32), T([16, 5, 128, 128], f32)], 1), {})"
        }
    ],
    "aten.clone.default": [
        {
            "count": 7,
            "inputs": "((T([16, 5], f32),), {})"
        }
    ],
    "aten.convolution.default": [
        {
            "count": 3,
            "inputs": "((T([16, 3, 128, 128], f32), T([64, 3, 4, 4], f32), T([64], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 64, 64, 64], f32), T([128, 64, 4, 4], f32), T([128], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 128, 32, 32], f32), T([256, 128, 4, 4], f32), T([256], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 256, 16, 16], f32), T([512, 256, 4, 4], f32), T([512], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 512, 8, 8], f32), T([1024, 512, 4, 4], f32), T([1024], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 1024, 4, 4], f32), T([2048, 1024, 4, 4], f32), T([2048], f32), [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 4,
            "inputs": "((T([16, 2048, 2, 2], f32), T([1, 2048, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 2048, 2, 2], f32), T([5, 2048, 2, 2], f32), None, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 8, 128, 128], f32), T([64, 8, 7, 7], f32), None, [1, 1], [3, 3], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 64, 128, 128], f32), T([128, 64, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 128, 64, 64], f32), T([256, 128, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 12,
            "inputs": "((T([16, 256, 32, 32], f32), T([256, 256, 3, 3], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 256, 32, 32], f32), T([256, 128, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], True, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 128, 64, 64], f32), T([128, 64, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], True, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 64, 128, 128], f32), T([3, 64, 7, 7], f32), None, [1, 1], [3, 3], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 3, 128, 128], f32), T([64, 3, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([3, 16, 128, 128], f32, stride=(16384, 49152, 128, 1)), T([64, 16, 64, 64], f32), None, [1, 1], [1, 1], [2, 2], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 64, 64, 64], f32), T([128, 64, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([64, 16, 64, 64], f32, stride=(4096, 262144, 64, 1)), T([128, 16, 32, 32], f32), None, [1, 1], [1, 1], [2, 2], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 128, 32, 32], f32), T([256, 128, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([128, 16, 32, 32], f32, stride=(1024, 131072, 32, 1)), T([256, 16, 16, 16], f32), None, [1, 1], [1, 1], [2, 2], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 256, 16, 16], f32), T([512, 256, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([256, 16, 16, 16], f32, stride=(256, 65536, 16, 1)), T([512, 16, 8, 8], f32), None, [1, 1], [1, 1], [2, 2], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 8, 8], f32), T([1024, 512, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([512, 16, 8, 8], f32, stride=(64, 32768, 8, 1)), T([1024, 16, 4, 4], f32), None, [1, 1], [1, 1], [2, 2], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 1024, 4, 4], f32), T([2048, 1024, 4, 4], f32), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([1024, 16, 4, 4], f32, stride=(16, 16384, 4, 1)), T([2048, 16, 2, 2], f32), None, [1, 1], [1, 1], [2, 2], False, [0, 0], 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([2048, 16, 2, 2], f32, stride=(4, 8192, 2, 1)), T([1, 16, 2, 2], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
        }
    ],
    "aten.convolution_backward.default": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 2, 2], f32), T([16, 2048, 2, 2], f32), T([1, 2048, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 2048, 2, 2], f32), T([16, 1024, 4, 4], f32), T([2048, 1024, 4, 4], f32), [2048], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 1024, 4, 4], f32), T([16, 512, 8, 8], f32), T([1024, 512, 4, 4], f32), [1024], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 512, 8, 8], f32), T([16, 256, 16, 16], f32), T([512, 256, 4, 4], f32), [512], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 256, 16, 16], f32), T([16, 128, 32, 32], f32), T([256, 128, 4, 4], f32), [256], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 128, 32, 32], f32), T([16, 64, 64, 64], f32), T([128, 64, 4, 4], f32), [128], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 64, 64, 64], f32), T([16, 3, 128, 128], f32), T([64, 3, 4, 4], f32), [64], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, False, False]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([16, 1, 2, 2], f32), T([16, 2048, 2, 2], f32), T([1, 2048, 3, 3], f32), [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 2048, 2, 2], f32), T([16, 1024, 4, 4], f32), T([2048, 1024, 4, 4], f32), [2048], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 1024, 4, 4], f32), T([16, 512, 8, 8], f32), T([1024, 512, 4, 4], f32), [1024], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 512, 8, 8], f32), T([16, 256, 16, 16], f32), T([512, 256, 4, 4], f32), [512], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 256, 16, 16], f32), T([16, 128, 32, 32], f32), T([256, 128, 4, 4], f32), [256], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 128, 32, 32], f32), T([16, 64, 64, 64], f32), T([128, 64, 4, 4], f32), [128], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        },
        {
            "count": 2,
            "inputs": "((T([16, 64, 64, 64], f32), T([16, 3, 128, 128], f32), T([64, 3, 4, 4], f32), [64], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, True]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 5, 1, 1], f32), T([16, 2048, 2, 2], f32), T([5, 2048, 2, 2], f32), [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False]), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 64, 64, 64], f32), T([16, 3, 128, 128], f32), T([64, 3, 4, 4], f32), [64], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
        }
    ],
    "aten.copy_.default": [
        {
            "count": 2,
            "inputs": "((T([16], f32, stride=(5,)), T([16], b8)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([64], f32), T([64], f32)), {})"
        },
        {
            "count": 4,
            "inputs": "((T([128], f32), T([128], f32)), {})"
        },
        {
            "count": 26,
            "inputs": "((T([256], f32), T([256], f32)), {})"
        }
    ],
    "aten.cudnn_batch_norm.default": [
        {
            "count": 2,
            "inputs": "((T([1, 1024, 128, 128], f32), T([1024], f32), T([1024], f32), T([1024], f32), T([1024], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 2,
            "inputs": "((T([1, 2048, 64, 64], f32), T([2048], f32), T([2048], f32), T([2048], f32), T([2048], f32), True, 0.1, 1e-05), {})"
        },
        {
            "count": 13,
            "inputs": "((T([1, 4096, 32, 32], f32), T([4096], f32), T([4096], f32), T([4096], f32), T([4096], f32), True, 0.1, 1e-05), {})"
        }
    ],
    "aten.div.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16], f32, stride=(0,)), 16), {})"
        },
        {
            "count": 2,
            "inputs": "((T([16, 1, 2, 2], f32, stride=(0, 0, 0, 0)), 64), {})"
        }
    ],
    "aten.div.Tensor": [
        {
            "count": 2,
            "inputs": "((T([], f32), 16), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16], f32), T([16], f32)), {})"
        }
    ],
    "aten.eq.Scalar": [
        {
            "count": 2,
            "inputs": "((T([16], f32, stride=(5,)), 0), {})"
        }
    ],
    "aten.fill_.Tensor": [
        {
            "count": 9,
            "inputs": "((T([16], f32, stride=(5,)), T([], f32)), {})"
        }
    ],
    "aten.index.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16, 5], f32), [T([16], i64)]), {})"
        }
    ],
    "aten.leaky_relu.default": [
        {
            "count": 3,
            "inputs": "((T([16, 64, 64, 64], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 128, 32, 32], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 256, 16, 16], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 512, 8, 8], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 1024, 4, 4], f32),), {})"
        },
        {
            "count": 3,
            "inputs": "((T([16, 2048, 2, 2], f32),), {})"
        }
    ],
    "aten.leaky_relu_backward.default": [
        {
            "count": 4,
            "inputs": "((T([16, 2048, 2, 2], f32), T([16, 2048, 2, 2], f32), 0.01, False), {})"
        },
        {
            "count": 5,
            "inputs": "((T([16, 1024, 4, 4], f32), T([16, 1024, 4, 4], f32), 0.01, False), {})"
        },
        {
            "count": 5,
            "inputs": "((T([16, 512, 8, 8], f32), T([16, 512, 8, 8], f32), 0.01, False), {})"
        },
        {
            "count": 5,
            "inputs": "((T([16, 256, 16, 16], f32), T([16, 256, 16, 16], f32), 0.01, False), {})"
        },
        {
            "count": 5,
            "inputs": "((T([16, 128, 32, 32], f32), T([16, 128, 32, 32], f32), 0.01, False), {})"
        },
        {
            "count": 5,
            "inputs": "((T([16, 64, 64, 64], f32), T([16, 64, 64, 64], f32), 0.01, False), {})"
        }
    ],
    "aten.mean.default": [
        {
            "count": 2,
            "inputs": "((T([16, 1, 2, 2], f32),), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16], f32),), {})"
        }
    ],
    "aten.mean.dim": [
        {
            "count": 4,
            "inputs": "((T([16, 64], f32), [0]), {})"
        },
        {
            "count": 4,
            "inputs": "((T([16, 128], f32), [0]), {})"
        },
        {
            "count": 26,
            "inputs": "((T([16, 256], f32), [0]), {})"
        }
    ],
    "aten.mul.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16], f32), 2.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16], f32), 2), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 49152], f32), 2.0), {})"
        }
    ],
    "aten.mul.Tensor": [
        {
            "count": 2,
            "inputs": "((T([16, 1, 1, 1], f32), T([16, 3, 128, 128], f32)), {})"
        },
        {
            "count": 2,
            "inputs": "((T([], f32), 1), {})"
        },
        {
            "count": 2,
            "inputs": "((T([], f32), 10), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16], f32), T([16], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 49152], f32, stride=(1, 0)), T([16, 49152], f32)), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 5], f32), T([], f32)), {})"
        }
    ],
    "aten.neg.default": [
        {
            "count": 2,
            "inputs": "((T([], f32),), {})"
        }
    ],
    "aten.pow.Tensor_Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 49152], f32), 2), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16], f32), 2), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16], f32), 1.0), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 49152], f32), 1.0), {})"
        }
    ],
    "aten.relu_.default": [
        {
            "count": 2,
            "inputs": "((T([16, 64, 128, 128], f32),), {})"
        },
        {
            "count": 2,
            "inputs": "((T([16, 128, 64, 64], f32),), {})"
        },
        {
            "count": 7,
            "inputs": "((T([16, 256, 32, 32], f32),), {})"
        }
    ],
    "aten.repeat.default": [
        {
            "count": 1,
            "inputs": "((T([16, 5, 1, 1], f32), [1, 1, 128, 128]), {})"
        },
        {
            "count": 8,
            "inputs": "((T([64], f32), [16]), {})"
        },
        {
            "count": 8,
            "inputs": "((T([128], f32), [16]), {})"
        },
        {
            "count": 52,
            "inputs": "((T([256], f32), [16]), {})"
        }
    ],
    "aten.rsub.Scalar": [
        {
            "count": 1,
            "inputs": "((T([16, 1, 1, 1], f32), 1), {})"
        }
    ],
    "aten.sigmoid.default": [
        {
            "count": 1,
            "inputs": "((T([16, 5], f32),), {})"
        }
    ],
    "aten.sqrt.default": [
        {
            "count": 1,
            "inputs": "((T([16], f32),), {})"
        }
    ],
    "aten.sub.Tensor": [
        {
            "count": 1,
            "inputs": "((T([16], f32), 1), {})"
        },
        {
            "count": 1,
            "inputs": "((T([16, 5], f32), T([16, 5], f32)), {})"
        }
    ],
    "aten.sum.dim_IntList": [
        {
            "count": 1,
            "inputs": "((T([16, 49152], f32), [1]), {})"
        }
    ],
    "aten.tanh.default": [
        {
            "count": 1,
            "inputs": "((T([16, 3, 128, 128], f32),), {})"
        }
    ]
}