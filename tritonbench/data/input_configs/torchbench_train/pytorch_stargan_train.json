{
    "aten._foreach_sqrt.default": {
        "count": 1,
        "inputs": "(([T([64, 3, 4, 4], f32), T([64], f32), T([128, 64, 4, 4], f32), T([128], f32), T([256, 128, 4, 4], f32), T([256], f32), T([512, 256, 4, 4], f32), T([512], f32), T([1024, 512, 4, 4], f32), T([1024], f32), T([2048, 1024, 4, 4], f32), T([2048], f32), T([1, 2048, 3, 3], f32), T([5, 2048, 2, 2], f32)],), {})"
    },
    "aten._to_copy.default": {
        "count": 1,
        "inputs": "((T([16, 1, 2, 2], f32),), {'dtype': f32, 'layout': torch.strided, 'device': 'cuda'})"
    },
    "aten.add.Tensor": {
        "count": 2,
        "inputs": "((T([64], f32), T([64], f32)), {})"
    },
    "aten.binary_cross_entropy_with_logits.default": {
        "count": 1,
        "inputs": "((T([16, 5], f32), T([16, 5], f32), None, None, 2), {})"
    },
    "aten.cat.default": {
        "count": 1,
        "inputs": "(([T([16, 3, 128, 128], f32), T([16, 5, 128, 128], f32)], 1), {})"
    },
    "aten.clone.default": {
        "count": 7,
        "inputs": "((T([16, 5], f32),), {})"
    },
    "aten.convolution.default": {
        "count": 1,
        "inputs": "((T([2048, 16, 2, 2], f32, stride=(4, 8192, 2, 1)), T([1, 16, 2, 2], f32), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), {})"
    },
    "aten.convolution_backward.default": {
        "count": 1,
        "inputs": "((T([16, 64, 64, 64], f32), T([16, 3, 128, 128], f32), T([64, 3, 4, 4], f32), [64], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True]), {})"
    },
    "aten.copy_.default": {
        "count": 26,
        "inputs": "((T([256], f32), T([256], f32)), {})"
    },
    "aten.cudnn_batch_norm.default": {
        "count": 13,
        "inputs": "((T([1, 4096, 32, 32], f32), T([4096], f32), T([4096], f32), T([4096], f32), T([4096], f32), True, 0.1, 1e-05), {})"
    },
    "aten.div.Scalar": {
        "count": 2,
        "inputs": "((T([16, 1, 2, 2], f32, stride=(0, 0, 0, 0)), 64), {})"
    },
    "aten.div.Tensor": {
        "count": 1,
        "inputs": "((T([16], f32), T([16], f32)), {})"
    },
    "aten.eq.Scalar": {
        "count": 2,
        "inputs": "((T([16], f32, stride=(5,)), 0), {})"
    },
    "aten.fill_.Tensor": {
        "count": 9,
        "inputs": "((T([16], f32, stride=(5,)), T([], f32)), {})"
    },
    "aten.index.Tensor": {
        "count": 1,
        "inputs": "((T([16, 5], f32), [T([16], i64)]), {})"
    },
    "aten.leaky_relu.default": {
        "count": 3,
        "inputs": "((T([16, 2048, 2, 2], f32),), {})"
    },
    "aten.leaky_relu_backward.default": {
        "count": 5,
        "inputs": "((T([16, 64, 64, 64], f32), T([16, 64, 64, 64], f32), 0.01, False), {})"
    },
    "aten.mean.default": {
        "count": 1,
        "inputs": "((T([16], f32),), {})"
    },
    "aten.mean.dim": {
        "count": 26,
        "inputs": "((T([16, 256], f32), [0]), {})"
    },
    "aten.mul.Scalar": {
        "count": 1,
        "inputs": "((T([16, 49152], f32), 2.0), {})"
    },
    "aten.mul.Tensor": {
        "count": 1,
        "inputs": "((T([16, 5], f32), T([], f32)), {})"
    },
    "aten.neg.default": {
        "count": 2,
        "inputs": "((T([], f32),), {})"
    },
    "aten.pow.Tensor_Scalar": {
        "count": 1,
        "inputs": "((T([16, 49152], f32), 1.0), {})"
    },
    "aten.relu_.default": {
        "count": 7,
        "inputs": "((T([16, 256, 32, 32], f32),), {})"
    },
    "aten.repeat.default": {
        "count": 52,
        "inputs": "((T([256], f32), [16]), {})"
    },
    "aten.rsub.Scalar": {
        "count": 1,
        "inputs": "((T([16, 1, 1, 1], f32), 1), {})"
    },
    "aten.sigmoid.default": {
        "count": 1,
        "inputs": "((T([16, 5], f32),), {})"
    },
    "aten.sqrt.default": {
        "count": 1,
        "inputs": "((T([16], f32),), {})"
    },
    "aten.sub.Tensor": {
        "count": 1,
        "inputs": "((T([16, 5], f32), T([16, 5], f32)), {})"
    },
    "aten.sum.dim_IntList": {
        "count": 1,
        "inputs": "((T([16, 49152], f32), [1]), {})"
    },
    "aten.tanh.default": {
        "count": 1,
        "inputs": "((T([16, 3, 128, 128], f32),), {})"
    }
}